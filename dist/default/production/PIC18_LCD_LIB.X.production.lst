

Microchip Technology PIC18 LITE Macro Assembler V1.40 build -251452761 
                                                                                               Mon Mar 13 16:10:51 2017

Microchip Technology Omniscient Code Generator v1.40 (Free mode) build 201612010151
     1                           	processor	18F4620
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	lm
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	idataBANK0,global,class=CODE,delta=1,noexec
     7                           	psect	idataBANK1,global,class=CODE,delta=1,noexec
     8                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     9                           	psect	cinit,global,reloc=2,class=CODE,delta=1
    10                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    11                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    12                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    13                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1,lowdata,noexec
    14                           	psect	bssBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    15                           	psect	dataBANK1,global,class=BANK1,space=1,delta=1,lowdata,noexec
    16                           	psect	cstackBANK1,global,class=BANK1,space=1,delta=1,noexec
    17                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1,noexec
    18                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,noexec
    19                           	psect	text0,global,reloc=2,class=CODE,delta=1
    20                           	psect	text1,global,reloc=2,class=CODE,delta=1
    21                           	psect	text2,global,reloc=2,class=CODE,delta=1
    22                           	psect	text3,global,reloc=2,class=CODE,delta=1
    23                           	psect	text4,global,reloc=2,class=CODE,delta=1
    24                           	psect	text5,global,reloc=2,class=CODE,delta=1
    25                           	psect	text6,global,reloc=2,class=CODE,delta=1
    26                           	psect	text7,global,reloc=2,class=CODE,delta=1
    27                           	psect	text8,global,reloc=2,class=CODE,delta=1
    28                           	psect	text9,global,reloc=2,class=CODE,delta=1
    29                           	psect	text10,global,reloc=2,class=CODE,delta=1
    30                           	psect	text11,global,reloc=2,class=CODE,delta=1
    31                           	psect	text12,global,reloc=2,class=CODE,delta=1
    32                           	psect	text13,global,reloc=2,class=CODE,delta=1
    33                           	psect	text14,global,reloc=2,class=CODE,delta=1
    34                           	psect	text15,global,reloc=2,class=CODE,delta=1
    35                           	psect	text16,global,reloc=2,class=CODE,delta=1
    36                           	psect	text17,global,reloc=2,class=CODE,delta=1
    37                           	psect	text18,global,reloc=2,class=CODE,delta=1
    38                           	psect	text19,global,reloc=2,class=CODE,delta=1
    39                           	psect	text20,global,reloc=2,class=CODE,delta=1
    40                           	psect	text21,global,reloc=2,class=CODE,delta=1
    41                           	psect	text22,global,reloc=2,class=CODE,delta=1
    42                           	psect	text23,global,reloc=2,class=CODE,delta=1
    43                           	psect	text24,global,reloc=2,class=CODE,delta=1
    44                           	psect	text25,global,reloc=2,class=CODE,delta=1
    45                           	psect	text26,global,reloc=2,class=CODE,delta=1
    46                           	psect	text27,global,reloc=2,class=CODE,delta=1
    47                           	psect	text28,global,reloc=2,class=CODE,delta=1
    48                           	psect	text29,global,reloc=2,class=CODE,delta=1
    49                           	psect	text30,global,reloc=2,class=CODE,delta=1
    50                           	psect	text31,global,reloc=2,class=CODE,delta=1
    51                           	psect	text32,global,reloc=2,class=CODE,delta=1
    52                           	psect	text33,global,reloc=2,class=CODE,delta=1
    53                           	psect	text34,global,reloc=2,class=CODE,delta=1
    54                           	psect	text35,global,reloc=2,class=CODE,delta=1
    55                           	psect	text36,global,reloc=2,class=CODE,delta=1
    56                           	psect	text37,global,reloc=2,class=CODE,delta=1
    57                           	psect	text38,global,reloc=2,class=CODE,delta=1
    58                           	psect	text39,global,reloc=2,class=CODE,delta=1
    59                           	psect	text40,global,reloc=2,class=CODE,delta=1
    60                           	psect	text41,global,reloc=2,class=CODE,delta=1
    61                           	psect	text42,global,reloc=2,class=CODE,delta=1
    62                           	psect	text43,global,reloc=2,class=CODE,delta=1
    63                           	psect	text44,global,reloc=2,class=CODE,delta=1
    64                           	psect	text45,global,reloc=2,class=CODE,delta=1
    65                           	psect	text46,global,reloc=2,class=CODE,delta=1
    66                           	psect	text47,global,reloc=2,class=CODE,delta=1
    67                           	psect	text48,global,reloc=2,class=CODE,delta=1
    68                           	psect	text49,global,reloc=2,class=CODE,delta=1
    69                           	psect	text50,global,reloc=2,class=CODE,delta=1
    70                           	psect	text51,global,reloc=2,class=CODE,delta=1
    71                           	psect	text52,global,reloc=2,class=CODE,delta=1
    72                           	psect	text53,global,reloc=2,class=CODE,delta=1
    73                           	psect	text54,global,reloc=2,class=CODE,delta=1
    74                           	psect	intcode,global,reloc=2,class=CODE,delta=1
    75                           	psect	intcode_body,global,reloc=2,class=CODE,delta=1
    76                           	psect	text56,global,reloc=2,class=CODE,delta=1
    77                           	psect	text57,global,reloc=2,class=CODE,delta=1
    78                           	psect	text58,global,reloc=2,class=CODE,delta=1
    79                           	psect	text59,global,reloc=2,class=CODE,delta=1
    80                           	psect	text60,global,reloc=2,class=CODE,delta=1
    81                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    82                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    83                           	psect	temp,global,ovrld,common,class=COMRAM,space=1,delta=1
    84  0000                     
    85                           ; Version 1.40
    86                           ; Generated 01/12/2016 GMT
    87                           ; 
    88                           ; Copyright Â© 2016, Microchip Technology Inc. and its subsidiaries ("Microchip")
    89                           ; All rights reserved.
    90                           ; 
    91                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    92                           ; 
    93                           ; Redistribution and use in source and binary forms, with or without modification, are
    94                           ; permitted provided that the following conditions are met:
    95                           ; 
    96                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    97                           ;        conditions and the following disclaimer.
    98                           ; 
    99                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
   100                           ;        of conditions and the following disclaimer in the documentation and/or other
   101                           ;        materials provided with the distribution.
   102                           ; 
   103                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
   104                           ;        software without specific prior written permission.
   105                           ; 
   106                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
   107                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
   108                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
   109                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
   110                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
   111                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
   112                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
   113                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
   114                           ; 
   115                           ; 
   116                           ; Code-generator required, PIC18F4620 Definitions
   117                           ; 
   118                           ; SFR Addresses
   119  0000                     
   120                           	psect	idataCOMRAM
   121  002E3E                     __pidataCOMRAM:
   122                           	opt stack 0
   123                           
   124                           ;initializer for _redirectingServo
   125  002E3E  0003               	dw	3
   126  002E40  0002               	dw	2
   127  002E42  0003               	dw	3
   128                           
   129                           ;initializer for _padPin2
   130  002E44  0000               	dw	0
   131  002E46  0002               	dw	2
   132                           
   133                           ;initializer for _redirectAngle_9V
   134  002E48  0064               	dw	100
   135                           
   136                           ;initializer for _redirectAngle_AA
   137  002E4A  003C               	dw	60
   138                           
   139                           ;initializer for _redirectAngle_C
   140  002E4C  0050               	dw	80
   141                           
   142                           ;initializer for _redirectAngle_OTHER
   143  002E4E  0078               	dw	120
   144                           
   145                           	psect	idataBANK0
   146  002DF4                     __pidataBANK0:
   147                           	opt stack 0
   148                           
   149                           ;initializer for _conveyorServo
   150  002DF4  0000               	dw	0
   151  002DF6  0002               	dw	2
   152  002DF8  0001               	dw	1
   153                           
   154                           ;initializer for _padServo
   155  002DFA  0001               	dw	1
   156  002DFC  0002               	dw	2
   157  002DFE  0002               	dw	2
   158                           
   159                           ;initializer for _AA_float
   160  002E00  0000               	dw	0
   161  002E02  0003               	dw	3
   162                           
   163                           ;initializer for _cylinderMotor
   164  002E04  0002               	dw	2
   165  002E06  0000               	dw	0
   166                           
   167                           ;initializer for _padPin1
   168  002E08  0000               	dw	0
   169  002E0A  0001               	dw	1
   170                           
   171                           ;initializer for _padAngle_CLOSE
   172  002E0C  0046               	dw	70
   173                           
   174                           ;initializer for _padAngle_NEUTRAL
   175  002E0E  005A               	dw	90
   176                           
   177                           ;initializer for _padAngle_OPEN
   178  002E10  00B4               	dw	180
   179                           
   180                           	psect	idataBANK1
   181  002E6C                     __pidataBANK1:
   182                           	opt stack 0
   183                           
   184                           ;initializer for sortBattery@F3138
   185  002E6C  0064               	dw	100
   186  002E6E  005F               	dw	95
   187  002E70  005A               	dw	90
   188  002E72  0055               	dw	85
   189                           
   190                           	psect	mediumconst
   191  00FDD2                     __pmediumconst:
   192                           	opt stack 0
   193  00FDD2  00                 	db	0
   194  00FDD3                     _dpowers:
   195                           	opt stack 0
   196  00FDD3  0001               	dw	1
   197  00FDD5  0000               	dw	0
   198  00FDD7  000A               	dw	10
   199  00FDD9  0000               	dw	0
   200  00FDDB  0064               	dw	100
   201  00FDDD  0000               	dw	0
   202  00FDDF  03E8               	dw	1000
   203  00FDE1  0000               	dw	0
   204  00FDE3  2710               	dw	10000
   205  00FDE5  0000               	dw	0
   206  00FDE7  86A0               	dw	34464
   207  00FDE9  0001               	dw	1
   208  00FDEB  4240               	dw	16960
   209  00FDED  000F               	dw	15
   210  00FDEF  9680               	dw	38528
   211  00FDF1  0098               	dw	152
   212  00FDF3  E100               	dw	57600
   213  00FDF5  05F5               	dw	1525
   214  00FDF7  CA00               	dw	51712
   215  00FDF9  3B9A               	dw	15258
   216  00FDFB                     __end_of_dpowers:
   217                           	opt stack 0
   218  00FDFB                     __npowers_:
   219                           	opt stack 0
   220  00FDFB  00                 	db	0
   221  00FDFC  80                 	db	128
   222  00FDFD  3F                 	db	63
   223  00FDFE  CD                 	db	205
   224  00FDFF  CC                 	db	204
   225  00FE00  3D                 	db	61
   226  00FE01  D7                 	db	215
   227  00FE02  23                 	db	35
   228  00FE03  3C                 	db	60
   229  00FE04  12                 	db	18
   230  00FE05  83                 	db	131
   231  00FE06  3A                 	db	58
   232  00FE07  B7                 	db	183
   233  00FE08  D1                 	db	209
   234  00FE09  38                 	db	56
   235  00FE0A  C6                 	db	198
   236  00FE0B  27                 	db	39
   237  00FE0C  37                 	db	55
   238  00FE0D  38                 	db	56
   239  00FE0E  86                 	db	134
   240  00FE0F  35                 	db	53
   241  00FE10  C0                 	db	192
   242  00FE11  D6                 	db	214
   243  00FE12  33                 	db	51
   244  00FE13  CC                 	db	204
   245  00FE14  2B                 	db	43
   246  00FE15  32                 	db	50
   247  00FE16  70                 	db	112
   248  00FE17  89                 	db	137
   249  00FE18  30                 	db	48
   250  00FE19  E7                 	db	231
   251  00FE1A  DB                 	db	219
   252  00FE1B  2E                 	db	46
   253  00FE1C  E5                 	db	229
   254  00FE1D  3C                 	db	60
   255  00FE1E  1E                 	db	30
   256  00FE1F  42                 	db	66
   257  00FE20  A2                 	db	162
   258  00FE21  0D                 	db	13
   259  00FE22                     __end_of__npowers_:
   260                           	opt stack 0
   261  00FE22                     __powers_:
   262                           	opt stack 0
   263  00FE22  00                 	db	0
   264  00FE23  80                 	db	128
   265  00FE24  3F                 	db	63
   266  00FE25  00                 	db	0
   267  00FE26  20                 	db	32
   268  00FE27  41                 	db	65
   269  00FE28  00                 	db	0
   270  00FE29  C8                 	db	200
   271  00FE2A  42                 	db	66
   272  00FE2B  00                 	db	0
   273  00FE2C  7A                 	db	122
   274  00FE2D  44                 	db	68
   275  00FE2E  40                 	db	64
   276  00FE2F  1C                 	db	28
   277  00FE30  46                 	db	70
   278  00FE31  50                 	db	80
   279  00FE32  C3                 	db	195
   280  00FE33  47                 	db	71
   281  00FE34  24                 	db	36
   282  00FE35  74                 	db	116
   283  00FE36  49                 	db	73
   284  00FE37  97                 	db	151
   285  00FE38  18                 	db	24
   286  00FE39  4B                 	db	75
   287  00FE3A  BC                 	db	188
   288  00FE3B  BE                 	db	190
   289  00FE3C  4C                 	db	76
   290  00FE3D  6B                 	db	107
   291  00FE3E  6E                 	db	110
   292  00FE3F  4E                 	db	78
   293  00FE40  03                 	db	3
   294  00FE41  15                 	db	21
   295  00FE42  50                 	db	80
   296  00FE43  79                 	db	121
   297  00FE44  AD                 	db	173
   298  00FE45  60                 	db	96
   299  00FE46  F3                 	db	243
   300  00FE47  49                 	db	73
   301  00FE48  71                 	db	113
   302  00FE49                     __end_of__powers_:
   303                           	opt stack 0
   304  00FE49                     _hexpowers:
   305                           	opt stack 0
   306  00FE49  0001               	dw	1
   307  00FE4B  0000               	dw	0
   308  00FE4D  0010               	dw	16
   309  00FE4F  0000               	dw	0
   310  00FE51  0100               	dw	256
   311  00FE53  0000               	dw	0
   312  00FE55  1000               	dw	4096
   313  00FE57  0000               	dw	0
   314  00FE59  0000               	dw	0
   315  00FE5B  0001               	dw	1
   316  00FE5D  0000               	dw	0
   317  00FE5F  0010               	dw	16
   318  00FE61  0000               	dw	0
   319  00FE63  0100               	dw	256
   320  00FE65  0000               	dw	0
   321  00FE67  1000               	dw	4096
   322  00FE69                     __end_of_hexpowers:
   323                           	opt stack 0
   324  00FE69                     _keys:
   325                           	opt stack 0
   326  00FE69  31                 	db	49
   327  00FE6A  32                 	db	50
   328  00FE6B  33                 	db	51
   329  00FE6C  41                 	db	65
   330  00FE6D  34                 	db	52
   331  00FE6E  35                 	db	53
   332  00FE6F  36                 	db	54
   333  00FE70  42                 	db	66
   334  00FE71  37                 	db	55
   335  00FE72  38                 	db	56
   336  00FE73  39                 	db	57
   337  00FE74  43                 	db	67
   338  00FE75  2A                 	db	42
   339  00FE76  30                 	db	48
   340  00FE77  23                 	db	35
   341  00FE78  44                 	db	68
   342  00FE79  00                 	db	0
   343  00FE7A                     __end_of_keys:
   344                           	opt stack 0
   345  00FE7A                     _happynewyear:
   346                           	opt stack 0
   347  00FE7A  00                 	db	0
   348  00FE7B  59                 	db	89
   349  00FE7C  03                 	db	3
   350  00FE7D  01                 	db	1
   351  00FE7E  13                 	db	19
   352  00FE7F  04                 	db	4
   353  00FE80  17                 	db	23
   354  00FE81                     __end_of_happynewyear:
   355                           	opt stack 0
   356  0000                     _ADCON0	set	4034
   357  0000                     _ADCON1	set	4033
   358  0000                     _ADCON2	set	4032
   359  0000                     _ADRESH	set	4036
   360  0000                     _ADRESL	set	4035
   361  0000                     _EEADR	set	4009
   362  0000                     _EEADRH	set	4010
   363  0000                     _EECON1	set	4006
   364  0000                     _EECON2	set	4007
   365  0000                     _EEDATA	set	4008
   366  0000                     _INTCONbits	set	4082
   367  0000                     _LATA	set	3977
   368  0000                     _LATB	set	3978
   369  0000                     _LATC	set	3979
   370  0000                     _LATD	set	3980
   371  0000                     _LATDbits	set	3980
   372  0000                     _LATE	set	3981
   373  0000                     _PORTA	set	3968
   374  0000                     _PORTB	set	3969
   375  0000                     _PORTBbits	set	3969
   376  0000                     _PORTC	set	3970
   377  0000                     _PORTD	set	3971
   378  0000                     _SSPADD	set	4040
   379  0000                     _SSPBUF	set	4041
   380  0000                     _SSPCON1	set	4038
   381  0000                     _SSPCON2	set	4037
   382  0000                     _SSPSTAT	set	4039
   383  0000                     _T0CON	set	4053
   384  0000                     _T1CON	set	4045
   385  0000                     _T2CON	set	4042
   386  0000                     _T3CON	set	4017
   387  0000                     _TMR0H	set	4055
   388  0000                     _TMR0L	set	4054
   389  0000                     _TMR1H	set	4047
   390  0000                     _TMR1L	set	4046
   391  0000                     _TMR3H	set	4019
   392  0000                     _TMR3L	set	4018
   393  0000                     _TRISA	set	3986
   394  0000                     _TRISB	set	3987
   395  0000                     _TRISC	set	3988
   396  0000                     _TRISD	set	3989
   397  0000                     _TRISE	set	3990
   398  0000                     _ACKDT	set	32301
   399  0000                     _ACKEN	set	32300
   400  0000                     _EEIF	set	32012
   401  0000                     _INT0IE	set	32660
   402  0000                     _INT0IF	set	32657
   403  0000                     _INT1IE	set	32643
   404  0000                     _INT1IF	set	32640
   405  0000                     _PEIE	set	32662
   406  0000                     _PEN	set	32298
   407  0000                     _RCEN	set	32299
   408  0000                     _RSEN	set	32297
   409  0000                     _SEN	set	32296
   410  0000                     _TMR0IE	set	32661
   411  0000                     _TMR0IF	set	32658
   412  0000                     _TMR1IE	set	31976
   413  0000                     _TMR1IF	set	31984
   414  0000                     _TMR2IF	set	31985
   415  0000                     _TMR3IE	set	32001
   416  0000                     _TMR3IF	set	32009
   417  0000                     _TRISC3	set	31907
   418  0000                     _TRISC4	set	31908
   419  00FE81                     STR_8:
   420  00FE81  63                 	db	99	;'c'
   421  00FE82  6F                 	db	111	;'o'
   422  00FE83  6E                 	db	110	;'n'
   423  00FE84  76                 	db	118	;'v'
   424  00FE85  65                 	db	101	;'e'
   425  00FE86  79                 	db	121	;'y'
   426  00FE87  6F                 	db	111	;'o'
   427  00FE88  72                 	db	114	;'r'
   428  00FE89  20                 	db	32
   429  00FE8A  26                 	db	38
   430  00FE8B  20                 	db	32
   431  00FE8C  63                 	db	99	;'c'
   432  00FE8D  79                 	db	121	;'y'
   433  00FE8E  6C                 	db	108	;'l'
   434  00FE8F  69                 	db	105	;'i'
   435  00FE90  6E                 	db	110	;'n'
   436  00FE91  64                 	db	100	;'d'
   437  00FE92  65                 	db	101	;'e'
   438  00FE93  72                 	db	114	;'r'
   439  00FE94  20                 	db	32
   440  00FE95  6F                 	db	111	;'o'
   441  00FE96  6E                 	db	110	;'n'
   442  00FE97  3F                 	db	63	;'?'
   443  00FE98  00                 	db	0
   444  00FE99                     STR_5:
   445  00FE99  70                 	db	112	;'p'
   446  00FE9A  69                 	db	105	;'i'
   447  00FE9B  63                 	db	99	;'c'
   448  00FE9C  6B                 	db	107	;'k'
   449  00FE9D  20                 	db	32
   450  00FE9E  61                 	db	97	;'a'
   451  00FE9F  6E                 	db	110	;'n'
   452  00FEA0  67                 	db	103	;'g'
   453  00FEA1  6C                 	db	108	;'l'
   454  00FEA2  65                 	db	101	;'e'
   455  00FEA3  3A                 	db	58	;':'
   456  00FEA4  20                 	db	32
   457  00FEA5  31                 	db	49	;'1'
   458  00FEA6  2C                 	db	44
   459  00FEA7  32                 	db	50	;'2'
   460  00FEA8  2C                 	db	44
   461  00FEA9  33                 	db	51	;'3'
   462  00FEAA  2C                 	db	44
   463  00FEAB  34                 	db	52	;'4'
   464  00FEAC  3F                 	db	63	;'?'
   465  00FEAD  00                 	db	0
   466  00FEAE                     STR_2:
   467  00FEAE  69                 	db	105	;'i'
   468  00FEAF  6E                 	db	110	;'n'
   469  00FEB0  74                 	db	116	;'t'
   470  00FEB1  65                 	db	101	;'e'
   471  00FEB2  72                 	db	114	;'r'
   472  00FEB3  72                 	db	114	;'r'
   473  00FEB4  75                 	db	117	;'u'
   474  00FEB5  70                 	db	112	;'p'
   475  00FEB6  74                 	db	116	;'t'
   476  00FEB7  21                 	db	33
   477  00FEB8  21                 	db	33
   478  00FEB9  21                 	db	33
   479  00FEBA  0A                 	db	10
   480  00FEBB  63                 	db	99	;'c'
   481  00FEBC  6C                 	db	108	;'l'
   482  00FEBD  6F                 	db	111	;'o'
   483  00FEBE  73                 	db	115	;'s'
   484  00FEBF  65                 	db	101	;'e'
   485  00FEC0  3F                 	db	63	;'?'
   486  00FEC1  00                 	db	0
   487  00FEC2                     STR_17:
   488  00FEC2  25                 	db	37
   489  00FEC3  63                 	db	99	;'c'
   490  00FEC4  29                 	db	41
   491  00FEC5  20                 	db	32
   492  00FEC6  74                 	db	116	;'t'
   493  00FEC7  69                 	db	105	;'i'
   494  00FEC8  6D                 	db	109	;'m'
   495  00FEC9  65                 	db	101	;'e'
   496  00FECA  20                 	db	32
   497  00FECB  20                 	db	32
   498  00FECC  3C                 	db	60	;'<'
   499  00FECD  41                 	db	65	;'A'
   500  00FECE  20                 	db	32
   501  00FECF  20                 	db	32
   502  00FED0  20                 	db	32
   503  00FED1  20                 	db	32
   504  00FED2  20                 	db	32
   505  00FED3  0A                 	db	10
   506  00FED4  00                 	db	0
   507  00FED5                     STR_13:
   508  00FED5  73                 	db	115	;'s'
   509  00FED6  74                 	db	116	;'t'
   510  00FED7  61                 	db	97	;'a'
   511  00FED8  72                 	db	114	;'r'
   512  00FED9  74                 	db	116	;'t'
   513  00FEDA  20                 	db	32
   514  00FEDB  20                 	db	32
   515  00FEDC  20                 	db	32
   516  00FEDD  3C                 	db	60	;'<'
   517  00FEDE  42                 	db	66	;'B'
   518  00FEDF  20                 	db	32
   519  00FEE0  20                 	db	32
   520  00FEE1  20                 	db	32
   521  00FEE2  20                 	db	32
   522  00FEE3  20                 	db	32
   523  00FEE4  20                 	db	32
   524  00FEE5  0A                 	db	10
   525  00FEE6  00                 	db	0
   526  00FEE7                     STR_11:
   527  00FEE7  20                 	db	32
   528  00FEE8  20                 	db	32
   529  00FEE9  68                 	db	104	;'h'
   530  00FEEA  68                 	db	104	;'h'
   531  00FEEB  3A                 	db	58	;':'
   532  00FEEC  6D                 	db	109	;'m'
   533  00FEED  6D                 	db	109	;'m'
   534  00FEEE  3A                 	db	58	;':'
   535  00FEEF  73                 	db	115	;'s'
   536  00FEF0  73                 	db	115	;'s'
   537  00FEF1  20                 	db	32
   538  00FEF2  20                 	db	32
   539  00FEF3  20                 	db	32
   540  00FEF4  20                 	db	32
   541  00FEF5  20                 	db	32
   542  00FEF6  20                 	db	32
   543  00FEF7  0A                 	db	10
   544  00FEF8  00                 	db	0
   545  00FEF9                     STR_15:
   546  00FEF9  73                 	db	115	;'s'
   547  00FEFA  65                 	db	101	;'e'
   548  00FEFB  6C                 	db	108	;'l'
   549  00FEFC  65                 	db	101	;'e'
   550  00FEFD  63                 	db	99	;'c'
   551  00FEFE  74                 	db	116	;'t'
   552  00FEFF  20                 	db	32
   553  00FF00  72                 	db	114	;'r'
   554  00FF01  75                 	db	117	;'u'
   555  00FF02  6E                 	db	110	;'n'
   556  00FF03  3A                 	db	58	;':'
   557  00FF04  20                 	db	32
   558  00FF05  20                 	db	32
   559  00FF06  20                 	db	32
   560  00FF07  20                 	db	32
   561  00FF08  20                 	db	32
   562  00FF09  0A                 	db	10
   563  00FF0A  00                 	db	0
   564  00FF0B                     STR_19:
   565  00FF0B  74                 	db	116	;'t'
   566  00FF0C  69                 	db	105	;'i'
   567  00FF0D  6D                 	db	109	;'m'
   568  00FF0E  65                 	db	101	;'e'
   569  00FF0F  3A                 	db	58	;':'
   570  00FF10  20                 	db	32
   571  00FF11  6E                 	db	110	;'n'
   572  00FF12  6E                 	db	110	;'n'
   573  00FF13  6E                 	db	110	;'n'
   574  00FF14  20                 	db	32
   575  00FF15  73                 	db	115	;'s'
   576  00FF16  65                 	db	101	;'e'
   577  00FF17  63                 	db	99	;'c'
   578  00FF18  20                 	db	32
   579  00FF19  20                 	db	32
   580  00FF1A  20                 	db	32
   581  00FF1B  0A                 	db	10
   582  00FF1C  00                 	db	0
   583  00FF1D                     STR_21:
   584  00FF1D  5B                 	db	91	;'['
   585  00FF1E  41                 	db	65	;'A'
   586  00FF1F  41                 	db	65	;'A'
   587  00FF20  2C                 	db	44
   588  00FF21  39                 	db	57	;'9'
   589  00FF22  56                 	db	86	;'V'
   590  00FF23  2C                 	db	44
   591  00FF24  43                 	db	67	;'C'
   592  00FF25  2C                 	db	44
   593  00FF26  6F                 	db	111	;'o'
   594  00FF27  74                 	db	116	;'t'
   595  00FF28  68                 	db	104	;'h'
   596  00FF29  65                 	db	101	;'e'
   597  00FF2A  72                 	db	114	;'r'
   598  00FF2B  5D                 	db	93	;']'
   599  00FF2C  20                 	db	32
   600  00FF2D  0A                 	db	10
   601  00FF2E  00                 	db	0
   602  00FF2F                     STR_23:
   603  00FF2F  30                 	db	48	;'0'
   604  00FF30  31                 	db	49	;'1'
   605  00FF31  32                 	db	50	;'2'
   606  00FF32  33                 	db	51	;'3'
   607  00FF33  34                 	db	52	;'4'
   608  00FF34  35                 	db	53	;'5'
   609  00FF35  36                 	db	54	;'6'
   610  00FF36  37                 	db	55	;'7'
   611  00FF37  38                 	db	56	;'8'
   612  00FF38  39                 	db	57	;'9'
   613  00FF39  61                 	db	97	;'a'
   614  00FF3A  62                 	db	98	;'b'
   615  00FF3B  63                 	db	99	;'c'
   616  00FF3C  64                 	db	100	;'d'
   617  00FF3D  65                 	db	101	;'e'
   618  00FF3E  66                 	db	102	;'f'
   619  00FF3F  00                 	db	0
   620  00FF40                     STR_20:
   621  00FF40  20                 	db	32
   622  00FF41  20                 	db	32
   623  00FF42  20                 	db	32
   624  00FF43  20                 	db	32
   625  00FF44  20                 	db	32
   626  00FF45  20                 	db	32
   627  00FF46  20                 	db	32
   628  00FF47  20                 	db	32
   629  00FF48  20                 	db	32
   630  00FF49  20                 	db	32
   631  00FF4A  20                 	db	32
   632  00FF4B  20                 	db	32
   633  00FF4C  20                 	db	32
   634  00FF4D  20                 	db	32
   635  00FF4E  2A                 	db	42
   636  00FF4F  3E                 	db	62	;'>'
   637  00FF50  00                 	db	0
   638  00FF51                     STR_16:
   639  00FF51  5B                 	db	91	;'['
   640  00FF52  31                 	db	49	;'1'
   641  00FF53  2C                 	db	44
   642  00FF54  32                 	db	50	;'2'
   643  00FF55  2C                 	db	44
   644  00FF56  33                 	db	51	;'3'
   645  00FF57  2C                 	db	44
   646  00FF58  34                 	db	52	;'4'
   647  00FF59  5D                 	db	93	;']'
   648  00FF5A  20                 	db	32
   649  00FF5B  20                 	db	32
   650  00FF5C  20                 	db	32
   651  00FF5D  20                 	db	32
   652  00FF5E  20                 	db	32
   653  00FF5F  2A                 	db	42
   654  00FF60  3E                 	db	62	;'>'
   655  00FF61  00                 	db	0
   656  00FF62                     STR_14:
   657  00FF62  68                 	db	104	;'h'
   658  00FF63  69                 	db	105	;'i'
   659  00FF64  73                 	db	115	;'s'
   660  00FF65  74                 	db	116	;'t'
   661  00FF66  6F                 	db	111	;'o'
   662  00FF67  72                 	db	114	;'r'
   663  00FF68  79                 	db	121	;'y'
   664  00FF69  20                 	db	32
   665  00FF6A  3C                 	db	60	;'<'
   666  00FF6B  43                 	db	67	;'C'
   667  00FF6C  20                 	db	32
   668  00FF6D  20                 	db	32
   669  00FF6E  20                 	db	32
   670  00FF6F  20                 	db	32
   671  00FF70  2A                 	db	42
   672  00FF71  3E                 	db	62	;'>'
   673  00FF72  00                 	db	0
   674  00FF73                     STR_18:
   675  00FF73  20                 	db	32
   676  00FF74  20                 	db	32
   677  00FF75  20                 	db	32
   678  00FF76  73                 	db	115	;'s'
   679  00FF77  74                 	db	116	;'t'
   680  00FF78  61                 	db	97	;'a'
   681  00FF79  74                 	db	116	;'t'
   682  00FF7A  73                 	db	115	;'s'
   683  00FF7B  20                 	db	32
   684  00FF7C  3C                 	db	60	;'<'
   685  00FF7D  42                 	db	66	;'B'
   686  00FF7E  20                 	db	32
   687  00FF7F  20                 	db	32
   688  00FF80  20                 	db	32
   689  00FF81  2A                 	db	42
   690  00FF82  3E                 	db	62	;'>'
   691  00FF83  00                 	db	0
   692  00FF84                     STR_22:
   693  00FF84  5B                 	db	91	;'['
   694  00FF85  6E                 	db	110	;'n'
   695  00FF86  6E                 	db	110	;'n'
   696  00FF87  2C                 	db	44
   697  00FF88  6E                 	db	110	;'n'
   698  00FF89  2C                 	db	44
   699  00FF8A  6E                 	db	110	;'n'
   700  00FF8B  2C                 	db	44
   701  00FF8C  6E                 	db	110	;'n'
   702  00FF8D  6E                 	db	110	;'n'
   703  00FF8E  5D                 	db	93	;']'
   704  00FF8F  20                 	db	32
   705  00FF90  20                 	db	32
   706  00FF91  20                 	db	32
   707  00FF92  2A                 	db	42
   708  00FF93  3E                 	db	62	;'>'
   709  00FF94  00                 	db	0
   710  00FF95                     STR_12:
   711  00FF95  20                 	db	32
   712  00FF96  20                 	db	32
   713  00FF97  6D                 	db	109	;'m'
   714  00FF98  6D                 	db	109	;'m'
   715  00FF99  3A                 	db	58	;':'
   716  00FF9A  64                 	db	100	;'d'
   717  00FF9B  64                 	db	100	;'d'
   718  00FF9C  3A                 	db	58	;':'
   719  00FF9D  79                 	db	121	;'y'
   720  00FF9E  79                 	db	121	;'y'
   721  00FF9F  20                 	db	32
   722  00FFA0  20                 	db	32
   723  00FFA1  20                 	db	32
   724  00FFA2  20                 	db	32
   725  00FFA3  41                 	db	65	;'A'
   726  00FFA4  3E                 	db	62	;'>'
   727  00FFA5  00                 	db	0
   728  00FFA6                     STR_6:
   729  00FFA6  72                 	db	114	;'r'
   730  00FFA7  65                 	db	101	;'e'
   731  00FFA8  6C                 	db	108	;'l'
   732  00FFA9  65                 	db	101	;'e'
   733  00FFAA  61                 	db	97	;'a'
   734  00FFAB  73                 	db	115	;'s'
   735  00FFAC  65                 	db	101	;'e'
   736  00FFAD  20                 	db	32
   737  00FFAE  62                 	db	98	;'b'
   738  00FFAF  61                 	db	97	;'a'
   739  00FFB0  74                 	db	116	;'t'
   740  00FFB1  74                 	db	116	;'t'
   741  00FFB2  65                 	db	101	;'e'
   742  00FFB3  72                 	db	114	;'r'
   743  00FFB4  79                 	db	121	;'y'
   744  00FFB5  3F                 	db	63	;'?'
   745  00FFB6  00                 	db	0
   746  00FFB7                     STR_4:
   747  00FFB7  74                 	db	116	;'t'
   748  00FFB8  61                 	db	97	;'a'
   749  00FFB9  72                 	db	114	;'r'
   750  00FFBA  67                 	db	103	;'g'
   751  00FFBB  65                 	db	101	;'e'
   752  00FFBC  74                 	db	116	;'t'
   753  00FFBD  3A                 	db	58	;':'
   754  00FFBE  20                 	db	32
   755  00FFBF  25                 	db	37
   756  00FFC0  64                 	db	100	;'d'
   757  00FFC1  0A                 	db	10
   758  00FFC2  56                 	db	86	;'V'
   759  00FFC3  3A                 	db	58	;':'
   760  00FFC4  20                 	db	32
   761  00FFC5  25                 	db	37
   762  00FFC6  66                 	db	102	;'f'
   763  00FFC7  00                 	db	0
   764  00FFC8                     STR_7:
   765  00FFC8  72                 	db	114	;'r'
   766  00FFC9  65                 	db	101	;'e'
   767  00FFCA  73                 	db	115	;'s'
   768  00FFCB  65                 	db	101	;'e'
   769  00FFCC  74                 	db	116	;'t'
   770  00FFCD  20                 	db	32
   771  00FFCE  74                 	db	116	;'t'
   772  00FFCF  68                 	db	104	;'h'
   773  00FFD0  65                 	db	101	;'e'
   774  00FFD1  20                 	db	32
   775  00FFD2  70                 	db	112	;'p'
   776  00FFD3  61                 	db	97	;'a'
   777  00FFD4  64                 	db	100	;'d'
   778  00FFD5  3F                 	db	63	;'?'
   779  00FFD6  00                 	db	0
   780  00FFD7                     STR_3:
   781  00FFD7  72                 	db	114	;'r'
   782  00FFD8  65                 	db	101	;'e'
   783  00FFD9  61                 	db	97	;'a'
   784  00FFDA  64                 	db	100	;'d'
   785  00FFDB  20                 	db	32
   786  00FFDC  76                 	db	118	;'v'
   787  00FFDD  6F                 	db	111	;'o'
   788  00FFDE  6C                 	db	108	;'l'
   789  00FFDF  74                 	db	116	;'t'
   790  00FFE0  61                 	db	97	;'a'
   791  00FFE1  67                 	db	103	;'g'
   792  00FFE2  65                 	db	101	;'e'
   793  00FFE3  3F                 	db	63	;'?'
   794  00FFE4  00                 	db	0
   795  00FFE5  5B                 	db	91	;'['
   796  00FFE6  25                 	db	37
   797  00FFE7  78                 	db	120	;'x'
   798  00FFE8  20                 	db	32
   799  00FFE9  25                 	db	37
   800  00FFEA  78                 	db	120	;'x'
   801  00FFEB  5D                 	db	93	;']'
   802  00FFEC  0A                 	db	10
   803  00FFED  00                 	db	0
   804  00FFEE  74                 	db	116	;'t'
   805  00FFEF  31                 	db	49	;'1'
   806  00FFF0  3A                 	db	58	;':'
   807  00FFF1  20                 	db	32
   808  00FFF2  25                 	db	37
   809  00FFF3  78                 	db	120	;'x'
   810  00FFF4  20                 	db	32
   811  00FFF5  00                 	db	0
   812  00FFF6                     STR_1:
   813  00FFF6  72                 	db	114	;'r'
   814  00FFF7  75                 	db	117	;'u'
   815  00FFF8  6E                 	db	110	;'n'
   816  00FFF9  6E                 	db	110	;'n'
   817  00FFFA  69                 	db	105	;'i'
   818  00FFFB  6E                 	db	110	;'n'
   819  00FFFC  67                 	db	103	;'g'
   820  00FFFD  00                 	db	0
   821                           
   822                           ; #config settings
   823  00FFFE  00                 	db	0	; dummy byte at the end
   824  0000                     
   825                           	psect	cinit
   826  002504                     __pcinit:
   827                           	opt stack 0
   828  002504                     start_initialization:
   829                           	opt stack 0
   830  002504                     __initialization:
   831                           	opt stack 0
   832                           
   833                           ; Initialize objects allocated to BANK1 (8 bytes)
   834                           ; load TBLPTR registers with __pidataBANK1
   835  002504  0E6C               	movlw	low __pidataBANK1
   836  002506  6EF6               	movwf	tblptrl,c
   837  002508  0E2E               	movlw	high __pidataBANK1
   838  00250A  6EF7               	movwf	tblptrh,c
   839  00250C  0E00               	movlw	low (__pidataBANK1 shr (0+16))
   840  00250E  6EF8               	movwf	tblptru,c
   841  002510  EE01  F04E         	lfsr	0,__pdataBANK1
   842  002514  EE10 F008          	lfsr	1,8
   843  002518                     copy_data0:
   844  002518  0009               	tblrd		*+
   845  00251A  CFF5 FFEE          	movff	tablat,postinc0
   846  00251E  50E5               	movf	postdec1,w,c
   847  002520  50E1               	movf	fsr1l,w,c
   848  002522  E1FA               	bnz	copy_data0
   849                           
   850                           ; Initialize objects allocated to BANK0 (30 bytes)
   851                           ; load TBLPTR registers with __pidataBANK0
   852  002524  0EF4               	movlw	low __pidataBANK0
   853  002526  6EF6               	movwf	tblptrl,c
   854  002528  0E2D               	movlw	high __pidataBANK0
   855  00252A  6EF7               	movwf	tblptrh,c
   856  00252C  0E00               	movlw	low (__pidataBANK0 shr (0+16))
   857  00252E  6EF8               	movwf	tblptru,c
   858  002530  EE00  F0DF         	lfsr	0,__pdataBANK0
   859  002534  EE10 F01E          	lfsr	1,30
   860  002538                     copy_data1:
   861  002538  0009               	tblrd		*+
   862  00253A  CFF5 FFEE          	movff	tablat,postinc0
   863  00253E  50E5               	movf	postdec1,w,c
   864  002540  50E1               	movf	fsr1l,w,c
   865  002542  E1FA               	bnz	copy_data1
   866                           
   867                           ; Initialize objects allocated to COMRAM (18 bytes)
   868                           ; load TBLPTR registers with __pidataCOMRAM
   869  002544  0E3E               	movlw	low __pidataCOMRAM
   870  002546  6EF6               	movwf	tblptrl,c
   871  002548  0E2E               	movlw	high __pidataCOMRAM
   872  00254A  6EF7               	movwf	tblptrh,c
   873  00254C  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   874  00254E  6EF8               	movwf	tblptru,c
   875  002550  EE00  F03B         	lfsr	0,__pdataCOMRAM
   876  002554  EE10 F012          	lfsr	1,18
   877  002558                     copy_data2:
   878  002558  0009               	tblrd		*+
   879  00255A  CFF5 FFEE          	movff	tablat,postinc0
   880  00255E  50E5               	movf	postdec1,w,c
   881  002560  50E1               	movf	fsr1l,w,c
   882  002562  E1FA               	bnz	copy_data2
   883                           
   884                           ; Clear objects allocated to BANK1 (35 bytes)
   885  002564  EE01  F02B         	lfsr	0,__pbssBANK1
   886  002568  0E23               	movlw	35
   887  00256A                     clear_0:
   888  00256A  6AEE               	clrf	postinc0,c
   889  00256C  06E8               	decf	wreg,f,c
   890  00256E  E1FD               	bnz	clear_0
   891                           
   892                           ; Clear objects allocated to BANK0 (2 bytes)
   893  002570  0100               	movlb	0
   894  002572  6BFE               	clrf	(__pbssBANK0+1)& (0+255),b
   895  002574  6BFD               	clrf	__pbssBANK0& (0+255),b
   896                           
   897                           ; Clear objects allocated to COMRAM (15 bytes)
   898  002576  EE00  F04D         	lfsr	0,__pbssCOMRAM
   899  00257A  0E0F               	movlw	15
   900  00257C                     clear_1:
   901  00257C  6AEE               	clrf	postinc0,c
   902  00257E  06E8               	decf	wreg,f,c
   903  002580  E1FD               	bnz	clear_1
   904  002582                     end_of_initialization:
   905                           	opt stack 0
   906  002582                     __end_of__initialization:
   907                           	opt stack 0
   908  002582  905C               	bcf	int$flags,0,c	;clear compiler interrupt flag (level 1)
   909  002584  925C               	bcf	int$flags,1,c	;clear compiler interrupt flag (level 2)
   910  002586  0E00               	movlw	low (__Lmediumconst shr (0+16))
   911  002588  6EF8               	movwf	tblptru,c
   912  00258A  0100               	movlb	0
   913  00258C  EF8C  F00F         	goto	_main	;jump to C main() function
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           postinc0	equ	0xFEE
   919                           wreg	equ	0xFE8
   920                           postdec1	equ	0xFE5
   921                           fsr1l	equ	0xFE1
   922                           
   923                           	psect	bssCOMRAM
   924  00004D                     __pbssCOMRAM:
   925                           	opt stack 0
   926  00004D                     _padPin3:
   927                           	opt stack 0
   928  00004D                     	ds	4
   929  000051                     _V_LIM_AA:
   930                           	opt stack 0
   931  000051                     	ds	3
   932  000054                     _V_LIM_C:
   933                           	opt stack 0
   934  000054                     	ds	3
   935  000057                     _count:
   936                           	opt stack 0
   937  000057                     	ds	2
   938  000059                     _prevTime:
   939                           	opt stack 0
   940  000059                     	ds	2
   941  00005B                     _lastKey:
   942                           	opt stack 0
   943  00005B                     	ds	1
   944                           tblptru	equ	0xFF8
   945                           tblptrh	equ	0xFF7
   946                           tblptrl	equ	0xFF6
   947                           tablat	equ	0xFF5
   948                           postinc0	equ	0xFEE
   949                           wreg	equ	0xFE8
   950                           postdec1	equ	0xFE5
   951                           fsr1l	equ	0xFE1
   952                           
   953                           	psect	dataCOMRAM
   954  00003B                     __pdataCOMRAM:
   955                           	opt stack 0
   956  00003B                     _redirectingServo:
   957                           	opt stack 0
   958  00003B                     	ds	6
   959  000041                     _padPin2:
   960                           	opt stack 0
   961  000041                     	ds	4
   962  000045                     _redirectAngle_9V:
   963                           	opt stack 0
   964  000045                     	ds	2
   965  000047                     _redirectAngle_AA:
   966                           	opt stack 0
   967  000047                     	ds	2
   968  000049                     _redirectAngle_C:
   969                           	opt stack 0
   970  000049                     	ds	2
   971  00004B                     _redirectAngle_OTHER:
   972                           	opt stack 0
   973  00004B                     	ds	2
   974                           tblptru	equ	0xFF8
   975                           tblptrh	equ	0xFF7
   976                           tblptrl	equ	0xFF6
   977                           tablat	equ	0xFF5
   978                           postinc0	equ	0xFEE
   979                           wreg	equ	0xFE8
   980                           postdec1	equ	0xFE5
   981                           fsr1l	equ	0xFE1
   982                           
   983                           	psect	bssBANK0
   984  0000FD                     __pbssBANK0:
   985                           	opt stack 0
   986  0000FD                     _switchFlag:
   987                           	opt stack 0
   988  0000FD                     	ds	2
   989                           tblptru	equ	0xFF8
   990                           tblptrh	equ	0xFF7
   991                           tblptrl	equ	0xFF6
   992                           tablat	equ	0xFF5
   993                           postinc0	equ	0xFEE
   994                           wreg	equ	0xFE8
   995                           postdec1	equ	0xFE5
   996                           fsr1l	equ	0xFE1
   997                           
   998                           	psect	dataBANK0
   999  0000DF                     __pdataBANK0:
  1000                           	opt stack 0
  1001  0000DF                     _conveyorServo:
  1002                           	opt stack 0
  1003  0000DF                     	ds	6
  1004  0000E5                     _padServo:
  1005                           	opt stack 0
  1006  0000E5                     	ds	6
  1007  0000EB                     _AA_float:
  1008                           	opt stack 0
  1009  0000EB                     	ds	4
  1010  0000EF                     _cylinderMotor:
  1011                           	opt stack 0
  1012  0000EF                     	ds	4
  1013  0000F3                     _padPin1:
  1014                           	opt stack 0
  1015  0000F3                     	ds	4
  1016  0000F7                     _padAngle_CLOSE:
  1017                           	opt stack 0
  1018  0000F7                     	ds	2
  1019  0000F9                     _padAngle_NEUTRAL:
  1020                           	opt stack 0
  1021  0000F9                     	ds	2
  1022  0000FB                     _padAngle_OPEN:
  1023                           	opt stack 0
  1024  0000FB                     	ds	2
  1025                           tblptru	equ	0xFF8
  1026                           tblptrh	equ	0xFF7
  1027                           tblptrl	equ	0xFF6
  1028                           tablat	equ	0xFF5
  1029                           postinc0	equ	0xFEE
  1030                           wreg	equ	0xFE8
  1031                           postdec1	equ	0xFE5
  1032                           fsr1l	equ	0xFE1
  1033                           
  1034                           	psect	bssBANK1
  1035  00012B                     __pbssBANK1:
  1036                           	opt stack 0
  1037  00012B                     _pulse:
  1038                           	opt stack 0
  1039  00012B                     	ds	16
  1040  00013B                     _pin:
  1041                           	opt stack 0
  1042  00013B                     	ds	8
  1043  000143                     _port:
  1044                           	opt stack 0
  1045  000143                     	ds	8
  1046  00014B                     _V_LIM_9V:
  1047                           	opt stack 0
  1048  00014B                     	ds	3
  1049                           tblptru	equ	0xFF8
  1050                           tblptrh	equ	0xFF7
  1051                           tblptrl	equ	0xFF6
  1052                           tablat	equ	0xFF5
  1053                           postinc0	equ	0xFEE
  1054                           wreg	equ	0xFE8
  1055                           postdec1	equ	0xFE5
  1056                           fsr1l	equ	0xFE1
  1057                           
  1058                           	psect	dataBANK1
  1059  00014E                     __pdataBANK1:
  1060                           	opt stack 0
  1061  00014E                     sortBattery@F3138:
  1062                           	opt stack 0
  1063  00014E                     	ds	8
  1064                           tblptru	equ	0xFF8
  1065                           tblptrh	equ	0xFF7
  1066                           tblptrl	equ	0xFF6
  1067                           tablat	equ	0xFF5
  1068                           postinc0	equ	0xFEE
  1069                           wreg	equ	0xFE8
  1070                           postdec1	equ	0xFE5
  1071                           fsr1l	equ	0xFE1
  1072                           
  1073                           	psect	cstackBANK1
  1074  000100                     __pcstackBANK1:
  1075                           	opt stack 0
  1076  000100                     ??_setAngle:
  1077  000100                     _printf$1342:
  1078                           	opt stack 0
  1079                           
  1080                           ; 3 bytes @ 0x0
  1081  000100                     	ds	3
  1082  000103                     printf@idx:
  1083                           	opt stack 0
  1084                           
  1085                           ; 1 bytes @ 0x3
  1086  000103                     	ds	1
  1087  000104                     printf@ap:
  1088                           	opt stack 0
  1089                           
  1090                           ; 2 bytes @ 0x4
  1091  000104                     	ds	2
  1092  000106                     initServo@timer:
  1093                           	opt stack 0
  1094  000106                     printf@flag:
  1095                           	opt stack 0
  1096                           
  1097                           ; 2 bytes @ 0x6
  1098  000106                     	ds	2
  1099  000108                     initServo@po:
  1100                           	opt stack 0
  1101  000108                     printf@prec:
  1102                           	opt stack 0
  1103                           
  1104                           ; 2 bytes @ 0x8
  1105  000108                     	ds	2
  1106  00010A                     initServo@pi:
  1107                           	opt stack 0
  1108  00010A                     printf@exp:
  1109                           	opt stack 0
  1110                           
  1111                           ; 2 bytes @ 0xA
  1112  00010A                     	ds	2
  1113  00010C                     initServo@angle:
  1114                           	opt stack 0
  1115  00010C                     printf@tmpval:
  1116                           	opt stack 0
  1117                           
  1118                           ; 4 bytes @ 0xC
  1119  00010C                     	ds	4
  1120  000110                     printf@val:
  1121                           	opt stack 0
  1122                           
  1123                           ; 4 bytes @ 0x10
  1124  000110                     	ds	4
  1125  000114                     printf@fval:
  1126                           	opt stack 0
  1127                           
  1128                           ; 3 bytes @ 0x14
  1129  000114                     	ds	3
  1130  000117                     printf@c:
  1131                           	opt stack 0
  1132                           
  1133                           ; 1 bytes @ 0x17
  1134  000117                     	ds	1
  1135  000118                     sortBattery@dir:
  1136                           	opt stack 0
  1137                           
  1138                           ; 8 bytes @ 0x18
  1139  000118                     	ds	8
  1140  000120                     sortBattery@Vcc:
  1141                           	opt stack 0
  1142                           
  1143                           ; 3 bytes @ 0x20
  1144  000120                     	ds	3
  1145  000123                     sortBattery@resolution:
  1146                           	opt stack 0
  1147                           
  1148                           ; 3 bytes @ 0x23
  1149  000123                     	ds	3
  1150  000126                     sortBattery@V:
  1151                           	opt stack 0
  1152                           
  1153                           ; 3 bytes @ 0x26
  1154  000126                     	ds	3
  1155  000129                     sortBattery@signal:
  1156                           	opt stack 0
  1157                           
  1158                           ; 2 bytes @ 0x29
  1159  000129                     	ds	2
  1160                           tblptru	equ	0xFF8
  1161                           tblptrh	equ	0xFF7
  1162                           tblptrl	equ	0xFF6
  1163                           tablat	equ	0xFF5
  1164                           postinc0	equ	0xFEE
  1165                           wreg	equ	0xFE8
  1166                           postdec1	equ	0xFE5
  1167                           fsr1l	equ	0xFE1
  1168                           
  1169                           	psect	cstackBANK0
  1170  000080                     __pcstackBANK0:
  1171                           	opt stack 0
  1172  000080                     ?___ftdiv:
  1173                           	opt stack 0
  1174  000080                     ___ftdiv@f1:
  1175                           	opt stack 0
  1176                           
  1177                           ; 3 bytes @ 0x0
  1178  000080                     	ds	3
  1179  000083                     ___ftdiv@f2:
  1180                           	opt stack 0
  1181                           
  1182                           ; 3 bytes @ 0x3
  1183  000083                     	ds	3
  1184  000086                     ___ftdiv@cntr:
  1185                           	opt stack 0
  1186                           
  1187                           ; 1 bytes @ 0x6
  1188  000086                     	ds	1
  1189  000087                     ___ftdiv@f3:
  1190                           	opt stack 0
  1191                           
  1192                           ; 3 bytes @ 0x7
  1193  000087                     	ds	3
  1194  00008A                     ___ftdiv@exp:
  1195                           	opt stack 0
  1196                           
  1197                           ; 1 bytes @ 0xA
  1198  00008A                     	ds	1
  1199  00008B                     ___ftdiv@sign:
  1200                           	opt stack 0
  1201                           
  1202                           ; 1 bytes @ 0xB
  1203  00008B                     	ds	1
  1204  00008C                     ?___ftmul:
  1205                           	opt stack 0
  1206  00008C                     ___ftmul@f1:
  1207                           	opt stack 0
  1208                           
  1209                           ; 3 bytes @ 0xC
  1210  00008C                     	ds	3
  1211  00008F                     ___ftmul@f2:
  1212                           	opt stack 0
  1213                           
  1214                           ; 3 bytes @ 0xF
  1215  00008F                     	ds	3
  1216  000092                     ??___ftmul:
  1217                           
  1218                           ; 1 bytes @ 0x12
  1219  000092                     	ds	3
  1220  000095                     ___ftmul@exp:
  1221                           	opt stack 0
  1222                           
  1223                           ; 1 bytes @ 0x15
  1224  000095                     	ds	1
  1225  000096                     ___ftmul@f3_as_product:
  1226                           	opt stack 0
  1227                           
  1228                           ; 3 bytes @ 0x16
  1229  000096                     	ds	3
  1230  000099                     ___ftmul@cntr:
  1231                           	opt stack 0
  1232                           
  1233                           ; 1 bytes @ 0x19
  1234  000099                     	ds	1
  1235  00009A                     ___ftmul@sign:
  1236                           	opt stack 0
  1237                           
  1238                           ; 1 bytes @ 0x1A
  1239  00009A                     	ds	1
  1240  00009B                     ?_fround:
  1241                           	opt stack 0
  1242  00009B                     ?_scale:
  1243                           	opt stack 0
  1244                           
  1245                           ; 3 bytes @ 0x1B
  1246  00009B                     	ds	3
  1247  00009E                     _fround$1340:
  1248                           	opt stack 0
  1249  00009E                     _scale$1341:
  1250                           	opt stack 0
  1251                           
  1252                           ; 3 bytes @ 0x1E
  1253  00009E                     	ds	3
  1254  0000A1                     scale@scl:
  1255                           	opt stack 0
  1256  0000A1                     _fround$1339:
  1257                           	opt stack 0
  1258                           
  1259                           ; 3 bytes @ 0x21
  1260  0000A1                     	ds	3
  1261  0000A4                     fround@prec:
  1262                           	opt stack 0
  1263                           
  1264                           ; 1 bytes @ 0x24
  1265  0000A4                     	ds	1
  1266  0000A5                     ?___ftadd:
  1267                           	opt stack 0
  1268  0000A5                     ___ftadd@f1:
  1269                           	opt stack 0
  1270                           
  1271                           ; 3 bytes @ 0x25
  1272  0000A5                     	ds	3
  1273  0000A8                     ___ftadd@f2:
  1274                           	opt stack 0
  1275                           
  1276                           ; 3 bytes @ 0x28
  1277  0000A8                     	ds	3
  1278  0000AB                     ??___ftadd:
  1279                           
  1280                           ; 1 bytes @ 0x2B
  1281  0000AB                     	ds	3
  1282  0000AE                     ___ftadd@sign:
  1283                           	opt stack 0
  1284                           
  1285                           ; 1 bytes @ 0x2E
  1286  0000AE                     	ds	1
  1287  0000AF                     ___ftadd@exp2:
  1288                           	opt stack 0
  1289                           
  1290                           ; 1 bytes @ 0x2F
  1291  0000AF                     	ds	1
  1292  0000B0                     ___ftadd@exp1:
  1293                           	opt stack 0
  1294                           
  1295                           ; 1 bytes @ 0x30
  1296  0000B0                     	ds	1
  1297  0000B1                     ?___ftsub:
  1298                           	opt stack 0
  1299  0000B1                     ?___fttol:
  1300                           	opt stack 0
  1301  0000B1                     ___ftsub@f1:
  1302                           	opt stack 0
  1303  0000B1                     ___fttol@f1:
  1304                           	opt stack 0
  1305                           
  1306                           ; 3 bytes @ 0x31
  1307  0000B1                     	ds	3
  1308  0000B4                     ___ftsub@f2:
  1309                           	opt stack 0
  1310                           
  1311                           ; 3 bytes @ 0x34
  1312  0000B4                     	ds	1
  1313  0000B5                     ??___fttol:
  1314                           
  1315                           ; 1 bytes @ 0x35
  1316  0000B5                     	ds	5
  1317  0000BA                     ___fttol@sign1:
  1318                           	opt stack 0
  1319                           
  1320                           ; 1 bytes @ 0x3A
  1321  0000BA                     	ds	1
  1322  0000BB                     ___fttol@lval:
  1323                           	opt stack 0
  1324                           
  1325                           ; 4 bytes @ 0x3B
  1326  0000BB                     	ds	4
  1327  0000BF                     ___fttol@exp1:
  1328                           	opt stack 0
  1329                           
  1330                           ; 1 bytes @ 0x3F
  1331  0000BF                     	ds	1
  1332  0000C0                     ?_printf:
  1333                           	opt stack 0
  1334  0000C0                     ?_angleToPulse:
  1335                           	opt stack 0
  1336  0000C0                     angleToPulse@angle:
  1337                           	opt stack 0
  1338  0000C0                     printf@f:
  1339                           	opt stack 0
  1340                           
  1341                           ; 2 bytes @ 0x40
  1342  0000C0                     	ds	4
  1343  0000C4                     ??_angleToPulse:
  1344                           
  1345                           ; 1 bytes @ 0x44
  1346  0000C4                     	ds	3
  1347  0000C7                     ??_printf:
  1348                           
  1349                           ; 1 bytes @ 0x47
  1350  0000C7                     	ds	1
  1351  0000C8                     angleToPulse@offset:
  1352                           	opt stack 0
  1353                           
  1354                           ; 4 bytes @ 0x48
  1355  0000C8                     	ds	4
  1356  0000CC                     angleToPulse@a180:
  1357                           	opt stack 0
  1358                           
  1359                           ; 4 bytes @ 0x4C
  1360  0000CC                     	ds	1
  1361  0000CD                     showInterface@key:
  1362                           	opt stack 0
  1363  0000CD                     pause@message:
  1364                           	opt stack 0
  1365                           
  1366                           ; 2 bytes @ 0x4D
  1367  0000CD                     	ds	3
  1368  0000D0                     _angleToPulse$1338:
  1369                           	opt stack 0
  1370                           
  1371                           ; 3 bytes @ 0x50
  1372  0000D0                     	ds	3
  1373  0000D3                     angleToPulse@a000:
  1374                           	opt stack 0
  1375                           
  1376                           ; 4 bytes @ 0x53
  1377  0000D3                     	ds	4
  1378  0000D7                     setAngle@timer:
  1379                           	opt stack 0
  1380                           
  1381                           ; 2 bytes @ 0x57
  1382  0000D7                     	ds	2
  1383  0000D9                     setAngle@angle:
  1384                           	opt stack 0
  1385                           
  1386                           ; 2 bytes @ 0x59
  1387  0000D9                     	ds	2
  1388  0000DB                     ??_sortBattery:
  1389                           
  1390                           ; 1 bytes @ 0x5B
  1391  0000DB                     	ds	4
  1392                           tblptru	equ	0xFF8
  1393                           tblptrh	equ	0xFF7
  1394                           tblptrl	equ	0xFF6
  1395                           tablat	equ	0xFF5
  1396                           postinc0	equ	0xFEE
  1397                           wreg	equ	0xFE8
  1398                           postdec1	equ	0xFE5
  1399                           fsr1l	equ	0xFE1
  1400                           
  1401                           	psect	cstackCOMRAM
  1402  000001                     __pcstackCOMRAM:
  1403                           	opt stack 0
  1404  000001                     ?i2_digitalRead:
  1405                           	opt stack 0
  1406  000001                     keyPressedInterruptService@key:
  1407                           	opt stack 0
  1408  000001                     i2digitalRead@port:
  1409                           	opt stack 0
  1410  000001                     i2digitalWrite@port:
  1411                           	opt stack 0
  1412  000001                     i2startTimer@timer:
  1413                           	opt stack 0
  1414                           
  1415                           ; 2 bytes @ 0x0
  1416  000001                     	ds	2
  1417  000003                     i2digitalRead@pin:
  1418                           	opt stack 0
  1419  000003                     i2digitalWrite@pin:
  1420                           	opt stack 0
  1421  000003                     i2startTimer@val:
  1422                           	opt stack 0
  1423                           
  1424                           ; 4 bytes @ 0x2
  1425  000003                     	ds	2
  1426  000005                     ??i2_digitalRead:
  1427  000005                     i2digitalWrite@val:
  1428                           	opt stack 0
  1429                           
  1430                           ; 2 bytes @ 0x4
  1431  000005                     	ds	2
  1432  000007                     ??i2_digitalWrite:
  1433  000007                     ??i2_startTimer:
  1434                           
  1435                           ; 1 bytes @ 0x6
  1436  000007                     	ds	3
  1437  00000A                     ??_servoInterruptService:
  1438                           
  1439                           ; 1 bytes @ 0x9
  1440  00000A                     	ds	2
  1441  00000C                     servoInterruptService@flags:
  1442                           	opt stack 0
  1443                           
  1444                           ; 8 bytes @ 0xB
  1445  00000C                     	ds	8
  1446  000014                     servoInterruptService@i:
  1447                           	opt stack 0
  1448                           
  1449                           ; 2 bytes @ 0x13
  1450  000014                     	ds	2
  1451  000016                     ??_service:
  1452                           
  1453                           ; 1 bytes @ 0x15
  1454  000016                     	ds	14
  1455  000024                     ??_I2C_Master_Wait:
  1456  000024                     ?_digitalRead:
  1457                           	opt stack 0
  1458  000024                     ?___awmod:
  1459                           	opt stack 0
  1460  000024                     ?___ftpack:
  1461                           	opt stack 0
  1462  000024                     ?___ftneg:
  1463                           	opt stack 0
  1464  000024                     ?_analogRead:
  1465                           	opt stack 0
  1466  000024                     ?__tdiv_to_l_:
  1467                           	opt stack 0
  1468  000024                     ?__div_to_l_:
  1469                           	opt stack 0
  1470  000024                     ?___lldiv:
  1471                           	opt stack 0
  1472  000024                     lcdNibble@temp:
  1473                           	opt stack 0
  1474  000024                     readKeypad@key:
  1475                           	opt stack 0
  1476  000024                     digitalRead@port:
  1477                           	opt stack 0
  1478  000024                     digitalWrite@port:
  1479                           	opt stack 0
  1480  000024                     analogRead@channel:
  1481                           	opt stack 0
  1482  000024                     initTimer@timer:
  1483                           	opt stack 0
  1484  000024                     startTimer@timer:
  1485                           	opt stack 0
  1486  000024                     stopServo@timer:
  1487                           	opt stack 0
  1488  000024                     ___awmod@dividend:
  1489                           	opt stack 0
  1490  000024                     __div_to_l_@f1:
  1491                           	opt stack 0
  1492  000024                     ___ftpack@arg:
  1493                           	opt stack 0
  1494  000024                     __tdiv_to_l_@f1:
  1495                           	opt stack 0
  1496  000024                     ___ftge@ff1:
  1497                           	opt stack 0
  1498  000024                     ___ftneg@f1:
  1499                           	opt stack 0
  1500  000024                     ___lldiv@dividend:
  1501                           	opt stack 0
  1502                           
  1503                           ; 4 bytes @ 0x23
  1504  000024                     	ds	1
  1505  000025                     lcdNibble@data:
  1506                           	opt stack 0
  1507  000025                     I2C_Master_Write@d:
  1508                           	opt stack 0
  1509                           
  1510                           ; 2 bytes @ 0x24
  1511  000025                     	ds	1
  1512  000026                     ??_stopServo:
  1513  000026                     ??_lcdInst:
  1514  000026                     ??_initTimer:
  1515  000026                     digitalRead@pin:
  1516                           	opt stack 0
  1517  000026                     digitalWrite@pin:
  1518                           	opt stack 0
  1519  000026                     ___awmod@divisor:
  1520                           	opt stack 0
  1521  000026                     startTimer@val:
  1522                           	opt stack 0
  1523                           
  1524                           ; 4 bytes @ 0x25
  1525  000026                     	ds	1
  1526  000027                     lcdInst@data:
  1527                           	opt stack 0
  1528  000027                     setTime@i:
  1529                           	opt stack 0
  1530  000027                     ___ftpack@exp:
  1531                           	opt stack 0
  1532  000027                     __div_to_l_@f2:
  1533                           	opt stack 0
  1534  000027                     __tdiv_to_l_@f2:
  1535                           	opt stack 0
  1536  000027                     ___ftge@ff2:
  1537                           	opt stack 0
  1538                           
  1539                           ; 3 bytes @ 0x26
  1540  000027                     	ds	1
  1541  000028                     ??_initLCD:
  1542  000028                     ??_digitalRead:
  1543  000028                     ??_analogRead:
  1544  000028                     putch@data:
  1545                           	opt stack 0
  1546  000028                     ___awmod@counter:
  1547                           	opt stack 0
  1548  000028                     ___ftpack@sign:
  1549                           	opt stack 0
  1550  000028                     digitalWrite@val:
  1551                           	opt stack 0
  1552  000028                     ___lldiv@divisor:
  1553                           	opt stack 0
  1554                           
  1555                           ; 4 bytes @ 0x27
  1556  000028                     	ds	1
  1557  000029                     ??___ftpack:
  1558  000029                     ___awmod@sign:
  1559                           	opt stack 0
  1560                           
  1561                           ; 1 bytes @ 0x28
  1562  000029                     	ds	1
  1563  00002A                     ??_digitalWrite:
  1564  00002A                     ??__tdiv_to_l_:
  1565  00002A                     ??_startTimer:
  1566  00002A                     ??___ftge:
  1567  00002A                     ?___awdiv:
  1568                           	opt stack 0
  1569  00002A                     ___awdiv@dividend:
  1570                           	opt stack 0
  1571  00002A                     __div_to_l_@quot:
  1572                           	opt stack 0
  1573                           
  1574                           ; 4 bytes @ 0x29
  1575  00002A                     	ds	2
  1576  00002C                     ?___altoft:
  1577                           	opt stack 0
  1578  00002C                     ?___awtoft:
  1579                           	opt stack 0
  1580  00002C                     ?___lltoft:
  1581                           	opt stack 0
  1582  00002C                     ___awdiv@divisor:
  1583                           	opt stack 0
  1584  00002C                     ___awtoft@c:
  1585                           	opt stack 0
  1586  00002C                     ___altoft@c:
  1587                           	opt stack 0
  1588  00002C                     ___lldiv@quotient:
  1589                           	opt stack 0
  1590  00002C                     ___lltoft@c:
  1591                           	opt stack 0
  1592                           
  1593                           ; 4 bytes @ 0x2B
  1594  00002C                     	ds	1
  1595  00002D                     __tdiv_to_l_@quot:
  1596                           	opt stack 0
  1597                           
  1598                           ; 4 bytes @ 0x2C
  1599  00002D                     	ds	1
  1600  00002E                     ___awdiv@counter:
  1601                           	opt stack 0
  1602  00002E                     __div_to_l_@cntr:
  1603                           	opt stack 0
  1604                           
  1605                           ; 1 bytes @ 0x2D
  1606  00002E                     	ds	1
  1607  00002F                     ___awdiv@sign:
  1608                           	opt stack 0
  1609  00002F                     ___awtoft@sign:
  1610                           	opt stack 0
  1611  00002F                     __div_to_l_@exp1:
  1612                           	opt stack 0
  1613                           
  1614                           ; 1 bytes @ 0x2E
  1615  00002F                     	ds	1
  1616  000030                     ??___altoft:
  1617  000030                     ??___lltoft:
  1618  000030                     ___lldiv@counter:
  1619                           	opt stack 0
  1620  000030                     ___awdiv@quotient:
  1621                           	opt stack 0
  1622                           
  1623                           ; 2 bytes @ 0x2F
  1624  000030                     	ds	1
  1625  000031                     ?___llmod:
  1626                           	opt stack 0
  1627  000031                     __tdiv_to_l_@cntr:
  1628                           	opt stack 0
  1629  000031                     I2C_Master_Init@c:
  1630                           	opt stack 0
  1631  000031                     ___llmod@dividend:
  1632                           	opt stack 0
  1633                           
  1634                           ; 4 bytes @ 0x30
  1635  000031                     	ds	1
  1636  000032                     ?___wmul:
  1637                           	opt stack 0
  1638  000032                     __tdiv_to_l_@exp1:
  1639                           	opt stack 0
  1640  000032                     ___wmul@multiplier:
  1641                           	opt stack 0
  1642                           
  1643                           ; 2 bytes @ 0x31
  1644  000032                     	ds	2
  1645  000034                     ___altoft@exp:
  1646                           	opt stack 0
  1647  000034                     ___lltoft@exp:
  1648                           	opt stack 0
  1649  000034                     ___wmul@multiplicand:
  1650                           	opt stack 0
  1651                           
  1652                           ; 2 bytes @ 0x33
  1653  000034                     	ds	1
  1654  000035                     ??_I2C_Master_Init:
  1655  000035                     ___altoft@sign:
  1656                           	opt stack 0
  1657  000035                     ___llmod@divisor:
  1658                           	opt stack 0
  1659                           
  1660                           ; 4 bytes @ 0x34
  1661  000035                     	ds	1
  1662  000036                     ??___ftdiv:
  1663  000036                     ___wmul@product:
  1664                           	opt stack 0
  1665                           
  1666                           ; 2 bytes @ 0x35
  1667  000036                     	ds	3
  1668  000039                     ___llmod@counter:
  1669                           	opt stack 0
  1670                           
  1671                           ; 1 bytes @ 0x38
  1672  000039                     	ds	1
  1673  00003A                     runMenu@key:
  1674                           	opt stack 0
  1675                           
  1676                           ; 1 bytes @ 0x39
  1677  00003A                     	ds	1
  1678  00003B                     tblptru	equ	0xFF8
  1679                           tblptrh	equ	0xFF7
  1680                           tblptrl	equ	0xFF6
  1681                           tablat	equ	0xFF5
  1682                           postinc0	equ	0xFEE
  1683                           wreg	equ	0xFE8
  1684                           postdec1	equ	0xFE5
  1685                           fsr1l	equ	0xFE1
  1686                           
  1687                           ; 1 bytes @ 0x3A
  1688 ;;
  1689 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
  1690 ;;
  1691 ;; *************** function _main *****************
  1692 ;; Defined at:
  1693 ;;		line 57 in file "main.c"
  1694 ;; Parameters:    Size  Location     Type
  1695 ;;		None
  1696 ;; Auto vars:     Size  Location     Type
  1697 ;;		None
  1698 ;; Return value:  Size  Location     Type
  1699 ;;                  1    wreg      void 
  1700 ;; Registers used:
  1701 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1702 ;; Tracked objects:
  1703 ;;		On entry : 0/0
  1704 ;;		On exit  : 0/0
  1705 ;;		Unchanged: 0/0
  1706 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1707 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1708 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1709 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1710 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1711 ;;Total ram usage:        0 bytes
  1712 ;; Hardware stack levels required when called:   10
  1713 ;; This function calls:
  1714 ;;		_digitalWrite
  1715 ;;		_initLCD
  1716 ;;		_initServo
  1717 ;;		_lcdClear
  1718 ;;		_pinSetup
  1719 ;;		_printf
  1720 ;;		_showInterface
  1721 ;;		_sortBattery
  1722 ;; This function is called by:
  1723 ;;		Startup code after reset
  1724 ;; This function uses a non-reentrant model
  1725 ;;
  1726                           
  1727                           	psect	text0
  1728  001F18                     __ptext0:
  1729                           	opt stack 0
  1730  001F18                     _main:
  1731                           	opt stack 21
  1732                           
  1733                           ;main.c: 58: pinSetup();
  1734                           
  1735                           ;incstack = 0
  1736  001F18  ECC1  F015         	call	_pinSetup	;wreg free
  1737                           
  1738                           ;main.c: 59: initLCD();
  1739  001F1C  EC9E  F015         	call	_initLCD	;wreg free
  1740                           
  1741                           ;main.c: 62: showInterface();
  1742                           
  1743                           ;main.c: 61: while(1){
  1744  001F20  EC06  F00F         	call	_showInterface	;wreg free
  1745                           
  1746                           ;main.c: 65: digitalWrite(cylinderMotor[0], cylinderMotor[1], 1);
  1747  001F24  C0EF  F024         	movff	_cylinderMotor,digitalWrite@port
  1748  001F28  C0F0  F025         	movff	_cylinderMotor+1,digitalWrite@port+1
  1749  001F2C  C0F1  F026         	movff	_cylinderMotor+2,digitalWrite@pin
  1750  001F30  C0F2  F027         	movff	_cylinderMotor+3,digitalWrite@pin+1
  1751  001F34  0E00               	movlw	0
  1752  001F36  6E29               	movwf	digitalWrite@val+1,c
  1753  001F38  0E01               	movlw	1
  1754  001F3A  6E28               	movwf	digitalWrite@val,c
  1755  001F3C  ECFA  F010         	call	_digitalWrite	;wreg free
  1756                           
  1757                           ;main.c: 66: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  1758  001F40  C0DF  F106         	movff	_conveyorServo,initServo@timer
  1759  001F44  C0E0  F107         	movff	_conveyorServo+1,initServo@timer+1
  1760  001F48  C0E1  F108         	movff	_conveyorServo+2,initServo@po
  1761  001F4C  C0E2  F109         	movff	_conveyorServo+3,initServo@po+1
  1762  001F50  C0E3  F10A         	movff	_conveyorServo+4,initServo@pi
  1763  001F54  C0E4  F10B         	movff	_conveyorServo+5,initServo@pi+1
  1764  001F58  0E00               	movlw	0
  1765  001F5A  0101               	movlb	1	; () banked
  1766  001F5C  6F0D               	movwf	(initServo@angle+1)& (0+255),b
  1767  001F5E  0E5A               	movlw	90
  1768  001F60  6F0C               	movwf	initServo@angle& (0+255),b
  1769  001F62  EC4B  F013         	call	_initServo	;wreg free
  1770                           
  1771                           ;main.c: 67: initServo(padServo[0], padServo[1], padServo[2], padAngle_NEUTRAL);
  1772  001F66  C0E5  F106         	movff	_padServo,initServo@timer
  1773  001F6A  C0E6  F107         	movff	_padServo+1,initServo@timer+1
  1774  001F6E  C0E7  F108         	movff	_padServo+2,initServo@po
  1775  001F72  C0E8  F109         	movff	_padServo+3,initServo@po+1
  1776  001F76  C0E9  F10A         	movff	_padServo+4,initServo@pi
  1777  001F7A  C0EA  F10B         	movff	_padServo+5,initServo@pi+1
  1778  001F7E  C0F9  F10C         	movff	_padAngle_NEUTRAL,initServo@angle
  1779  001F82  C0FA  F10D         	movff	_padAngle_NEUTRAL+1,initServo@angle+1
  1780  001F86  EC4B  F013         	call	_initServo	;wreg free
  1781                           
  1782                           ;main.c: 68: initServo(redirectingServo[0], redirectingServo[1],redirectingServo[2], 90)
      +                          ;
  1783  001F8A  C03B  F106         	movff	_redirectingServo,initServo@timer
  1784  001F8E  C03C  F107         	movff	_redirectingServo+1,initServo@timer+1
  1785  001F92  C03D  F108         	movff	_redirectingServo+2,initServo@po
  1786  001F96  C03E  F109         	movff	_redirectingServo+3,initServo@po+1
  1787  001F9A  C03F  F10A         	movff	_redirectingServo+4,initServo@pi
  1788  001F9E  C040  F10B         	movff	_redirectingServo+5,initServo@pi+1
  1789  001FA2  0E00               	movlw	0
  1790  001FA4  0101               	movlb	1	; () banked
  1791  001FA6  6F0D               	movwf	(initServo@angle+1)& (0+255),b
  1792  001FA8  0E5A               	movlw	90
  1793  001FAA  6F0C               	movwf	initServo@angle& (0+255),b
  1794  001FAC  EC4B  F013         	call	_initServo	;wreg free
  1795                           
  1796                           ;main.c: 70: lcdClear();
  1797  001FB0  EC46  F017         	call	_lcdClear	;wreg free
  1798                           
  1799                           ;main.c: 71: printf("running");
  1800  001FB4  0EF6               	movlw	low STR_1
  1801  001FB6  0100               	movlb	0	; () banked
  1802  001FB8  6FC0               	movwf	printf@f& (0+255),b
  1803  001FBA  0EFF               	movlw	high STR_1
  1804  001FBC  0100               	movlb	0	; () banked
  1805  001FBE  6FC1               	movwf	(printf@f+1)& (0+255),b
  1806  001FC0  EC09  F000         	call	_printf	;wreg free
  1807  001FC4                     l6109:
  1808  001FC4  0100               	movlb	0	; () banked
  1809  001FC6  51FD               	movf	_switchFlag& (0+255),w,b
  1810  001FC8  0100               	movlb	0	; () banked
  1811  001FCA  11FE               	iorwf	(_switchFlag+1)& (0+255),w,b
  1812  001FCC  B4D8               	btfsc	status,2,c
  1813  001FCE  D7FA               	goto	l6109
  1814                           
  1815                           ; BSR set to: 0
  1816                           ;main.c: 77: }
  1817                           ;main.c: 79: sortBattery();
  1818                           
  1819                           ; BSR set to: 0
  1820  001FD0  ECAA  F006         	call	_sortBattery	;wreg free
  1821                           
  1822                           ;main.c: 82: switchFlag = 0;
  1823  001FD4  0E00               	movlw	0
  1824  001FD6  0100               	movlb	0	; () banked
  1825  001FD8  6FFE               	movwf	(_switchFlag+1)& (0+255),b
  1826  001FDA  0E00               	movlw	0
  1827  001FDC  6FFD               	movwf	_switchFlag& (0+255),b
  1828                           
  1829                           ; BSR set to: 0
  1830  001FDE  D7F2               	goto	l6109
  1831  001FE0                     l116:
  1832  001FE0  D7FF               	goto	l116
  1833  001FE2                     __end_of_main:
  1834                           	opt stack 0
  1835                           tblptru	equ	0xFF8
  1836                           tblptrh	equ	0xFF7
  1837                           tblptrl	equ	0xFF6
  1838                           tablat	equ	0xFF5
  1839                           postinc0	equ	0xFEE
  1840                           wreg	equ	0xFE8
  1841                           postdec1	equ	0xFE5
  1842                           fsr1l	equ	0xFE1
  1843                           status	equ	0xFD8
  1844                           
  1845 ;; *************** function _sortBattery *****************
  1846 ;; Defined at:
  1847 ;;		line 92 in file "main.c"
  1848 ;; Parameters:    Size  Location     Type
  1849 ;;		None
  1850 ;; Auto vars:     Size  Location     Type
  1851 ;;  dir             8   24[BANK1 ] int [4]
  1852 ;;  V               3   38[BANK1 ] float 
  1853 ;;  resolution      3   35[BANK1 ] float 
  1854 ;;  Vcc             3   32[BANK1 ] float 
  1855 ;;  signal          2   41[BANK1 ] int 
  1856 ;;  targetAngle     2    0        int 
  1857 ;; Return value:  Size  Location     Type
  1858 ;;                  1    wreg      void 
  1859 ;; Registers used:
  1860 ;;		wreg, fsr1l, fsr1h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1861 ;; Tracked objects:
  1862 ;;		On entry : 0/0
  1863 ;;		On exit  : 0/0
  1864 ;;		Unchanged: 0/0
  1865 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  1866 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1867 ;;      Locals:         0       0      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1868 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1869 ;;      Totals:         0       4      19       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  1870 ;;Total ram usage:       23 bytes
  1871 ;; Hardware stack levels used:    1
  1872 ;; Hardware stack levels required when called:    9
  1873 ;; This function calls:
  1874 ;;		___altoft
  1875 ;;		___ftdiv
  1876 ;;		___ftmul
  1877 ;;		_analogRead
  1878 ;;		_digitalRead
  1879 ;;		_digitalWrite
  1880 ;;		_initServo
  1881 ;;		_lcdClear
  1882 ;;		_pause
  1883 ;;		_printf
  1884 ;;		_readKeypad
  1885 ;;		_setAngle
  1886 ;;		_stopServo
  1887 ;; This function is called by:
  1888 ;;		_main
  1889 ;; This function uses a non-reentrant model
  1890 ;;
  1891                           
  1892                           	psect	text1
  1893  000D54                     __ptext1:
  1894                           	opt stack 0
  1895  000D54                     _sortBattery:
  1896                           	opt stack 21
  1897                           
  1898                           ;main.c: 95: stopServo(conveyorServo[0]);
  1899                           
  1900                           ;incstack = 0
  1901  000D54  C0DF  F024         	movff	_conveyorServo,stopServo@timer
  1902  000D58  C0E0  F025         	movff	_conveyorServo+1,stopServo@timer+1
  1903  000D5C  EC58  F015         	call	_stopServo	;wreg free
  1904                           
  1905                           ;main.c: 96: digitalWrite(cylinderMotor[0], cylinderMotor[1], 0);
  1906  000D60  C0EF  F024         	movff	_cylinderMotor,digitalWrite@port
  1907  000D64  C0F0  F025         	movff	_cylinderMotor+1,digitalWrite@port+1
  1908  000D68  C0F1  F026         	movff	_cylinderMotor+2,digitalWrite@pin
  1909  000D6C  C0F2  F027         	movff	_cylinderMotor+3,digitalWrite@pin+1
  1910  000D70  0E00               	movlw	0
  1911  000D72  6E29               	movwf	digitalWrite@val+1,c
  1912  000D74  0E00               	movlw	0
  1913  000D76  6E28               	movwf	digitalWrite@val,c
  1914  000D78  ECFA  F010         	call	_digitalWrite	;wreg free
  1915                           
  1916                           ;main.c: 102: pause("interrupt!!!\nclose?");
  1917  000D7C  0EAE               	movlw	low STR_2
  1918  000D7E  0100               	movlb	0	; () banked
  1919  000D80  6FCD               	movwf	pause@message& (0+255),b
  1920  000D82  0EFE               	movlw	high STR_2
  1921  000D84  0100               	movlb	0	; () banked
  1922  000D86  6FCE               	movwf	(pause@message+1)& (0+255),b
  1923  000D88  EC09  F017         	call	_pause	;wreg free
  1924                           
  1925                           ;main.c: 103: setAngle(padServo[0], padAngle_CLOSE);
  1926  000D8C  C0E5  F0D7         	movff	_padServo,setAngle@timer
  1927  000D90  C0E6  F0D8         	movff	_padServo+1,setAngle@timer+1
  1928  000D94  C0F7  F0D9         	movff	_padAngle_CLOSE,setAngle@angle
  1929  000D98  C0F8  F0DA         	movff	_padAngle_CLOSE+1,setAngle@angle+1
  1930  000D9C  ECA6  F011         	call	_setAngle	;wreg free
  1931                           
  1932                           ;main.c: 106: pause("read voltage?");
  1933  000DA0  0ED7               	movlw	low STR_3
  1934  000DA2  0100               	movlb	0	; () banked
  1935  000DA4  6FCD               	movwf	pause@message& (0+255),b
  1936  000DA6  0EFF               	movlw	high STR_3
  1937  000DA8  0100               	movlb	0	; () banked
  1938  000DAA  6FCE               	movwf	(pause@message+1)& (0+255),b
  1939  000DAC  EC09  F017         	call	_pause	;wreg free
  1940                           
  1941                           ;main.c: 107: float Vcc = 4.8;
  1942  000DB0  0E9A               	movlw	154
  1943  000DB2  0101               	movlb	1	; () banked
  1944  000DB4  6F20               	movwf	sortBattery@Vcc& (0+255),b
  1945  000DB6  0E99               	movlw	153
  1946  000DB8  0101               	movlb	1	; () banked
  1947  000DBA  6F21               	movwf	(sortBattery@Vcc+1)& (0+255),b
  1948  000DBC  0E40               	movlw	64
  1949  000DBE  0101               	movlb	1	; () banked
  1950  000DC0  6F22               	movwf	(sortBattery@Vcc+2)& (0+255),b
  1951                           
  1952                           ; BSR set to: 1
  1953                           ;main.c: 108: float resolution = (1<<10) - 1;
  1954  000DC2  0EC0               	movlw	192
  1955  000DC4  0101               	movlb	1	; () banked
  1956  000DC6  6F23               	movwf	sortBattery@resolution& (0+255),b
  1957  000DC8  0E7F               	movlw	127
  1958  000DCA  0101               	movlb	1	; () banked
  1959  000DCC  6F24               	movwf	(sortBattery@resolution+1)& (0+255),b
  1960  000DCE  0E44               	movlw	68
  1961  000DD0  0101               	movlb	1	; () banked
  1962  000DD2  6F25               	movwf	(sortBattery@resolution+2)& (0+255),b
  1963                           
  1964                           ; BSR set to: 1
  1965                           ;main.c: 110: int targetAngle;
  1966                           ;main.c: 111: int signal = digitalRead(padPin1[0],padPin1[1])<<1;
  1967  000DD4  C0F3  F024         	movff	_padPin1,digitalRead@port
  1968  000DD8  C0F4  F025         	movff	_padPin1+1,digitalRead@port+1
  1969  000DDC  C0F5  F026         	movff	_padPin1+2,digitalRead@pin
  1970  000DE0  C0F6  F027         	movff	_padPin1+3,digitalRead@pin+1
  1971  000DE4  ECF1  F00F         	call	_digitalRead	;wreg free
  1972  000DE8  90D8               	bcf	status,0,c
  1973  000DEA  3424               	rlcf	?_digitalRead,w,c
  1974  000DEC  0101               	movlb	1	; () banked
  1975  000DEE  6F29               	movwf	sortBattery@signal& (0+255),b
  1976  000DF0  3425               	rlcf	?_digitalRead+1,w,c
  1977  000DF2  0101               	movlb	1	; () banked
  1978  000DF4  6F2A               	movwf	(sortBattery@signal+1)& (0+255),b
  1979                           
  1980                           ; BSR set to: 1
  1981                           ;main.c: 112: signal |= digitalRead(padPin2[0],padPin2[1]);
  1982  000DF6  C041  F024         	movff	_padPin2,digitalRead@port
  1983  000DFA  C042  F025         	movff	_padPin2+1,digitalRead@port+1
  1984  000DFE  C043  F026         	movff	_padPin2+2,digitalRead@pin
  1985  000E02  C044  F027         	movff	_padPin2+3,digitalRead@pin+1
  1986  000E06  ECF1  F00F         	call	_digitalRead	;wreg free
  1987  000E0A  5024               	movf	?_digitalRead,w,c
  1988  000E0C  0101               	movlb	1	; () banked
  1989  000E0E  1329               	iorwf	sortBattery@signal& (0+255),f,b
  1990  000E10  5025               	movf	?_digitalRead+1,w,c
  1991  000E12  0101               	movlb	1	; () banked
  1992  000E14  132A               	iorwf	(sortBattery@signal+1)& (0+255),f,b
  1993                           
  1994                           ; BSR set to: 1
  1995                           ;main.c: 114: digitalWrite(AA_float[0], AA_float[1], 1);
  1996  000E16  C0EB  F024         	movff	_AA_float,digitalWrite@port
  1997  000E1A  C0EC  F025         	movff	_AA_float+1,digitalWrite@port+1
  1998  000E1E  C0ED  F026         	movff	_AA_float+2,digitalWrite@pin
  1999  000E22  C0EE  F027         	movff	_AA_float+3,digitalWrite@pin+1
  2000  000E26  0E00               	movlw	0
  2001  000E28  6E29               	movwf	digitalWrite@val+1,c
  2002  000E2A  0E01               	movlw	1
  2003  000E2C  6E28               	movwf	digitalWrite@val,c
  2004  000E2E  ECFA  F010         	call	_digitalWrite	;wreg free
  2005                           
  2006                           ;main.c: 115: float V = analogRead(padPin3[1]) / resolution * Vcc;
  2007  000E32  C123  F083         	movff	sortBattery@resolution,___ftdiv@f2
  2008  000E36  C124  F084         	movff	sortBattery@resolution+1,___ftdiv@f2+1
  2009  000E3A  C125  F085         	movff	sortBattery@resolution+2,___ftdiv@f2+2
  2010  000E3E  C04F  F024         	movff	_padPin3+2,analogRead@channel
  2011  000E42  C050  F025         	movff	_padPin3+3,analogRead@channel+1
  2012  000E46  ECFD  F015         	call	_analogRead	;wreg free
  2013  000E4A  C024  F02C         	movff	?_analogRead,___altoft@c
  2014  000E4E  C025  F02D         	movff	?_analogRead+1,___altoft@c+1
  2015  000E52  C026  F02E         	movff	?_analogRead+2,___altoft@c+2
  2016  000E56  C027  F02F         	movff	?_analogRead+3,___altoft@c+3
  2017  000E5A  EC88  F013         	call	___altoft	;wreg free
  2018  000E5E  C02C  F080         	movff	?___altoft,___ftdiv@f1
  2019  000E62  C02D  F081         	movff	?___altoft+1,___ftdiv@f1+1
  2020  000E66  C02E  F082         	movff	?___altoft+2,___ftdiv@f1+2
  2021  000E6A  EC39  F00D         	call	___ftdiv	;wreg free
  2022  000E6E  C080  F08C         	movff	?___ftdiv,___ftmul@f1
  2023  000E72  C081  F08D         	movff	?___ftdiv+1,___ftmul@f1+1
  2024  000E76  C082  F08E         	movff	?___ftdiv+2,___ftmul@f1+2
  2025  000E7A  C120  F08F         	movff	sortBattery@Vcc,___ftmul@f2
  2026  000E7E  C121  F090         	movff	sortBattery@Vcc+1,___ftmul@f2+1
  2027  000E82  C122  F091         	movff	sortBattery@Vcc+2,___ftmul@f2+2
  2028  000E86  ECE8  F00B         	call	___ftmul	;wreg free
  2029  000E8A  C08C  F126         	movff	?___ftmul,sortBattery@V
  2030  000E8E  C08D  F127         	movff	?___ftmul+1,sortBattery@V+1
  2031  000E92  C08E  F128         	movff	?___ftmul+2,sortBattery@V+2
  2032                           
  2033                           ;main.c: 117: lcdClear();
  2034  000E96  EC46  F017         	call	_lcdClear	;wreg free
  2035                           
  2036                           ;main.c: 118: printf("target: %d\nV: %f",signal,V);
  2037  000E9A  0EB7               	movlw	low STR_4
  2038  000E9C  0100               	movlb	0	; () banked
  2039  000E9E  6FC0               	movwf	printf@f& (0+255),b
  2040  000EA0  0EFF               	movlw	high STR_4
  2041  000EA2  0100               	movlb	0	; () banked
  2042  000EA4  6FC1               	movwf	(printf@f+1)& (0+255),b
  2043  000EA6  C129  F0C2         	movff	sortBattery@signal,?_printf+2
  2044  000EAA  C12A  F0C3         	movff	sortBattery@signal+1,?_printf+3
  2045  000EAE  C126  F0C4         	movff	sortBattery@V,?_printf+4
  2046  000EB2  C127  F0C5         	movff	sortBattery@V+1,?_printf+5
  2047  000EB6  C128  F0C6         	movff	sortBattery@V+2,?_printf+6
  2048  000EBA  EC09  F000         	call	_printf	;wreg free
  2049                           
  2050                           ;main.c: 119: readKeypad();
  2051  000EBE  EC6A  F016         	call	_readKeypad	;wreg free
  2052                           
  2053                           ;main.c: 147: lcdClear();
  2054  000EC2  EC46  F017         	call	_lcdClear	;wreg free
  2055                           
  2056                           ;main.c: 148: printf("pick angle: 1,2,3,4?");
  2057  000EC6  0E99               	movlw	low STR_5
  2058  000EC8  0100               	movlb	0	; () banked
  2059  000ECA  6FC0               	movwf	printf@f& (0+255),b
  2060  000ECC  0EFE               	movlw	high STR_5
  2061  000ECE  0100               	movlb	0	; () banked
  2062  000ED0  6FC1               	movwf	(printf@f+1)& (0+255),b
  2063  000ED2  EC09  F000         	call	_printf	;wreg free
  2064                           
  2065                           ;main.c: 149: int dir[4] = {100,95,90,85};
  2066  000ED6  EE21  F04E         	lfsr	2,sortBattery@F3138
  2067  000EDA  EE11  F018         	lfsr	1,sortBattery@dir
  2068  000EDE  0E07               	movlw	7
  2069  000EE0                     u5921:
  2070  000EE0  CFDB FFE3          	movff	plusw2,plusw1
  2071  000EE4  06E8               	decf	wreg,f,c
  2072  000EE6  E2FC               	bc	u5921
  2073                           
  2074                           ;main.c: 150: setAngle(redirectingServo[0], dir[readKeypad() - '0']);
  2075  000EE8  C03B  F0D7         	movff	_redirectingServo,setAngle@timer
  2076  000EEC  C03C  F0D8         	movff	_redirectingServo+1,setAngle@timer+1
  2077  000EF0  0EA0               	movlw	160
  2078  000EF2  0100               	movlb	0	; () banked
  2079  000EF4  6FDB               	movwf	??_sortBattery& (0+255),b
  2080  000EF6  0EFF               	movlw	255
  2081  000EF8  0100               	movlb	0	; () banked
  2082  000EFA  6FDC               	movwf	(??_sortBattery+1)& (0+255),b
  2083  000EFC  EC6A  F016         	call	_readKeypad	;wreg free
  2084  000F00  0100               	movlb	0	; () banked
  2085  000F02  6FDD               	movwf	(??_sortBattery+2)& (0+255),b
  2086  000F04  6BDE               	clrf	(??_sortBattery+3)& (0+255),b
  2087  000F06  90D8               	bcf	status,0,c
  2088  000F08  0100               	movlb	0	; () banked
  2089  000F0A  37DD               	rlcf	(??_sortBattery+2)& (0+255),f,b
  2090  000F0C  37DE               	rlcf	(??_sortBattery+3)& (0+255),f,b
  2091  000F0E  0100               	movlb	0	; () banked
  2092  000F10  51DB               	movf	??_sortBattery& (0+255),w,b
  2093  000F12  0100               	movlb	0	; () banked
  2094  000F14  27DD               	addwf	(??_sortBattery+2)& (0+255),f,b
  2095  000F16  0100               	movlb	0	; () banked
  2096  000F18  51DC               	movf	(??_sortBattery+1)& (0+255),w,b
  2097  000F1A  0100               	movlb	0	; () banked
  2098  000F1C  23DE               	addwfc	(??_sortBattery+3)& (0+255),f,b
  2099  000F1E  0E18               	movlw	low sortBattery@dir
  2100  000F20  0100               	movlb	0	; () banked
  2101  000F22  25DD               	addwf	(??_sortBattery+2)& (0+255),w,b
  2102  000F24  6ED9               	movwf	fsr2l,c
  2103  000F26  0E01               	movlw	high sortBattery@dir
  2104  000F28  0100               	movlb	0	; () banked
  2105  000F2A  21DE               	addwfc	(??_sortBattery+3)& (0+255),w,b
  2106  000F2C  6EDA               	movwf	fsr2h,c
  2107  000F2E  CFDE F0D9          	movff	postinc2,setAngle@angle
  2108  000F32  CFDD F0DA          	movff	postdec2,setAngle@angle+1
  2109  000F36  ECA6  F011         	call	_setAngle	;wreg free
  2110                           
  2111                           ;main.c: 153: pause("release battery?");
  2112  000F3A  0EA6               	movlw	low STR_6
  2113  000F3C  0100               	movlb	0	; () banked
  2114  000F3E  6FCD               	movwf	pause@message& (0+255),b
  2115  000F40  0EFF               	movlw	high STR_6
  2116  000F42  0100               	movlb	0	; () banked
  2117  000F44  6FCE               	movwf	(pause@message+1)& (0+255),b
  2118  000F46  EC09  F017         	call	_pause	;wreg free
  2119                           
  2120                           ;main.c: 154: setAngle(padServo[0], padAngle_OPEN);
  2121  000F4A  C0E5  F0D7         	movff	_padServo,setAngle@timer
  2122  000F4E  C0E6  F0D8         	movff	_padServo+1,setAngle@timer+1
  2123  000F52  C0FB  F0D9         	movff	_padAngle_OPEN,setAngle@angle
  2124  000F56  C0FC  F0DA         	movff	_padAngle_OPEN+1,setAngle@angle+1
  2125  000F5A  ECA6  F011         	call	_setAngle	;wreg free
  2126                           
  2127                           ;main.c: 158: pause("reset the pad?");
  2128  000F5E  0EC8               	movlw	low STR_7
  2129  000F60  0100               	movlb	0	; () banked
  2130  000F62  6FCD               	movwf	pause@message& (0+255),b
  2131  000F64  0EFF               	movlw	high STR_7
  2132  000F66  0100               	movlb	0	; () banked
  2133  000F68  6FCE               	movwf	(pause@message+1)& (0+255),b
  2134  000F6A  EC09  F017         	call	_pause	;wreg free
  2135                           
  2136                           ;main.c: 159: setAngle(padServo[0], padAngle_NEUTRAL);
  2137  000F6E  C0E5  F0D7         	movff	_padServo,setAngle@timer
  2138  000F72  C0E6  F0D8         	movff	_padServo+1,setAngle@timer+1
  2139  000F76  C0F9  F0D9         	movff	_padAngle_NEUTRAL,setAngle@angle
  2140  000F7A  C0FA  F0DA         	movff	_padAngle_NEUTRAL+1,setAngle@angle+1
  2141  000F7E  ECA6  F011         	call	_setAngle	;wreg free
  2142                           
  2143                           ;main.c: 162: pause("conveyor & cylinder on?");
  2144  000F82  0E81               	movlw	low STR_8
  2145  000F84  0100               	movlb	0	; () banked
  2146  000F86  6FCD               	movwf	pause@message& (0+255),b
  2147  000F88  0EFE               	movlw	high STR_8
  2148  000F8A  0100               	movlb	0	; () banked
  2149  000F8C  6FCE               	movwf	(pause@message+1)& (0+255),b
  2150  000F8E  EC09  F017         	call	_pause	;wreg free
  2151                           
  2152                           ;main.c: 163: initServo(conveyorServo[0], conveyorServo[1], conveyorServo[2], 90);
  2153  000F92  C0DF  F106         	movff	_conveyorServo,initServo@timer
  2154  000F96  C0E0  F107         	movff	_conveyorServo+1,initServo@timer+1
  2155  000F9A  C0E1  F108         	movff	_conveyorServo+2,initServo@po
  2156  000F9E  C0E2  F109         	movff	_conveyorServo+3,initServo@po+1
  2157  000FA2  C0E3  F10A         	movff	_conveyorServo+4,initServo@pi
  2158  000FA6  C0E4  F10B         	movff	_conveyorServo+5,initServo@pi+1
  2159  000FAA  0E00               	movlw	0
  2160  000FAC  0101               	movlb	1	; () banked
  2161  000FAE  6F0D               	movwf	(initServo@angle+1)& (0+255),b
  2162  000FB0  0E5A               	movlw	90
  2163  000FB2  6F0C               	movwf	initServo@angle& (0+255),b
  2164  000FB4  EC4B  F013         	call	_initServo	;wreg free
  2165                           
  2166                           ;main.c: 164: digitalWrite(cylinderMotor[0], cylinderMotor[1], 1);
  2167  000FB8  C0EF  F024         	movff	_cylinderMotor,digitalWrite@port
  2168  000FBC  C0F0  F025         	movff	_cylinderMotor+1,digitalWrite@port+1
  2169  000FC0  C0F1  F026         	movff	_cylinderMotor+2,digitalWrite@pin
  2170  000FC4  C0F2  F027         	movff	_cylinderMotor+3,digitalWrite@pin+1
  2171  000FC8  0E00               	movlw	0
  2172  000FCA  6E29               	movwf	digitalWrite@val+1,c
  2173  000FCC  0E01               	movlw	1
  2174  000FCE  6E28               	movwf	digitalWrite@val,c
  2175  000FD0  ECFA  F010         	call	_digitalWrite	;wreg free
  2176  000FD4                     l126:
  2177  000FD4  D7FF               	goto	l126
  2178  000FD6                     __end_of_sortBattery:
  2179                           	opt stack 0
  2180                           tblptru	equ	0xFF8
  2181                           tblptrh	equ	0xFF7
  2182                           tblptrl	equ	0xFF6
  2183                           tablat	equ	0xFF5
  2184                           postinc0	equ	0xFEE
  2185                           wreg	equ	0xFE8
  2186                           postdec1	equ	0xFE5
  2187                           plusw1	equ	0xFE3
  2188                           fsr1l	equ	0xFE1
  2189                           postinc2	equ	0xFDE
  2190                           postdec2	equ	0xFDD
  2191                           plusw2	equ	0xFDB
  2192                           fsr2h	equ	0xFDA
  2193                           fsr2l	equ	0xFD9
  2194                           status	equ	0xFD8
  2195                           
  2196 ;; *************** function _stopServo *****************
  2197 ;; Defined at:
  2198 ;;		line 26 in file "servo.c"
  2199 ;; Parameters:    Size  Location     Type
  2200 ;;  timer           2   35[COMRAM] int 
  2201 ;; Auto vars:     Size  Location     Type
  2202 ;;		None
  2203 ;; Return value:  Size  Location     Type
  2204 ;;                  1    wreg      void 
  2205 ;; Registers used:
  2206 ;;		wreg, status,2, status,0
  2207 ;; Tracked objects:
  2208 ;;		On entry : 0/0
  2209 ;;		On exit  : 0/0
  2210 ;;		Unchanged: 0/0
  2211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2212 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2213 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2214 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2215 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2216 ;;Total ram usage:        4 bytes
  2217 ;; Hardware stack levels used:    1
  2218 ;; Hardware stack levels required when called:    3
  2219 ;; This function calls:
  2220 ;;		Nothing
  2221 ;; This function is called by:
  2222 ;;		_sortBattery
  2223 ;; This function uses a non-reentrant model
  2224 ;;
  2225                           
  2226                           	psect	text2
  2227  002AB0                     __ptext2:
  2228                           	opt stack 0
  2229  002AB0                     _stopServo:
  2230                           	opt stack 26
  2231                           
  2232                           ;servo.c: 27: switch(timer){
  2233                           
  2234                           ;incstack = 0
  2235  002AB0  D00C               	goto	l5875
  2236  002AB2                     l5865:
  2237  002AB2  0E00               	movlw	0
  2238  002AB4  6ED5               	movwf	4053,c	;volatile
  2239  002AB6  0012               	return	
  2240  002AB8                     l5867:
  2241  002AB8  0E00               	movlw	0
  2242  002ABA  6ECD               	movwf	4045,c	;volatile
  2243  002ABC  0012               	return	
  2244  002ABE                     l5869:
  2245  002ABE  0E00               	movlw	0
  2246  002AC0  6ECA               	movwf	4042,c	;volatile
  2247  002AC2  0012               	return	
  2248  002AC4                     l5871:
  2249  002AC4  0E00               	movlw	0
  2250  002AC6  6EB1               	movwf	4017,c	;volatile
  2251                           
  2252                           ;servo.c: 32: }
  2253  002AC8  0012               	return	
  2254  002ACA                     l5875:
  2255  002ACA  C024  F026         	movff	stopServo@timer,??_stopServo
  2256  002ACE  C025  F027         	movff	stopServo@timer+1,??_stopServo+1
  2257                           
  2258                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2259                           ; Switch size 1, requested type "space"
  2260                           ; Number of cases is 1, Range of values is 0 to 0
  2261                           ; switch strategies available:
  2262                           ; Name         Instructions Cycles
  2263                           ; simple_byte            4     3 (average)
  2264                           ;	Chosen strategy is simple_byte
  2265  002AD2  5027               	movf	??_stopServo+1,w,c
  2266  002AD4  0A00               	xorlw	0	; case 0
  2267  002AD6  A4D8               	btfss	status,2,c
  2268  002AD8  0012               	return	
  2269                           
  2270                           ; Switch size 1, requested type "space"
  2271                           ; Number of cases is 4, Range of values is 0 to 3
  2272                           ; switch strategies available:
  2273                           ; Name         Instructions Cycles
  2274                           ; simple_byte           13     7 (average)
  2275                           ;	Chosen strategy is simple_byte
  2276  002ADA  5026               	movf	??_stopServo,w,c
  2277  002ADC  0A00               	xorlw	0	; case 0
  2278  002ADE  B4D8               	btfsc	status,2,c
  2279  002AE0  D7E8               	goto	l5865
  2280  002AE2  0A01               	xorlw	1	; case 1
  2281  002AE4  B4D8               	btfsc	status,2,c
  2282  002AE6  D7E8               	goto	l5867
  2283  002AE8  0A03               	xorlw	3	; case 2
  2284  002AEA  B4D8               	btfsc	status,2,c
  2285  002AEC  D7E8               	goto	l5869
  2286  002AEE  0A01               	xorlw	1	; case 3
  2287  002AF0  A4D8               	btfss	status,2,c
  2288  002AF2  0012               	return	
  2289  002AF4  D7E7               	goto	l5871
  2290  002AF6                     __end_of_stopServo:
  2291                           	opt stack 0
  2292                           tblptru	equ	0xFF8
  2293                           tblptrh	equ	0xFF7
  2294                           tblptrl	equ	0xFF6
  2295                           tablat	equ	0xFF5
  2296                           postinc0	equ	0xFEE
  2297                           wreg	equ	0xFE8
  2298                           postdec1	equ	0xFE5
  2299                           plusw1	equ	0xFE3
  2300                           fsr1l	equ	0xFE1
  2301                           postinc2	equ	0xFDE
  2302                           postdec2	equ	0xFDD
  2303                           plusw2	equ	0xFDB
  2304                           fsr2h	equ	0xFDA
  2305                           fsr2l	equ	0xFD9
  2306                           status	equ	0xFD8
  2307                           
  2308 ;; *************** function _pause *****************
  2309 ;; Defined at:
  2310 ;;		line 218 in file "main.c"
  2311 ;; Parameters:    Size  Location     Type
  2312 ;;  message         2   77[BANK0 ] PTR unsigned char 
  2313 ;;		 -> STR_8(24), STR_7(15), STR_6(17), STR_3(14), 
  2314 ;;		 -> STR_2(20), 
  2315 ;; Auto vars:     Size  Location     Type
  2316 ;;		None
  2317 ;; Return value:  Size  Location     Type
  2318 ;;                  1    wreg      void 
  2319 ;; Registers used:
  2320 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2321 ;; Tracked objects:
  2322 ;;		On entry : 0/0
  2323 ;;		On exit  : 0/0
  2324 ;;		Unchanged: 0/0
  2325 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2326 ;;      Params:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2327 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2328 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2329 ;;      Totals:         0       2       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2330 ;;Total ram usage:        2 bytes
  2331 ;; Hardware stack levels used:    1
  2332 ;; Hardware stack levels required when called:    8
  2333 ;; This function calls:
  2334 ;;		_lcdClear
  2335 ;;		_printf
  2336 ;;		_readKeypad
  2337 ;; This function is called by:
  2338 ;;		_sortBattery
  2339 ;; This function uses a non-reentrant model
  2340 ;;
  2341                           
  2342                           	psect	text3
  2343  002E12                     __ptext3:
  2344                           	opt stack 0
  2345  002E12                     _pause:
  2346                           	opt stack 21
  2347                           
  2348                           ;main.c: 219: lcdClear();
  2349                           
  2350                           ;incstack = 0
  2351  002E12  EC46  F017         	call	_lcdClear	;wreg free
  2352                           
  2353                           ;main.c: 220: printf(message);
  2354  002E16  C0CD  F0C0         	movff	pause@message,printf@f
  2355  002E1A  C0CE  F0C1         	movff	pause@message+1,printf@f+1
  2356  002E1E  EC09  F000         	call	_printf	;wreg free
  2357                           
  2358                           ;main.c: 221: readKeypad();
  2359  002E22  EC6A  F016         	call	_readKeypad	;wreg free
  2360  002E26  0012               	return		;funcret
  2361  002E28                     __end_of_pause:
  2362                           	opt stack 0
  2363                           tblptru	equ	0xFF8
  2364                           tblptrh	equ	0xFF7
  2365                           tblptrl	equ	0xFF6
  2366                           tablat	equ	0xFF5
  2367                           postinc0	equ	0xFEE
  2368                           wreg	equ	0xFE8
  2369                           postdec1	equ	0xFE5
  2370                           plusw1	equ	0xFE3
  2371                           fsr1l	equ	0xFE1
  2372                           postinc2	equ	0xFDE
  2373                           postdec2	equ	0xFDD
  2374                           plusw2	equ	0xFDB
  2375                           fsr2h	equ	0xFDA
  2376                           fsr2l	equ	0xFD9
  2377                           status	equ	0xFD8
  2378                           
  2379 ;; *************** function _initServo *****************
  2380 ;; Defined at:
  2381 ;;		line 17 in file "servo.c"
  2382 ;; Parameters:    Size  Location     Type
  2383 ;;  timer           2    6[BANK1 ] int 
  2384 ;;  po              2    8[BANK1 ] int 
  2385 ;;  pi              2   10[BANK1 ] int 
  2386 ;;  angle           2   12[BANK1 ] int 
  2387 ;; Auto vars:     Size  Location     Type
  2388 ;;		None
  2389 ;; Return value:  Size  Location     Type
  2390 ;;                  1    wreg      void 
  2391 ;; Registers used:
  2392 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2393 ;; Tracked objects:
  2394 ;;		On entry : 0/0
  2395 ;;		On exit  : 0/0
  2396 ;;		Unchanged: 0/0
  2397 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2398 ;;      Params:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2399 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2400 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2401 ;;      Totals:         0       0       8       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2402 ;;Total ram usage:        8 bytes
  2403 ;; Hardware stack levels used:    1
  2404 ;; Hardware stack levels required when called:    7
  2405 ;; This function calls:
  2406 ;;		_initTimer
  2407 ;;		_setAngle
  2408 ;;		_startTimer
  2409 ;; This function is called by:
  2410 ;;		_main
  2411 ;;		_sortBattery
  2412 ;; This function uses a non-reentrant model
  2413 ;;
  2414                           
  2415                           	psect	text4
  2416  002696                     __ptext4:
  2417                           	opt stack 0
  2418  002696                     _initServo:
  2419                           	opt stack 22
  2420                           
  2421                           ;servo.c: 18: port[timer] = po;
  2422                           
  2423                           ;incstack = 0
  2424  002696  90D8               	bcf	status,0,c
  2425  002698  0101               	movlb	1	; () banked
  2426  00269A  3506               	rlcf	initServo@timer& (0+255),w,b
  2427  00269C  6ED9               	movwf	fsr2l,c
  2428  00269E  0101               	movlb	1	; () banked
  2429  0026A0  3507               	rlcf	(initServo@timer+1)& (0+255),w,b
  2430  0026A2  6EDA               	movwf	fsr2h,c
  2431  0026A4  0E43               	movlw	low _port
  2432  0026A6  26D9               	addwf	fsr2l,f,c
  2433  0026A8  0E01               	movlw	high _port
  2434  0026AA  22DA               	addwfc	fsr2h,f,c
  2435  0026AC  C108  FFDE         	movff	initServo@po,postinc2
  2436  0026B0  C109  FFDD         	movff	initServo@po+1,postdec2
  2437                           
  2438                           ;servo.c: 19: pin[timer] = pi;
  2439  0026B4  90D8               	bcf	status,0,c
  2440  0026B6  0101               	movlb	1	; () banked
  2441  0026B8  3506               	rlcf	initServo@timer& (0+255),w,b
  2442  0026BA  6ED9               	movwf	fsr2l,c
  2443  0026BC  0101               	movlb	1	; () banked
  2444  0026BE  3507               	rlcf	(initServo@timer+1)& (0+255),w,b
  2445  0026C0  6EDA               	movwf	fsr2h,c
  2446  0026C2  0E3B               	movlw	low _pin
  2447  0026C4  26D9               	addwf	fsr2l,f,c
  2448  0026C6  0E01               	movlw	high _pin
  2449  0026C8  22DA               	addwfc	fsr2h,f,c
  2450  0026CA  C10A  FFDE         	movff	initServo@pi,postinc2
  2451  0026CE  C10B  FFDD         	movff	initServo@pi+1,postdec2
  2452                           
  2453                           ; BSR set to: 1
  2454                           ;servo.c: 20: setAngle(timer, angle);
  2455  0026D2  C106  F0D7         	movff	initServo@timer,setAngle@timer
  2456  0026D6  C107  F0D8         	movff	initServo@timer+1,setAngle@timer+1
  2457  0026DA  C10C  F0D9         	movff	initServo@angle,setAngle@angle
  2458  0026DE  C10D  F0DA         	movff	initServo@angle+1,setAngle@angle+1
  2459  0026E2  ECA6  F011         	call	_setAngle	;wreg free
  2460                           
  2461                           ;servo.c: 22: initTimer(timer);
  2462  0026E6  C106  F024         	movff	initServo@timer,initTimer@timer
  2463  0026EA  C107  F025         	movff	initServo@timer+1,initTimer@timer+1
  2464  0026EE  EC7B  F015         	call	_initTimer	;wreg free
  2465                           
  2466                           ;servo.c: 23: startTimer(timer,0);
  2467  0026F2  C106  F024         	movff	initServo@timer,startTimer@timer
  2468  0026F6  C107  F025         	movff	initServo@timer+1,startTimer@timer+1
  2469  0026FA  0E00               	movlw	0
  2470  0026FC  6E26               	movwf	startTimer@val,c
  2471  0026FE  0E00               	movlw	0
  2472  002700  6E27               	movwf	startTimer@val+1,c
  2473  002702  0E00               	movlw	0
  2474  002704  6E28               	movwf	startTimer@val+2,c
  2475  002706  0E00               	movlw	0
  2476  002708  6E29               	movwf	startTimer@val+3,c
  2477  00270A  ECE6  F014         	call	_startTimer	;wreg free
  2478  00270E  0012               	return		;funcret
  2479  002710                     __end_of_initServo:
  2480                           	opt stack 0
  2481                           tblptru	equ	0xFF8
  2482                           tblptrh	equ	0xFF7
  2483                           tblptrl	equ	0xFF6
  2484                           tablat	equ	0xFF5
  2485                           postinc0	equ	0xFEE
  2486                           wreg	equ	0xFE8
  2487                           postdec1	equ	0xFE5
  2488                           plusw1	equ	0xFE3
  2489                           fsr1l	equ	0xFE1
  2490                           postinc2	equ	0xFDE
  2491                           postdec2	equ	0xFDD
  2492                           plusw2	equ	0xFDB
  2493                           fsr2h	equ	0xFDA
  2494                           fsr2l	equ	0xFD9
  2495                           status	equ	0xFD8
  2496                           
  2497 ;; *************** function _startTimer *****************
  2498 ;; Defined at:
  2499 ;;		line 75 in file "timer.c"
  2500 ;; Parameters:    Size  Location     Type
  2501 ;;  timer           2   35[COMRAM] int 
  2502 ;;  val             4   37[COMRAM] long 
  2503 ;; Auto vars:     Size  Location     Type
  2504 ;;		None
  2505 ;; Return value:  Size  Location     Type
  2506 ;;                  1    wreg      void 
  2507 ;; Registers used:
  2508 ;;		wreg, status,2, status,0
  2509 ;; Tracked objects:
  2510 ;;		On entry : 0/0
  2511 ;;		On exit  : 0/0
  2512 ;;		Unchanged: 0/0
  2513 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2514 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2515 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2516 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2517 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2518 ;;Total ram usage:        8 bytes
  2519 ;; Hardware stack levels used:    1
  2520 ;; Hardware stack levels required when called:    3
  2521 ;; This function calls:
  2522 ;;		Nothing
  2523 ;; This function is called by:
  2524 ;;		_initServo
  2525 ;;		_testFrequency
  2526 ;; This function uses a non-reentrant model
  2527 ;;
  2528                           
  2529                           	psect	text5
  2530  0029CC                     __ptext5:
  2531                           	opt stack 0
  2532  0029CC                     _startTimer:
  2533                           	opt stack 25
  2534                           
  2535                           ;timer.c: 76: switch(timer){
  2536                           
  2537                           ;incstack = 0
  2538  0029CC  D012               	goto	l5807
  2539  0029CE                     l375:
  2540                           
  2541                           ;timer.c: 78: TMR0H = val>>8;
  2542  0029CE  C027  FFD7         	movff	startTimer@val+1,4055	;volatile
  2543                           
  2544                           ;timer.c: 79: TMR0L = val;
  2545  0029D2  C026  FFD6         	movff	startTimer@val,4054	;volatile
  2546                           
  2547                           ;timer.c: 80: T0CON |= 1<<7;
  2548  0029D6  8ED5               	bsf	4053,7,c	;volatile
  2549                           
  2550                           ;timer.c: 81: break;
  2551  0029D8  0012               	return	
  2552  0029DA                     l377:
  2553                           
  2554                           ;timer.c: 83: TMR1H = val>>8;
  2555  0029DA  C027  FFCF         	movff	startTimer@val+1,4047	;volatile
  2556                           
  2557                           ;timer.c: 84: TMR1L = val;
  2558  0029DE  C026  FFCE         	movff	startTimer@val,4046	;volatile
  2559                           
  2560                           ;timer.c: 85: T1CON |= 1<<0;
  2561  0029E2  80CD               	bsf	4045,0,c	;volatile
  2562                           
  2563                           ;timer.c: 86: break;
  2564  0029E4  0012               	return	
  2565  0029E6                     l378:
  2566                           
  2567                           ;timer.c: 88: TMR3H = val>>8;
  2568  0029E6  C027  FFB3         	movff	startTimer@val+1,4019	;volatile
  2569                           
  2570                           ;timer.c: 89: TMR3L = val;
  2571  0029EA  C026  FFB2         	movff	startTimer@val,4018	;volatile
  2572                           
  2573                           ;timer.c: 90: T3CON |= 1<<0;
  2574  0029EE  80B1               	bsf	4017,0,c	;volatile
  2575                           
  2576                           ;timer.c: 91: }
  2577  0029F0  0012               	return	
  2578  0029F2                     l5807:
  2579  0029F2  C024  F02A         	movff	startTimer@timer,??_startTimer
  2580  0029F6  C025  F02B         	movff	startTimer@timer+1,??_startTimer+1
  2581                           
  2582                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  2583                           ; Switch size 1, requested type "space"
  2584                           ; Number of cases is 1, Range of values is 0 to 0
  2585                           ; switch strategies available:
  2586                           ; Name         Instructions Cycles
  2587                           ; simple_byte            4     3 (average)
  2588                           ;	Chosen strategy is simple_byte
  2589  0029FA  502B               	movf	??_startTimer+1,w,c
  2590  0029FC  0A00               	xorlw	0	; case 0
  2591  0029FE  A4D8               	btfss	status,2,c
  2592  002A00  0012               	return	
  2593                           
  2594                           ; Switch size 1, requested type "space"
  2595                           ; Number of cases is 3, Range of values is 0 to 3
  2596                           ; switch strategies available:
  2597                           ; Name         Instructions Cycles
  2598                           ; simple_byte           10     6 (average)
  2599                           ;	Chosen strategy is simple_byte
  2600  002A02  502A               	movf	??_startTimer,w,c
  2601  002A04  0A00               	xorlw	0	; case 0
  2602  002A06  B4D8               	btfsc	status,2,c
  2603  002A08  D7E2               	goto	l375
  2604  002A0A  0A01               	xorlw	1	; case 1
  2605  002A0C  B4D8               	btfsc	status,2,c
  2606  002A0E  D7E5               	goto	l377
  2607  002A10  0A02               	xorlw	2	; case 3
  2608  002A12  A4D8               	btfss	status,2,c
  2609  002A14  0012               	return	
  2610  002A16  D7E7               	goto	l378
  2611  002A18                     __end_of_startTimer:
  2612                           	opt stack 0
  2613                           tblptru	equ	0xFF8
  2614                           tblptrh	equ	0xFF7
  2615                           tblptrl	equ	0xFF6
  2616                           tablat	equ	0xFF5
  2617                           postinc0	equ	0xFEE
  2618                           wreg	equ	0xFE8
  2619                           postdec1	equ	0xFE5
  2620                           plusw1	equ	0xFE3
  2621                           fsr1l	equ	0xFE1
  2622                           postinc2	equ	0xFDE
  2623                           postdec2	equ	0xFDD
  2624                           plusw2	equ	0xFDB
  2625                           fsr2h	equ	0xFDA
  2626                           fsr2l	equ	0xFD9
  2627                           status	equ	0xFD8
  2628                           
  2629 ;; *************** function _setAngle *****************
  2630 ;; Defined at:
  2631 ;;		line 43 in file "servo.c"
  2632 ;; Parameters:    Size  Location     Type
  2633 ;;  timer           2   87[BANK0 ] int 
  2634 ;;  angle           2   89[BANK0 ] int 
  2635 ;; Auto vars:     Size  Location     Type
  2636 ;;		None
  2637 ;; Return value:  Size  Location     Type
  2638 ;;                  1    wreg      void 
  2639 ;; Registers used:
  2640 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
  2641 ;; Tracked objects:
  2642 ;;		On entry : 0/0
  2643 ;;		On exit  : 0/0
  2644 ;;		Unchanged: 0/0
  2645 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2646 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2647 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2648 ;;      Temps:          0       0       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2649 ;;      Totals:         0       4       6       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2650 ;;Total ram usage:       10 bytes
  2651 ;; Hardware stack levels used:    1
  2652 ;; Hardware stack levels required when called:    6
  2653 ;; This function calls:
  2654 ;;		_angleToPulse
  2655 ;; This function is called by:
  2656 ;;		_sortBattery
  2657 ;;		_initServo
  2658 ;; This function uses a non-reentrant model
  2659 ;;
  2660                           
  2661                           	psect	text6
  2662  00234C                     __ptext6:
  2663                           	opt stack 0
  2664  00234C                     _setAngle:
  2665                           	opt stack 23
  2666                           
  2667                           ;servo.c: 44: pulse[timer] = 0xffff - angleToPulse(angle);
  2668                           
  2669                           ;incstack = 0
  2670  00234C  C0D9  F0C0         	movff	setAngle@angle,angleToPulse@angle
  2671  002350  C0DA  F0C1         	movff	setAngle@angle+1,angleToPulse@angle+1
  2672  002354  EC39  F00B         	call	_angleToPulse	;wreg free
  2673  002358  0100               	movlb	0	; () banked
  2674  00235A  1FC0               	comf	?_angleToPulse& (0+255),f,b
  2675  00235C  0100               	movlb	0	; () banked
  2676  00235E  1FC1               	comf	(?_angleToPulse+1)& (0+255),f,b
  2677  002360  0100               	movlb	0	; () banked
  2678  002362  1FC2               	comf	(?_angleToPulse+2)& (0+255),f,b
  2679  002364  0100               	movlb	0	; () banked
  2680  002366  1FC3               	comf	(?_angleToPulse+3)& (0+255),f,b
  2681  002368  0100               	movlb	0	; () banked
  2682  00236A  2BC0               	incf	?_angleToPulse& (0+255),f,b
  2683  00236C  0E00               	movlw	0
  2684  00236E  0100               	movlb	0	; () banked
  2685  002370  23C1               	addwfc	(?_angleToPulse+1)& (0+255),f,b
  2686  002372  0100               	movlb	0	; () banked
  2687  002374  23C2               	addwfc	(?_angleToPulse+2)& (0+255),f,b
  2688  002376  0100               	movlb	0	; () banked
  2689  002378  23C3               	addwfc	(?_angleToPulse+3)& (0+255),f,b
  2690  00237A  0EFF               	movlw	255
  2691  00237C  0100               	movlb	0	; () banked
  2692  00237E  25C0               	addwf	?_angleToPulse& (0+255),w,b
  2693  002380  0101               	movlb	1	; () banked
  2694  002382  6F00               	movwf	??_setAngle& (0+255),b
  2695  002384  0EFF               	movlw	255
  2696  002386  0100               	movlb	0	; () banked
  2697  002388  21C1               	addwfc	(?_angleToPulse+1)& (0+255),w,b
  2698  00238A  0101               	movlb	1	; () banked
  2699  00238C  6F01               	movwf	(??_setAngle+1)& (0+255),b
  2700  00238E  0E00               	movlw	0
  2701  002390  0100               	movlb	0	; () banked
  2702  002392  21C2               	addwfc	(?_angleToPulse+2)& (0+255),w,b
  2703  002394  0101               	movlb	1	; () banked
  2704  002396  6F02               	movwf	(??_setAngle+2)& (0+255),b
  2705  002398  0E00               	movlw	0
  2706  00239A  0100               	movlb	0	; () banked
  2707  00239C  21C3               	addwfc	(?_angleToPulse+3)& (0+255),w,b
  2708  00239E  0101               	movlb	1	; () banked
  2709  0023A0  6F03               	movwf	(??_setAngle+3)& (0+255),b
  2710  0023A2  0E2B               	movlw	low _pulse
  2711  0023A4  0101               	movlb	1	; () banked
  2712  0023A6  6F04               	movwf	(??_setAngle+4)& (0+255),b
  2713  0023A8  0E01               	movlw	high _pulse
  2714  0023AA  0101               	movlb	1	; () banked
  2715  0023AC  6F05               	movwf	(??_setAngle+5)& (0+255),b
  2716  0023AE  90D8               	bcf	status,0,c
  2717  0023B0  0100               	movlb	0	; () banked
  2718  0023B2  35D7               	rlcf	setAngle@timer& (0+255),w,b
  2719  0023B4  6ED9               	movwf	fsr2l,c
  2720  0023B6  0100               	movlb	0	; () banked
  2721  0023B8  35D8               	rlcf	(setAngle@timer+1)& (0+255),w,b
  2722  0023BA  6EDA               	movwf	fsr2h,c
  2723  0023BC  90D8               	bcf	status,0,c
  2724  0023BE  36D9               	rlcf	fsr2l,f,c
  2725  0023C0  36DA               	rlcf	fsr2h,f,c
  2726  0023C2  0101               	movlb	1	; () banked
  2727  0023C4  5104               	movf	(??_setAngle+4)& (0+255),w,b
  2728  0023C6  26D9               	addwf	fsr2l,f,c
  2729  0023C8  0101               	movlb	1	; () banked
  2730  0023CA  5105               	movf	(??_setAngle+5)& (0+255),w,b
  2731  0023CC  22DA               	addwfc	fsr2h,f,c
  2732  0023CE  C100  FFDE         	movff	??_setAngle,postinc2
  2733  0023D2  C101  FFDE         	movff	??_setAngle+1,postinc2
  2734  0023D6  C102  FFDE         	movff	??_setAngle+2,postinc2
  2735  0023DA  C103  FFDE         	movff	??_setAngle+3,postinc2
  2736                           
  2737                           ; BSR set to: 1
  2738  0023DE  0012               	return		;funcret
  2739  0023E0                     __end_of_setAngle:
  2740                           	opt stack 0
  2741                           tblptru	equ	0xFF8
  2742                           tblptrh	equ	0xFF7
  2743                           tblptrl	equ	0xFF6
  2744                           tablat	equ	0xFF5
  2745                           postinc0	equ	0xFEE
  2746                           wreg	equ	0xFE8
  2747                           postdec1	equ	0xFE5
  2748                           plusw1	equ	0xFE3
  2749                           fsr1l	equ	0xFE1
  2750                           postinc2	equ	0xFDE
  2751                           postdec2	equ	0xFDD
  2752                           plusw2	equ	0xFDB
  2753                           fsr2h	equ	0xFDA
  2754                           fsr2l	equ	0xFD9
  2755                           status	equ	0xFD8
  2756                           
  2757 ;; *************** function _angleToPulse *****************
  2758 ;; Defined at:
  2759 ;;		line 35 in file "servo.c"
  2760 ;; Parameters:    Size  Location     Type
  2761 ;;  angle           2   64[BANK0 ] int 
  2762 ;; Auto vars:     Size  Location     Type
  2763 ;;  a000            4   83[BANK0 ] long 
  2764 ;;  a180            4   76[BANK0 ] long 
  2765 ;;  offset          4   72[BANK0 ] long 
  2766 ;; Return value:  Size  Location     Type
  2767 ;;                  4   64[BANK0 ] long 
  2768 ;; Registers used:
  2769 ;;		wreg, status,2, status,0, cstack
  2770 ;; Tracked objects:
  2771 ;;		On entry : 0/0
  2772 ;;		On exit  : 0/0
  2773 ;;		Unchanged: 0/0
  2774 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2775 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2776 ;;      Locals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2777 ;;      Temps:          0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2778 ;;      Totals:         0      23       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2779 ;;Total ram usage:       23 bytes
  2780 ;; Hardware stack levels used:    1
  2781 ;; Hardware stack levels required when called:    5
  2782 ;; This function calls:
  2783 ;;		___altoft
  2784 ;;		___awtoft
  2785 ;;		___ftadd
  2786 ;;		___ftdiv
  2787 ;;		___ftmul
  2788 ;;		___fttol
  2789 ;; This function is called by:
  2790 ;;		_setAngle
  2791 ;; This function uses a non-reentrant model
  2792 ;;
  2793                           
  2794                           	psect	text7
  2795  001672                     __ptext7:
  2796                           	opt stack 0
  2797  001672                     _angleToPulse:
  2798                           	opt stack 23
  2799                           
  2800                           ;servo.c: 36: long offset = 0;
  2801                           
  2802                           ; BSR set to: 1
  2803                           ;incstack = 0
  2804  001672  0E00               	movlw	0
  2805  001674  0100               	movlb	0	; () banked
  2806  001676  6FC8               	movwf	angleToPulse@offset& (0+255),b
  2807  001678  0E00               	movlw	0
  2808  00167A  6FC9               	movwf	(angleToPulse@offset+1)& (0+255),b
  2809  00167C  0E00               	movlw	0
  2810  00167E  6FCA               	movwf	(angleToPulse@offset+2)& (0+255),b
  2811  001680  0E00               	movlw	0
  2812  001682  6FCB               	movwf	(angleToPulse@offset+3)& (0+255),b
  2813                           
  2814                           ;servo.c: 37: long a000 = 1250;
  2815  001684  0EE2               	movlw	226
  2816  001686  0100               	movlb	0	; () banked
  2817  001688  6FD3               	movwf	angleToPulse@a000& (0+255),b
  2818  00168A  0E04               	movlw	4
  2819  00168C  6FD4               	movwf	(angleToPulse@a000+1)& (0+255),b
  2820  00168E  0E00               	movlw	0
  2821  001690  6FD5               	movwf	(angleToPulse@a000+2)& (0+255),b
  2822  001692  0E00               	movlw	0
  2823  001694  6FD6               	movwf	(angleToPulse@a000+3)& (0+255),b
  2824                           
  2825                           ;servo.c: 38: long a180 = 6250;
  2826  001696  0E6A               	movlw	106
  2827  001698  0100               	movlb	0	; () banked
  2828  00169A  6FCC               	movwf	angleToPulse@a180& (0+255),b
  2829  00169C  0E18               	movlw	24
  2830  00169E  6FCD               	movwf	(angleToPulse@a180+1)& (0+255),b
  2831  0016A0  0E00               	movlw	0
  2832  0016A2  6FCE               	movwf	(angleToPulse@a180+2)& (0+255),b
  2833  0016A4  0E00               	movlw	0
  2834  0016A6  6FCF               	movwf	(angleToPulse@a180+3)& (0+255),b
  2835                           
  2836                           ; BSR set to: 0
  2837                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  2838  0016A8  C0D3  F0C4         	movff	angleToPulse@a000,??_angleToPulse
  2839  0016AC  C0D4  F0C5         	movff	angleToPulse@a000+1,??_angleToPulse+1
  2840  0016B0  C0D5  F0C6         	movff	angleToPulse@a000+2,??_angleToPulse+2
  2841  0016B4  C0D6  F0C7         	movff	angleToPulse@a000+3,??_angleToPulse+3
  2842  0016B8  0100               	movlb	0	; () banked
  2843  0016BA  1FC4               	comf	??_angleToPulse& (0+255),f,b
  2844  0016BC  1FC5               	comf	(??_angleToPulse+1)& (0+255),f,b
  2845  0016BE  1FC6               	comf	(??_angleToPulse+2)& (0+255),f,b
  2846  0016C0  1FC7               	comf	(??_angleToPulse+3)& (0+255),f,b
  2847  0016C2  2BC4               	incf	??_angleToPulse& (0+255),f,b
  2848  0016C4  0E00               	movlw	0
  2849  0016C6  23C5               	addwfc	(??_angleToPulse+1)& (0+255),f,b
  2850  0016C8  23C6               	addwfc	(??_angleToPulse+2)& (0+255),f,b
  2851  0016CA  23C7               	addwfc	(??_angleToPulse+3)& (0+255),f,b
  2852  0016CC  0100               	movlb	0	; () banked
  2853  0016CE  51CC               	movf	angleToPulse@a180& (0+255),w,b
  2854  0016D0  0100               	movlb	0	; () banked
  2855  0016D2  25C4               	addwf	??_angleToPulse& (0+255),w,b
  2856  0016D4  6E2C               	movwf	___altoft@c,c
  2857  0016D6  0100               	movlb	0	; () banked
  2858  0016D8  51CD               	movf	(angleToPulse@a180+1)& (0+255),w,b
  2859  0016DA  0100               	movlb	0	; () banked
  2860  0016DC  21C5               	addwfc	(??_angleToPulse+1)& (0+255),w,b
  2861  0016DE  6E2D               	movwf	___altoft@c+1,c
  2862  0016E0  0100               	movlb	0	; () banked
  2863  0016E2  51CE               	movf	(angleToPulse@a180+2)& (0+255),w,b
  2864  0016E4  0100               	movlb	0	; () banked
  2865  0016E6  21C6               	addwfc	(??_angleToPulse+2)& (0+255),w,b
  2866  0016E8  6E2E               	movwf	___altoft@c+2,c
  2867  0016EA  0100               	movlb	0	; () banked
  2868  0016EC  51CF               	movf	(angleToPulse@a180+3)& (0+255),w,b
  2869  0016EE  0100               	movlb	0	; () banked
  2870  0016F0  21C7               	addwfc	(??_angleToPulse+3)& (0+255),w,b
  2871  0016F2  6E2F               	movwf	___altoft@c+3,c
  2872  0016F4  EC88  F013         	call	___altoft	;wreg free
  2873  0016F8  C02C  F08F         	movff	?___altoft,___ftmul@f2
  2874  0016FC  C02D  F090         	movff	?___altoft+1,___ftmul@f2+1
  2875  001700  C02E  F091         	movff	?___altoft+2,___ftmul@f2+2
  2876  001704  0E00               	movlw	0
  2877  001706  0100               	movlb	0	; () banked
  2878  001708  6F83               	movwf	___ftdiv@f2& (0+255),b
  2879  00170A  0E34               	movlw	52
  2880  00170C  0100               	movlb	0	; () banked
  2881  00170E  6F84               	movwf	(___ftdiv@f2+1)& (0+255),b
  2882  001710  0E43               	movlw	67
  2883  001712  0100               	movlb	0	; () banked
  2884  001714  6F85               	movwf	(___ftdiv@f2+2)& (0+255),b
  2885  001716  C0C0  F02C         	movff	angleToPulse@angle,___awtoft@c
  2886  00171A  C0C1  F02D         	movff	angleToPulse@angle+1,___awtoft@c+1
  2887  00171E  ECE1  F015         	call	___awtoft	;wreg free
  2888  001722  C02C  F080         	movff	?___awtoft,___ftdiv@f1
  2889  001726  C02D  F081         	movff	?___awtoft+1,___ftdiv@f1+1
  2890  00172A  C02E  F082         	movff	?___awtoft+2,___ftdiv@f1+2
  2891  00172E  EC39  F00D         	call	___ftdiv	;wreg free
  2892  001732  C080  F08C         	movff	?___ftdiv,___ftmul@f1
  2893  001736  C081  F08D         	movff	?___ftdiv+1,___ftmul@f1+1
  2894  00173A  C082  F08E         	movff	?___ftdiv+2,___ftmul@f1+2
  2895  00173E  ECE8  F00B         	call	___ftmul	;wreg free
  2896  001742  C08C  F0A8         	movff	?___ftmul,___ftadd@f2
  2897  001746  C08D  F0A9         	movff	?___ftmul+1,___ftadd@f2+1
  2898  00174A  C08E  F0AA         	movff	?___ftmul+2,___ftadd@f2+2
  2899  00174E  C0D3  F02C         	movff	angleToPulse@a000,___altoft@c
  2900  001752  C0D4  F02D         	movff	angleToPulse@a000+1,___altoft@c+1
  2901  001756  C0D5  F02E         	movff	angleToPulse@a000+2,___altoft@c+2
  2902  00175A  C0D6  F02F         	movff	angleToPulse@a000+3,___altoft@c+3
  2903  00175E  EC88  F013         	call	___altoft	;wreg free
  2904  001762  C02C  F0A5         	movff	?___altoft,___ftadd@f1
  2905  001766  C02D  F0A6         	movff	?___altoft+1,___ftadd@f1+1
  2906  00176A  C02E  F0A7         	movff	?___altoft+2,___ftadd@f1+2
  2907  00176E  ECEB  F007         	call	___ftadd	;wreg free
  2908  001772  C0A5  F0D0         	movff	?___ftadd,_angleToPulse$1338
  2909  001776  C0A6  F0D1         	movff	?___ftadd+1,_angleToPulse$1338+1
  2910  00177A  C0A7  F0D2         	movff	?___ftadd+2,_angleToPulse$1338+2
  2911                           
  2912                           ;servo.c: 40: return a000 + angle/180.0*(a180-a000) + offset;
  2913  00177E  C0C8  F02C         	movff	angleToPulse@offset,___altoft@c
  2914  001782  C0C9  F02D         	movff	angleToPulse@offset+1,___altoft@c+1
  2915  001786  C0CA  F02E         	movff	angleToPulse@offset+2,___altoft@c+2
  2916  00178A  C0CB  F02F         	movff	angleToPulse@offset+3,___altoft@c+3
  2917  00178E  EC88  F013         	call	___altoft	;wreg free
  2918  001792  C02C  F0A8         	movff	?___altoft,___ftadd@f2
  2919  001796  C02D  F0A9         	movff	?___altoft+1,___ftadd@f2+1
  2920  00179A  C02E  F0AA         	movff	?___altoft+2,___ftadd@f2+2
  2921  00179E  C0D0  F0A5         	movff	_angleToPulse$1338,___ftadd@f1
  2922  0017A2  C0D1  F0A6         	movff	_angleToPulse$1338+1,___ftadd@f1+1
  2923  0017A6  C0D2  F0A7         	movff	_angleToPulse$1338+2,___ftadd@f1+2
  2924  0017AA  ECEB  F007         	call	___ftadd	;wreg free
  2925  0017AE  C0A5  F0B1         	movff	?___ftadd,___fttol@f1
  2926  0017B2  C0A6  F0B2         	movff	?___ftadd+1,___fttol@f1+1
  2927  0017B6  C0A7  F0B3         	movff	?___ftadd+2,___fttol@f1+2
  2928  0017BA  EC97  F00C         	call	___fttol	;wreg free
  2929  0017BE  C0B1  F0C0         	movff	?___fttol,?_angleToPulse
  2930  0017C2  C0B2  F0C1         	movff	?___fttol+1,?_angleToPulse+1
  2931  0017C6  C0B3  F0C2         	movff	?___fttol+2,?_angleToPulse+2
  2932  0017CA  C0B4  F0C3         	movff	?___fttol+3,?_angleToPulse+3
  2933  0017CE  0012               	return	
  2934  0017D0                     __end_of_angleToPulse:
  2935                           	opt stack 0
  2936                           tblptru	equ	0xFF8
  2937                           tblptrh	equ	0xFF7
  2938                           tblptrl	equ	0xFF6
  2939                           tablat	equ	0xFF5
  2940                           postinc0	equ	0xFEE
  2941                           wreg	equ	0xFE8
  2942                           postdec1	equ	0xFE5
  2943                           plusw1	equ	0xFE3
  2944                           fsr1l	equ	0xFE1
  2945                           postinc2	equ	0xFDE
  2946                           postdec2	equ	0xFDD
  2947                           plusw2	equ	0xFDB
  2948                           fsr2h	equ	0xFDA
  2949                           fsr2l	equ	0xFD9
  2950                           status	equ	0xFD8
  2951                           
  2952 ;; *************** function ___ftdiv *****************
  2953 ;; Defined at:
  2954 ;;		line 54 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdiv.c"
  2955 ;; Parameters:    Size  Location     Type
  2956 ;;  f1              3    0[BANK0 ] float 
  2957 ;;  f2              3    3[BANK0 ] float 
  2958 ;; Auto vars:     Size  Location     Type
  2959 ;;  f3              3    7[BANK0 ] float 
  2960 ;;  sign            1   11[BANK0 ] unsigned char 
  2961 ;;  exp             1   10[BANK0 ] unsigned char 
  2962 ;;  cntr            1    6[BANK0 ] unsigned char 
  2963 ;; Return value:  Size  Location     Type
  2964 ;;                  3    0[BANK0 ] float 
  2965 ;; Registers used:
  2966 ;;		wreg, status,2, status,0, cstack
  2967 ;; Tracked objects:
  2968 ;;		On entry : 0/0
  2969 ;;		On exit  : 0/0
  2970 ;;		Unchanged: 0/0
  2971 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  2972 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2973 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2974 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2975 ;;      Totals:         3      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  2976 ;;Total ram usage:       15 bytes
  2977 ;; Hardware stack levels used:    1
  2978 ;; Hardware stack levels required when called:    4
  2979 ;; This function calls:
  2980 ;;		___ftpack
  2981 ;; This function is called by:
  2982 ;;		_sortBattery
  2983 ;;		_angleToPulse
  2984 ;;		_testFrequency
  2985 ;; This function uses a non-reentrant model
  2986 ;;
  2987                           
  2988                           	psect	text8
  2989  001A72                     __ptext8:
  2990                           	opt stack 0
  2991  001A72                     ___ftdiv:
  2992                           	opt stack 23
  2993                           
  2994                           ;incstack = 0
  2995  001A72  C082  F036         	movff	___ftdiv@f1+2,??___ftdiv
  2996  001A76  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  2997  001A78  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  2998  001A7A  0100               	movlb	0	; () banked
  2999  001A7C  3581               	rlcf	(___ftdiv@f1+1)& (0+255),w,b
  3000  001A7E  3636               	rlcf	??___ftdiv& (0+255),f,c
  3001  001A80  E301               	bnc	u4551
  3002  001A82  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  3003  001A84                     u4551:
  3004  001A84  5036               	movf	??___ftdiv,w,c
  3005  001A86  0100               	movlb	0	; () banked
  3006  001A88  6F8A               	movwf	___ftdiv@exp& (0+255),b
  3007  001A8A  0100               	movlb	0	; () banked
  3008  001A8C  518A               	movf	___ftdiv@exp& (0+255),w,b
  3009  001A8E  A4D8               	btfss	status,2,c
  3010  001A90  D00A               	goto	l5045
  3011                           
  3012                           ; BSR set to: 0
  3013  001A92  0E00               	movlw	0
  3014  001A94  0100               	movlb	0	; () banked
  3015  001A96  6F80               	movwf	?___ftdiv& (0+255),b
  3016  001A98  0E00               	movlw	0
  3017  001A9A  0100               	movlb	0	; () banked
  3018  001A9C  6F81               	movwf	(?___ftdiv+1)& (0+255),b
  3019  001A9E  0E00               	movlw	0
  3020  001AA0  0100               	movlb	0	; () banked
  3021  001AA2  6F82               	movwf	(?___ftdiv+2)& (0+255),b
  3022                           
  3023                           ; BSR set to: 0
  3024  001AA4  0012               	return	
  3025  001AA6                     l5045:
  3026                           
  3027                           ; BSR set to: 0
  3028  001AA6  C085  F036         	movff	___ftdiv@f2+2,??___ftdiv
  3029  001AAA  6A37               	clrf	(??___ftdiv+1)& (0+255),c
  3030  001AAC  6A38               	clrf	(??___ftdiv+2)& (0+255),c
  3031  001AAE  0100               	movlb	0	; () banked
  3032  001AB0  3584               	rlcf	(___ftdiv@f2+1)& (0+255),w,b
  3033  001AB2  3636               	rlcf	??___ftdiv& (0+255),f,c
  3034  001AB4  E301               	bnc	u4571
  3035  001AB6  8037               	bsf	(??___ftdiv+1)& (0+255),0,c
  3036  001AB8                     u4571:
  3037  001AB8  5036               	movf	??___ftdiv,w,c
  3038  001ABA  0100               	movlb	0	; () banked
  3039  001ABC  6F8B               	movwf	___ftdiv@sign& (0+255),b
  3040  001ABE  0100               	movlb	0	; () banked
  3041  001AC0  518B               	movf	___ftdiv@sign& (0+255),w,b
  3042  001AC2  A4D8               	btfss	status,2,c
  3043  001AC4  D00A               	goto	l5051
  3044                           
  3045                           ; BSR set to: 0
  3046  001AC6  0E00               	movlw	0
  3047  001AC8  0100               	movlb	0	; () banked
  3048  001ACA  6F80               	movwf	?___ftdiv& (0+255),b
  3049  001ACC  0E00               	movlw	0
  3050  001ACE  0100               	movlb	0	; () banked
  3051  001AD0  6F81               	movwf	(?___ftdiv+1)& (0+255),b
  3052  001AD2  0E00               	movlw	0
  3053  001AD4  0100               	movlb	0	; () banked
  3054  001AD6  6F82               	movwf	(?___ftdiv+2)& (0+255),b
  3055                           
  3056                           ; BSR set to: 0
  3057  001AD8  0012               	return	
  3058  001ADA                     l5051:
  3059                           
  3060                           ; BSR set to: 0
  3061  001ADA  0E00               	movlw	0
  3062  001ADC  0100               	movlb	0	; () banked
  3063  001ADE  6F87               	movwf	___ftdiv@f3& (0+255),b
  3064  001AE0  0E00               	movlw	0
  3065  001AE2  0100               	movlb	0	; () banked
  3066  001AE4  6F88               	movwf	(___ftdiv@f3+1)& (0+255),b
  3067  001AE6  0E00               	movlw	0
  3068  001AE8  0100               	movlb	0	; () banked
  3069  001AEA  6F89               	movwf	(___ftdiv@f3+2)& (0+255),b
  3070                           
  3071                           ; BSR set to: 0
  3072  001AEC  0100               	movlb	0	; () banked
  3073  001AEE  518B               	movf	___ftdiv@sign& (0+255),w,b
  3074  001AF0  0F89               	addlw	137
  3075  001AF2  0100               	movlb	0	; () banked
  3076  001AF4  5F8A               	subwf	___ftdiv@exp& (0+255),f,b
  3077                           
  3078                           ; BSR set to: 0
  3079  001AF6  C082  F08B         	movff	___ftdiv@f1+2,___ftdiv@sign
  3080                           
  3081                           ; BSR set to: 0
  3082  001AFA  0100               	movlb	0	; () banked
  3083  001AFC  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3084  001AFE  0100               	movlb	0	; () banked
  3085  001B00  1B8B               	xorwf	___ftdiv@sign& (0+255),f,b
  3086                           
  3087                           ; BSR set to: 0
  3088  001B02  0E80               	movlw	128
  3089  001B04  0100               	movlb	0	; () banked
  3090  001B06  178B               	andwf	___ftdiv@sign& (0+255),f,b
  3091                           
  3092                           ; BSR set to: 0
  3093  001B08  0100               	movlb	0	; () banked
  3094  001B0A  8F81               	bsf	(___ftdiv@f1+1)& (0+255),7,b
  3095                           
  3096                           ; BSR set to: 0
  3097  001B0C  0EFF               	movlw	255
  3098  001B0E  0100               	movlb	0	; () banked
  3099  001B10  1780               	andwf	___ftdiv@f1& (0+255),f,b
  3100  001B12  0EFF               	movlw	255
  3101  001B14  0100               	movlb	0	; () banked
  3102  001B16  1781               	andwf	(___ftdiv@f1+1)& (0+255),f,b
  3103  001B18  0E00               	movlw	0
  3104  001B1A  0100               	movlb	0	; () banked
  3105  001B1C  1782               	andwf	(___ftdiv@f1+2)& (0+255),f,b
  3106                           
  3107                           ; BSR set to: 0
  3108  001B1E  0100               	movlb	0	; () banked
  3109  001B20  8F84               	bsf	(___ftdiv@f2+1)& (0+255),7,b
  3110                           
  3111                           ; BSR set to: 0
  3112  001B22  0EFF               	movlw	255
  3113  001B24  0100               	movlb	0	; () banked
  3114  001B26  1783               	andwf	___ftdiv@f2& (0+255),f,b
  3115  001B28  0EFF               	movlw	255
  3116  001B2A  0100               	movlb	0	; () banked
  3117  001B2C  1784               	andwf	(___ftdiv@f2+1)& (0+255),f,b
  3118  001B2E  0E00               	movlw	0
  3119  001B30  0100               	movlb	0	; () banked
  3120  001B32  1785               	andwf	(___ftdiv@f2+2)& (0+255),f,b
  3121                           
  3122                           ; BSR set to: 0
  3123  001B34  0E18               	movlw	24
  3124  001B36  0100               	movlb	0	; () banked
  3125  001B38  6F86               	movwf	___ftdiv@cntr& (0+255),b
  3126  001B3A                     l5071:
  3127                           
  3128                           ; BSR set to: 0
  3129  001B3A  0100               	movlb	0	; () banked
  3130  001B3C  90D8               	bcf	status,0,c
  3131  001B3E  3787               	rlcf	___ftdiv@f3& (0+255),f,b
  3132  001B40  3788               	rlcf	(___ftdiv@f3+1)& (0+255),f,b
  3133  001B42  3789               	rlcf	(___ftdiv@f3+2)& (0+255),f,b
  3134                           
  3135                           ; BSR set to: 0
  3136  001B44  0100               	movlb	0	; () banked
  3137  001B46  5183               	movf	___ftdiv@f2& (0+255),w,b
  3138  001B48  0100               	movlb	0	; () banked
  3139  001B4A  5D80               	subwf	___ftdiv@f1& (0+255),w,b
  3140  001B4C  0100               	movlb	0	; () banked
  3141  001B4E  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3142  001B50  0100               	movlb	0	; () banked
  3143  001B52  5981               	subwfb	(___ftdiv@f1+1)& (0+255),w,b
  3144  001B54  0100               	movlb	0	; () banked
  3145  001B56  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3146  001B58  0100               	movlb	0	; () banked
  3147  001B5A  5982               	subwfb	(___ftdiv@f1+2)& (0+255),w,b
  3148  001B5C  A0D8               	btfss	status,0,c
  3149  001B5E  D00E               	goto	l1041
  3150                           
  3151                           ; BSR set to: 0
  3152  001B60  0100               	movlb	0	; () banked
  3153  001B62  5183               	movf	___ftdiv@f2& (0+255),w,b
  3154  001B64  0100               	movlb	0	; () banked
  3155  001B66  5F80               	subwf	___ftdiv@f1& (0+255),f,b
  3156  001B68  0100               	movlb	0	; () banked
  3157  001B6A  5184               	movf	(___ftdiv@f2+1)& (0+255),w,b
  3158  001B6C  0100               	movlb	0	; () banked
  3159  001B6E  5B81               	subwfb	(___ftdiv@f1+1)& (0+255),f,b
  3160  001B70  0100               	movlb	0	; () banked
  3161  001B72  5185               	movf	(___ftdiv@f2+2)& (0+255),w,b
  3162  001B74  0100               	movlb	0	; () banked
  3163  001B76  5B82               	subwfb	(___ftdiv@f1+2)& (0+255),f,b
  3164                           
  3165                           ; BSR set to: 0
  3166  001B78  0100               	movlb	0	; () banked
  3167  001B7A  8187               	bsf	___ftdiv@f3& (0+255),0,b
  3168  001B7C                     l1041:
  3169                           
  3170                           ; BSR set to: 0
  3171  001B7C  0100               	movlb	0	; () banked
  3172  001B7E  90D8               	bcf	status,0,c
  3173  001B80  3780               	rlcf	___ftdiv@f1& (0+255),f,b
  3174  001B82  3781               	rlcf	(___ftdiv@f1+1)& (0+255),f,b
  3175  001B84  3782               	rlcf	(___ftdiv@f1+2)& (0+255),f,b
  3176                           
  3177                           ; BSR set to: 0
  3178  001B86  0100               	movlb	0	; () banked
  3179  001B88  2F86               	decfsz	___ftdiv@cntr& (0+255),f,b
  3180  001B8A  D7D7               	goto	l5071
  3181                           
  3182                           ; BSR set to: 0
  3183                           
  3184                           ; BSR set to: 0
  3185  001B8C  C087  F024         	movff	___ftdiv@f3,___ftpack@arg
  3186  001B90  C088  F025         	movff	___ftdiv@f3+1,___ftpack@arg+1
  3187  001B94  C089  F026         	movff	___ftdiv@f3+2,___ftpack@arg+2
  3188  001B98  C08A  F027         	movff	___ftdiv@exp,___ftpack@exp
  3189  001B9C  C08B  F028         	movff	___ftdiv@sign,___ftpack@sign
  3190  001BA0  ECA3  F010         	call	___ftpack	;wreg free
  3191  001BA4  C024  F080         	movff	?___ftpack,?___ftdiv
  3192  001BA8  C025  F081         	movff	?___ftpack+1,?___ftdiv+1
  3193  001BAC  C026  F082         	movff	?___ftpack+2,?___ftdiv+2
  3194  001BB0  0012               	return	
  3195  001BB2                     __end_of___ftdiv:
  3196                           	opt stack 0
  3197                           tblptru	equ	0xFF8
  3198                           tblptrh	equ	0xFF7
  3199                           tblptrl	equ	0xFF6
  3200                           tablat	equ	0xFF5
  3201                           postinc0	equ	0xFEE
  3202                           wreg	equ	0xFE8
  3203                           postdec1	equ	0xFE5
  3204                           plusw1	equ	0xFE3
  3205                           fsr1l	equ	0xFE1
  3206                           postinc2	equ	0xFDE
  3207                           postdec2	equ	0xFDD
  3208                           plusw2	equ	0xFDB
  3209                           fsr2h	equ	0xFDA
  3210                           fsr2l	equ	0xFD9
  3211                           status	equ	0xFD8
  3212                           
  3213 ;; *************** function ___awtoft *****************
  3214 ;; Defined at:
  3215 ;;		line 32 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awtoft.c"
  3216 ;; Parameters:    Size  Location     Type
  3217 ;;  c               2   43[COMRAM] int 
  3218 ;; Auto vars:     Size  Location     Type
  3219 ;;  sign            1   46[COMRAM] unsigned char 
  3220 ;; Return value:  Size  Location     Type
  3221 ;;                  3   43[COMRAM] float 
  3222 ;; Registers used:
  3223 ;;		wreg, status,2, status,0, cstack
  3224 ;; Tracked objects:
  3225 ;;		On entry : 0/0
  3226 ;;		On exit  : 0/0
  3227 ;;		Unchanged: 0/0
  3228 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3229 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3230 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3231 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3232 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3233 ;;Total ram usage:        4 bytes
  3234 ;; Hardware stack levels used:    1
  3235 ;; Hardware stack levels required when called:    4
  3236 ;; This function calls:
  3237 ;;		___ftpack
  3238 ;; This function is called by:
  3239 ;;		_angleToPulse
  3240 ;; This function uses a non-reentrant model
  3241 ;;
  3242                           
  3243                           	psect	text9
  3244  002BC2                     __ptext9:
  3245                           	opt stack 0
  3246  002BC2                     ___awtoft:
  3247                           	opt stack 23
  3248                           
  3249                           ;incstack = 0
  3250  002BC2  0E00               	movlw	0
  3251  002BC4  6E2F               	movwf	___awtoft@sign,c
  3252  002BC6  AE2D               	btfss	___awtoft@c+1,7,c
  3253  002BC8  D006               	goto	l5221
  3254  002BCA  6C2C               	negf	___awtoft@c,c
  3255  002BCC  1E2D               	comf	___awtoft@c+1,f,c
  3256  002BCE  B0D8               	btfsc	status,0,c
  3257  002BD0  2A2D               	incf	___awtoft@c+1,f,c
  3258  002BD2  0E01               	movlw	1
  3259  002BD4  6E2F               	movwf	___awtoft@sign,c
  3260  002BD6                     l5221:
  3261  002BD6  C02C  F024         	movff	___awtoft@c,___ftpack@arg
  3262  002BDA  C02D  F025         	movff	___awtoft@c+1,___ftpack@arg+1
  3263  002BDE  6A26               	clrf	___ftpack@arg+2,c
  3264  002BE0  0E8E               	movlw	142
  3265  002BE2  6E27               	movwf	___ftpack@exp,c
  3266  002BE4  C02F  F028         	movff	___awtoft@sign,___ftpack@sign
  3267  002BE8  ECA3  F010         	call	___ftpack	;wreg free
  3268  002BEC  C024  F02C         	movff	?___ftpack,?___awtoft
  3269  002BF0  C025  F02D         	movff	?___ftpack+1,?___awtoft+1
  3270  002BF4  C026  F02E         	movff	?___ftpack+2,?___awtoft+2
  3271  002BF8  0012               	return	
  3272  002BFA                     __end_of___awtoft:
  3273                           	opt stack 0
  3274                           tblptru	equ	0xFF8
  3275                           tblptrh	equ	0xFF7
  3276                           tblptrl	equ	0xFF6
  3277                           tablat	equ	0xFF5
  3278                           postinc0	equ	0xFEE
  3279                           wreg	equ	0xFE8
  3280                           postdec1	equ	0xFE5
  3281                           plusw1	equ	0xFE3
  3282                           fsr1l	equ	0xFE1
  3283                           postinc2	equ	0xFDE
  3284                           postdec2	equ	0xFDD
  3285                           plusw2	equ	0xFDB
  3286                           fsr2h	equ	0xFDA
  3287                           fsr2l	equ	0xFD9
  3288                           status	equ	0xFD8
  3289                           
  3290 ;; *************** function ___altoft *****************
  3291 ;; Defined at:
  3292 ;;		line 42 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\altoft.c"
  3293 ;; Parameters:    Size  Location     Type
  3294 ;;  c               4   43[COMRAM] long 
  3295 ;; Auto vars:     Size  Location     Type
  3296 ;;  sign            1   52[COMRAM] unsigned char 
  3297 ;;  exp             1   51[COMRAM] unsigned char 
  3298 ;; Return value:  Size  Location     Type
  3299 ;;                  3   43[COMRAM] float 
  3300 ;; Registers used:
  3301 ;;		wreg, status,2, status,0, cstack
  3302 ;; Tracked objects:
  3303 ;;		On entry : 0/0
  3304 ;;		On exit  : 0/0
  3305 ;;		Unchanged: 0/0
  3306 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3307 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3308 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3309 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3310 ;;      Totals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3311 ;;Total ram usage:       10 bytes
  3312 ;; Hardware stack levels used:    1
  3313 ;; Hardware stack levels required when called:    4
  3314 ;; This function calls:
  3315 ;;		___ftpack
  3316 ;; This function is called by:
  3317 ;;		_sortBattery
  3318 ;;		_angleToPulse
  3319 ;;		_testFrequency
  3320 ;; This function uses a non-reentrant model
  3321 ;;
  3322                           
  3323                           	psect	text10
  3324  002710                     __ptext10:
  3325                           	opt stack 0
  3326  002710                     ___altoft:
  3327                           	opt stack 23
  3328                           
  3329                           ;incstack = 0
  3330  002710  0E00               	movlw	0
  3331  002712  6E35               	movwf	___altoft@sign,c
  3332  002714  0E8E               	movlw	142
  3333  002716  6E34               	movwf	___altoft@exp,c
  3334  002718  AE2F               	btfss	___altoft@c+3,7,c
  3335  00271A  D011               	goto	l4963
  3336  00271C  1E2F               	comf	___altoft@c+3,f,c
  3337  00271E  1E2E               	comf	___altoft@c+2,f,c
  3338  002720  1E2D               	comf	___altoft@c+1,f,c
  3339  002722  6C2C               	negf	___altoft@c,c
  3340  002724  0E00               	movlw	0
  3341  002726  222D               	addwfc	___altoft@c+1,f,c
  3342  002728  222E               	addwfc	___altoft@c+2,f,c
  3343  00272A  222F               	addwfc	___altoft@c+3,f,c
  3344  00272C  0E01               	movlw	1
  3345  00272E  6E35               	movwf	___altoft@sign,c
  3346  002730  D006               	goto	l4963
  3347  002732                     l4961:
  3348  002732  90D8               	bcf	status,0,c
  3349  002734  322F               	rrcf	___altoft@c+3,f,c
  3350  002736  322E               	rrcf	___altoft@c+2,f,c
  3351  002738  322D               	rrcf	___altoft@c+1,f,c
  3352  00273A  322C               	rrcf	___altoft@c,f,c
  3353  00273C  2A34               	incf	___altoft@exp,f,c
  3354  00273E                     l4963:
  3355  00273E  0E00               	movlw	0
  3356  002740  142C               	andwf	___altoft@c,w,c
  3357  002742  6E30               	movwf	??___altoft& (0+255),c
  3358  002744  0E00               	movlw	0
  3359  002746  142D               	andwf	___altoft@c+1,w,c
  3360  002748  6E31               	movwf	(??___altoft+1)& (0+255),c
  3361  00274A  0E00               	movlw	0
  3362  00274C  142E               	andwf	___altoft@c+2,w,c
  3363  00274E  6E32               	movwf	(??___altoft+2)& (0+255),c
  3364  002750  0EFF               	movlw	255
  3365  002752  142F               	andwf	___altoft@c+3,w,c
  3366  002754  6E33               	movwf	(??___altoft+3)& (0+255),c
  3367  002756  5030               	movf	??___altoft,w,c
  3368  002758  1031               	iorwf	??___altoft+1,w,c
  3369  00275A  1032               	iorwf	??___altoft+2,w,c
  3370  00275C  1033               	iorwf	??___altoft+3,w,c
  3371  00275E  A4D8               	btfss	status,2,c
  3372  002760  D7E8               	goto	l4961
  3373  002762  C02C  F024         	movff	___altoft@c,___ftpack@arg
  3374  002766  C02D  F025         	movff	___altoft@c+1,___ftpack@arg+1
  3375  00276A  C02E  F026         	movff	___altoft@c+2,___ftpack@arg+2
  3376  00276E  C034  F027         	movff	___altoft@exp,___ftpack@exp
  3377  002772  C035  F028         	movff	___altoft@sign,___ftpack@sign
  3378  002776  ECA3  F010         	call	___ftpack	;wreg free
  3379  00277A  C024  F02C         	movff	?___ftpack,?___altoft
  3380  00277E  C025  F02D         	movff	?___ftpack+1,?___altoft+1
  3381  002782  C026  F02E         	movff	?___ftpack+2,?___altoft+2
  3382  002786  0012               	return	
  3383  002788                     __end_of___altoft:
  3384                           	opt stack 0
  3385                           tblptru	equ	0xFF8
  3386                           tblptrh	equ	0xFF7
  3387                           tblptrl	equ	0xFF6
  3388                           tablat	equ	0xFF5
  3389                           postinc0	equ	0xFEE
  3390                           wreg	equ	0xFE8
  3391                           postdec1	equ	0xFE5
  3392                           plusw1	equ	0xFE3
  3393                           fsr1l	equ	0xFE1
  3394                           postinc2	equ	0xFDE
  3395                           postdec2	equ	0xFDD
  3396                           plusw2	equ	0xFDB
  3397                           fsr2h	equ	0xFDA
  3398                           fsr2l	equ	0xFD9
  3399                           status	equ	0xFD8
  3400                           
  3401 ;; *************** function _initTimer *****************
  3402 ;; Defined at:
  3403 ;;		line 52 in file "timer.c"
  3404 ;; Parameters:    Size  Location     Type
  3405 ;;  timer           2   35[COMRAM] int 
  3406 ;; Auto vars:     Size  Location     Type
  3407 ;;		None
  3408 ;; Return value:  Size  Location     Type
  3409 ;;                  1    wreg      void 
  3410 ;; Registers used:
  3411 ;;		wreg, status,2, status,0
  3412 ;; Tracked objects:
  3413 ;;		On entry : 0/0
  3414 ;;		On exit  : 0/0
  3415 ;;		Unchanged: 0/0
  3416 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3417 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3418 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3419 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3420 ;;      Totals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3421 ;;Total ram usage:        4 bytes
  3422 ;; Hardware stack levels used:    1
  3423 ;; Hardware stack levels required when called:    3
  3424 ;; This function calls:
  3425 ;;		Nothing
  3426 ;; This function is called by:
  3427 ;;		_initServo
  3428 ;;		_testFrequency
  3429 ;; This function uses a non-reentrant model
  3430 ;;
  3431                           
  3432                           	psect	text11
  3433  002AF6                     __ptext11:
  3434                           	opt stack 0
  3435  002AF6                     _initTimer:
  3436                           	opt stack 25
  3437                           
  3438                           ;timer.c: 53: switch(timer){
  3439                           
  3440                           ;incstack = 0
  3441  002AF6  D00D               	goto	l5793
  3442  002AF8                     l5777:
  3443                           
  3444                           ;timer.c: 55: T0CON = 0;
  3445  002AF8  0E00               	movlw	0
  3446  002AFA  6ED5               	movwf	4053,c	;volatile
  3447                           
  3448                           ;timer.c: 56: T0CON |= 1<<3;
  3449  002AFC  86D5               	bsf	4053,3,c	;volatile
  3450                           
  3451                           ;timer.c: 58: TMR0IE = 1;
  3452  002AFE  8AF2               	bsf	intcon,5,c	;volatile
  3453                           
  3454                           ;timer.c: 59: break;
  3455  002B00  D01A               	goto	l368
  3456  002B02                     l5783:
  3457                           
  3458                           ;timer.c: 61: T1CON = 0;
  3459  002B02  0E00               	movlw	0
  3460  002B04  6ECD               	movwf	4045,c	;volatile
  3461                           
  3462                           ;timer.c: 63: TMR1IE = 1;
  3463  002B06  809D               	bsf	3997,0,c	;volatile
  3464                           
  3465                           ;timer.c: 64: break;
  3466  002B08  D016               	goto	l368
  3467  002B0A                     l5787:
  3468                           
  3469                           ;timer.c: 66: T3CON = 0;
  3470  002B0A  0E00               	movlw	0
  3471  002B0C  6EB1               	movwf	4017,c	;volatile
  3472                           
  3473                           ;timer.c: 67: TMR3IE = 1;
  3474  002B0E  82A0               	bsf	4000,1,c	;volatile
  3475                           
  3476                           ;timer.c: 69: }
  3477                           
  3478                           ;timer.c: 68: break;
  3479  002B10  D012               	goto	l368
  3480  002B12                     l5793:
  3481  002B12  C024  F026         	movff	initTimer@timer,??_initTimer
  3482  002B16  C025  F027         	movff	initTimer@timer+1,??_initTimer+1
  3483                           
  3484                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3485                           ; Switch size 1, requested type "space"
  3486                           ; Number of cases is 1, Range of values is 0 to 0
  3487                           ; switch strategies available:
  3488                           ; Name         Instructions Cycles
  3489                           ; simple_byte            4     3 (average)
  3490                           ;	Chosen strategy is simple_byte
  3491  002B1A  5027               	movf	??_initTimer+1,w,c
  3492  002B1C  0A00               	xorlw	0	; case 0
  3493  002B1E  A4D8               	btfss	status,2,c
  3494  002B20  D00A               	goto	l368
  3495                           
  3496                           ; Switch size 1, requested type "space"
  3497                           ; Number of cases is 3, Range of values is 0 to 3
  3498                           ; switch strategies available:
  3499                           ; Name         Instructions Cycles
  3500                           ; simple_byte           10     6 (average)
  3501                           ;	Chosen strategy is simple_byte
  3502  002B22  5026               	movf	??_initTimer,w,c
  3503  002B24  0A00               	xorlw	0	; case 0
  3504  002B26  B4D8               	btfsc	status,2,c
  3505  002B28  D7E7               	goto	l5777
  3506  002B2A  0A01               	xorlw	1	; case 1
  3507  002B2C  B4D8               	btfsc	status,2,c
  3508  002B2E  D7E9               	goto	l5783
  3509  002B30  0A02               	xorlw	2	; case 3
  3510  002B32  B4D8               	btfsc	status,2,c
  3511  002B34  D7EA               	goto	l5787
  3512  002B36                     l368:
  3513                           
  3514                           ;timer.c: 70: PEIE = 1;
  3515  002B36  8CF2               	bsf	intcon,6,c	;volatile
  3516                           
  3517                           ;timer.c: 71: (INTCONbits.GIE = 1);
  3518  002B38  8EF2               	bsf	intcon,7,c	;volatile
  3519  002B3A  0012               	return		;funcret
  3520  002B3C                     __end_of_initTimer:
  3521                           	opt stack 0
  3522                           tblptru	equ	0xFF8
  3523                           tblptrh	equ	0xFF7
  3524                           tblptrl	equ	0xFF6
  3525                           tablat	equ	0xFF5
  3526                           intcon	equ	0xFF2
  3527                           postinc0	equ	0xFEE
  3528                           wreg	equ	0xFE8
  3529                           postdec1	equ	0xFE5
  3530                           plusw1	equ	0xFE3
  3531                           fsr1l	equ	0xFE1
  3532                           postinc2	equ	0xFDE
  3533                           postdec2	equ	0xFDD
  3534                           plusw2	equ	0xFDB
  3535                           fsr2h	equ	0xFDA
  3536                           fsr2l	equ	0xFD9
  3537                           status	equ	0xFD8
  3538                           
  3539 ;; *************** function _digitalWrite *****************
  3540 ;; Defined at:
  3541 ;;		line 53 in file "iopin.c"
  3542 ;; Parameters:    Size  Location     Type
  3543 ;;  port            2   35[COMRAM] int 
  3544 ;;  pin             2   37[COMRAM] int 
  3545 ;;  val             2   39[COMRAM] int 
  3546 ;; Auto vars:     Size  Location     Type
  3547 ;;		None
  3548 ;; Return value:  Size  Location     Type
  3549 ;;                  1    wreg      void 
  3550 ;; Registers used:
  3551 ;;		wreg, status,2, status,0
  3552 ;; Tracked objects:
  3553 ;;		On entry : 0/0
  3554 ;;		On exit  : 0/0
  3555 ;;		Unchanged: 0/0
  3556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3557 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3558 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3559 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3560 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3561 ;;Total ram usage:        9 bytes
  3562 ;; Hardware stack levels used:    1
  3563 ;; Hardware stack levels required when called:    3
  3564 ;; This function calls:
  3565 ;;		Nothing
  3566 ;; This function is called by:
  3567 ;;		_main
  3568 ;;		_sortBattery
  3569 ;; This function uses a non-reentrant model
  3570 ;;
  3571                           
  3572                           	psect	text12
  3573  0021F4                     __ptext12:
  3574                           	opt stack 0
  3575  0021F4                     _digitalWrite:
  3576                           	opt stack 26
  3577                           
  3578                           ;iopin.c: 54: pin = 1 << pin;
  3579                           
  3580                           ;incstack = 0
  3581  0021F4  C026  F02A         	movff	digitalWrite@pin,??_digitalWrite
  3582  0021F8  0E01               	movlw	1
  3583  0021FA  6E2B               	movwf	(??_digitalWrite+1)& (0+255),c
  3584  0021FC  0E00               	movlw	0
  3585  0021FE  6E2C               	movwf	(??_digitalWrite+2)& (0+255),c
  3586  002200  2A2A               	incf	??_digitalWrite,f,c
  3587  002202  D003               	goto	u5614
  3588  002204                     u5615:
  3589  002204  90D8               	bcf	status,0,c
  3590  002206  362B               	rlcf	??_digitalWrite+1,f,c
  3591  002208  362C               	rlcf	??_digitalWrite+2,f,c
  3592  00220A                     u5614:
  3593  00220A  2E2A               	decfsz	??_digitalWrite,f,c
  3594  00220C  D7FB               	goto	u5615
  3595  00220E  C02B  F026         	movff	??_digitalWrite+1,digitalWrite@pin
  3596  002212  C02C  F027         	movff	??_digitalWrite+2,digitalWrite@pin+1
  3597                           
  3598                           ;iopin.c: 55: if(val == 0){
  3599  002216  5028               	movf	digitalWrite@val,w,c
  3600  002218  1029               	iorwf	digitalWrite@val+1,w,c
  3601  00221A  A4D8               	btfss	status,2,c
  3602  00221C  D02B               	goto	l5849
  3603                           
  3604                           ;iopin.c: 56: pin ^= 0xff;
  3605  00221E  0EFF               	movlw	255
  3606  002220  1A26               	xorwf	digitalWrite@pin,f,c
  3607                           
  3608                           ;iopin.c: 57: }
  3609                           ;iopin.c: 59: switch(port){
  3610  002222  D028               	goto	l5849
  3611  002224                     l5825:
  3612  002224  0428               	decf	digitalWrite@val,w,c
  3613  002226  1029               	iorwf	digitalWrite@val+1,w,c
  3614  002228  A4D8               	btfss	status,2,c
  3615  00222A  D003               	goto	l5829
  3616  00222C  5026               	movf	digitalWrite@pin,w,c
  3617  00222E  1289               	iorwf	3977,f,c	;volatile
  3618  002230  0012               	return	
  3619  002232                     l5829:
  3620                           
  3621                           ;iopin.c: 61: else LATA &= pin;
  3622  002232  5026               	movf	digitalWrite@pin,w,c
  3623  002234  1689               	andwf	3977,f,c	;volatile
  3624                           
  3625                           ;iopin.c: 62: break;
  3626  002236  0012               	return	
  3627  002238                     l5831:
  3628  002238  0428               	decf	digitalWrite@val,w,c
  3629  00223A  1029               	iorwf	digitalWrite@val+1,w,c
  3630  00223C  A4D8               	btfss	status,2,c
  3631  00223E  D003               	goto	l5835
  3632  002240  5026               	movf	digitalWrite@pin,w,c
  3633  002242  128A               	iorwf	3978,f,c	;volatile
  3634  002244  0012               	return	
  3635  002246                     l5835:
  3636                           
  3637                           ;iopin.c: 64: else LATB &= pin;
  3638  002246  5026               	movf	digitalWrite@pin,w,c
  3639  002248  168A               	andwf	3978,f,c	;volatile
  3640                           
  3641                           ;iopin.c: 65: break;
  3642  00224A  0012               	return	
  3643  00224C                     l5837:
  3644  00224C  0428               	decf	digitalWrite@val,w,c
  3645  00224E  1029               	iorwf	digitalWrite@val+1,w,c
  3646  002250  A4D8               	btfss	status,2,c
  3647  002252  D003               	goto	l5841
  3648  002254  5026               	movf	digitalWrite@pin,w,c
  3649  002256  128B               	iorwf	3979,f,c	;volatile
  3650  002258  0012               	return	
  3651  00225A                     l5841:
  3652                           
  3653                           ;iopin.c: 67: else LATC &= pin;
  3654  00225A  5026               	movf	digitalWrite@pin,w,c
  3655  00225C  168B               	andwf	3979,f,c	;volatile
  3656                           
  3657                           ;iopin.c: 68: break;
  3658  00225E  0012               	return	
  3659  002260                     l5843:
  3660  002260  0428               	decf	digitalWrite@val,w,c
  3661  002262  1029               	iorwf	digitalWrite@val+1,w,c
  3662  002264  A4D8               	btfss	status,2,c
  3663  002266  D003               	goto	l5847
  3664  002268  5026               	movf	digitalWrite@pin,w,c
  3665  00226A  128C               	iorwf	3980,f,c	;volatile
  3666  00226C  0012               	return	
  3667  00226E                     l5847:
  3668                           
  3669                           ;iopin.c: 70: else LATD &= pin;
  3670  00226E  5026               	movf	digitalWrite@pin,w,c
  3671  002270  168C               	andwf	3980,f,c	;volatile
  3672                           
  3673                           ;iopin.c: 71: }
  3674  002272  0012               	return	
  3675  002274                     l5849:
  3676  002274  C024  F02A         	movff	digitalWrite@port,??_digitalWrite
  3677  002278  C025  F02B         	movff	digitalWrite@port+1,??_digitalWrite+1
  3678                           
  3679                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3680                           ; Switch size 1, requested type "space"
  3681                           ; Number of cases is 1, Range of values is 0 to 0
  3682                           ; switch strategies available:
  3683                           ; Name         Instructions Cycles
  3684                           ; simple_byte            4     3 (average)
  3685                           ;	Chosen strategy is simple_byte
  3686  00227C  502B               	movf	??_digitalWrite+1,w,c
  3687  00227E  0A00               	xorlw	0	; case 0
  3688  002280  A4D8               	btfss	status,2,c
  3689  002282  0012               	return	
  3690                           
  3691                           ; Switch size 1, requested type "space"
  3692                           ; Number of cases is 4, Range of values is 0 to 3
  3693                           ; switch strategies available:
  3694                           ; Name         Instructions Cycles
  3695                           ; simple_byte           13     7 (average)
  3696                           ;	Chosen strategy is simple_byte
  3697  002284  502A               	movf	??_digitalWrite,w,c
  3698  002286  0A00               	xorlw	0	; case 0
  3699  002288  B4D8               	btfsc	status,2,c
  3700  00228A  D7CC               	goto	l5825
  3701  00228C  0A01               	xorlw	1	; case 1
  3702  00228E  B4D8               	btfsc	status,2,c
  3703  002290  D7D3               	goto	l5831
  3704  002292  0A03               	xorlw	3	; case 2
  3705  002294  B4D8               	btfsc	status,2,c
  3706  002296  D7DA               	goto	l5837
  3707  002298  0A01               	xorlw	1	; case 3
  3708  00229A  A4D8               	btfss	status,2,c
  3709  00229C  0012               	return	
  3710  00229E  D7E0               	goto	l5843
  3711  0022A0                     __end_of_digitalWrite:
  3712                           	opt stack 0
  3713                           tblptru	equ	0xFF8
  3714                           tblptrh	equ	0xFF7
  3715                           tblptrl	equ	0xFF6
  3716                           tablat	equ	0xFF5
  3717                           intcon	equ	0xFF2
  3718                           postinc0	equ	0xFEE
  3719                           wreg	equ	0xFE8
  3720                           postdec1	equ	0xFE5
  3721                           plusw1	equ	0xFE3
  3722                           fsr1l	equ	0xFE1
  3723                           postinc2	equ	0xFDE
  3724                           postdec2	equ	0xFDD
  3725                           plusw2	equ	0xFDB
  3726                           fsr2h	equ	0xFDA
  3727                           fsr2l	equ	0xFD9
  3728                           status	equ	0xFD8
  3729                           
  3730 ;; *************** function _digitalRead *****************
  3731 ;; Defined at:
  3732 ;;		line 43 in file "iopin.c"
  3733 ;; Parameters:    Size  Location     Type
  3734 ;;  port            2   35[COMRAM] int 
  3735 ;;  pin             2   37[COMRAM] int 
  3736 ;; Auto vars:     Size  Location     Type
  3737 ;;		None
  3738 ;; Return value:  Size  Location     Type
  3739 ;;                  2   35[COMRAM] int 
  3740 ;; Registers used:
  3741 ;;		wreg, status,2, status,0
  3742 ;; Tracked objects:
  3743 ;;		On entry : 0/0
  3744 ;;		On exit  : 0/0
  3745 ;;		Unchanged: 0/0
  3746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3747 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3749 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3750 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3751 ;;Total ram usage:        6 bytes
  3752 ;; Hardware stack levels used:    1
  3753 ;; Hardware stack levels required when called:    3
  3754 ;; This function calls:
  3755 ;;		Nothing
  3756 ;; This function is called by:
  3757 ;;		_sortBattery
  3758 ;; This function uses a non-reentrant model
  3759 ;;
  3760                           
  3761                           	psect	text13
  3762  001FE2                     __ptext13:
  3763                           	opt stack 0
  3764  001FE2                     _digitalRead:
  3765                           	opt stack 26
  3766                           
  3767                           ;iopin.c: 44: switch(port){
  3768                           
  3769                           ;incstack = 0
  3770  001FE2  D040               	goto	l5907
  3771  001FE4                     l5889:
  3772  001FE4  C026  F028         	movff	digitalRead@pin,??_digitalRead
  3773  001FE8  CF80 F029          	movff	3968,??_digitalRead+1	;volatile
  3774  001FEC  2A28               	incf	??_digitalRead,f,c
  3775  001FEE  D002               	goto	u5674
  3776  001FF0                     u5675:
  3777  001FF0  90D8               	bcf	status,0,c
  3778  001FF2  3229               	rrcf	??_digitalRead+1,f,c
  3779  001FF4                     u5674:
  3780  001FF4  2E28               	decfsz	??_digitalRead,f,c
  3781  001FF6  D7FC               	goto	u5675
  3782  001FF8  0E01               	movlw	1
  3783  001FFA  1629               	andwf	??_digitalRead+1,f,c
  3784  001FFC  5029               	movf	??_digitalRead+1,w,c
  3785  001FFE  6E24               	movwf	?_digitalRead,c
  3786  002000  6A25               	clrf	?_digitalRead+1,c
  3787  002002  0012               	return	
  3788  002004                     l5893:
  3789  002004  C026  F028         	movff	digitalRead@pin,??_digitalRead
  3790  002008  CF81 F029          	movff	3969,??_digitalRead+1	;volatile
  3791  00200C  2A28               	incf	??_digitalRead,f,c
  3792  00200E  D002               	goto	u5684
  3793  002010                     u5685:
  3794  002010  90D8               	bcf	status,0,c
  3795  002012  3229               	rrcf	??_digitalRead+1,f,c
  3796  002014                     u5684:
  3797  002014  2E28               	decfsz	??_digitalRead,f,c
  3798  002016  D7FC               	goto	u5685
  3799  002018  0E01               	movlw	1
  3800  00201A  1629               	andwf	??_digitalRead+1,f,c
  3801  00201C  5029               	movf	??_digitalRead+1,w,c
  3802  00201E  6E24               	movwf	?_digitalRead,c
  3803  002020  6A25               	clrf	?_digitalRead+1,c
  3804  002022  0012               	return	
  3805  002024                     l5897:
  3806  002024  C026  F028         	movff	digitalRead@pin,??_digitalRead
  3807  002028  CF82 F029          	movff	3970,??_digitalRead+1	;volatile
  3808  00202C  2A28               	incf	??_digitalRead,f,c
  3809  00202E  D002               	goto	u5694
  3810  002030                     u5695:
  3811  002030  90D8               	bcf	status,0,c
  3812  002032  3229               	rrcf	??_digitalRead+1,f,c
  3813  002034                     u5694:
  3814  002034  2E28               	decfsz	??_digitalRead,f,c
  3815  002036  D7FC               	goto	u5695
  3816  002038  0E01               	movlw	1
  3817  00203A  1629               	andwf	??_digitalRead+1,f,c
  3818  00203C  5029               	movf	??_digitalRead+1,w,c
  3819  00203E  6E24               	movwf	?_digitalRead,c
  3820  002040  6A25               	clrf	?_digitalRead+1,c
  3821  002042  0012               	return	
  3822  002044                     l5901:
  3823  002044  C026  F028         	movff	digitalRead@pin,??_digitalRead
  3824  002048  CF83 F029          	movff	3971,??_digitalRead+1	;volatile
  3825  00204C  2A28               	incf	??_digitalRead,f,c
  3826  00204E  D002               	goto	u5704
  3827  002050                     u5705:
  3828  002050  90D8               	bcf	status,0,c
  3829  002052  3229               	rrcf	??_digitalRead+1,f,c
  3830  002054                     u5704:
  3831  002054  2E28               	decfsz	??_digitalRead,f,c
  3832  002056  D7FC               	goto	u5705
  3833  002058  0E01               	movlw	1
  3834  00205A  1629               	andwf	??_digitalRead+1,f,c
  3835  00205C  5029               	movf	??_digitalRead+1,w,c
  3836  00205E  6E24               	movwf	?_digitalRead,c
  3837  002060  6A25               	clrf	?_digitalRead+1,c
  3838  002062  0012               	return	
  3839  002064                     l5907:
  3840  002064  C024  F028         	movff	digitalRead@port,??_digitalRead
  3841  002068  C025  F029         	movff	digitalRead@port+1,??_digitalRead+1
  3842                           
  3843                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  3844                           ; Switch size 1, requested type "space"
  3845                           ; Number of cases is 1, Range of values is 0 to 0
  3846                           ; switch strategies available:
  3847                           ; Name         Instructions Cycles
  3848                           ; simple_byte            4     3 (average)
  3849                           ;	Chosen strategy is simple_byte
  3850  00206C  5029               	movf	??_digitalRead+1,w,c
  3851  00206E  0A00               	xorlw	0	; case 0
  3852  002070  A4D8               	btfss	status,2,c
  3853  002072  D00D               	goto	l270
  3854                           
  3855                           ; Switch size 1, requested type "space"
  3856                           ; Number of cases is 4, Range of values is 0 to 3
  3857                           ; switch strategies available:
  3858                           ; Name         Instructions Cycles
  3859                           ; simple_byte           13     7 (average)
  3860                           ;	Chosen strategy is simple_byte
  3861  002074  5028               	movf	??_digitalRead,w,c
  3862  002076  0A00               	xorlw	0	; case 0
  3863  002078  B4D8               	btfsc	status,2,c
  3864  00207A  D7B4               	goto	l5889
  3865  00207C  0A01               	xorlw	1	; case 1
  3866  00207E  B4D8               	btfsc	status,2,c
  3867  002080  D7C1               	goto	l5893
  3868  002082  0A03               	xorlw	3	; case 2
  3869  002084  B4D8               	btfsc	status,2,c
  3870  002086  D7CE               	goto	l5897
  3871  002088  0A01               	xorlw	1	; case 3
  3872  00208A  B4D8               	btfsc	status,2,c
  3873  00208C  D7DB               	goto	l5901
  3874  00208E                     l270:
  3875                           
  3876                           ;iopin.c: 50: return -1;
  3877  00208E  6824               	setf	?_digitalRead,c
  3878  002090  6825               	setf	?_digitalRead+1,c
  3879  002092  0012               	return		;funcret
  3880  002094                     __end_of_digitalRead:
  3881                           	opt stack 0
  3882                           tblptru	equ	0xFF8
  3883                           tblptrh	equ	0xFF7
  3884                           tblptrl	equ	0xFF6
  3885                           tablat	equ	0xFF5
  3886                           intcon	equ	0xFF2
  3887                           postinc0	equ	0xFEE
  3888                           wreg	equ	0xFE8
  3889                           postdec1	equ	0xFE5
  3890                           plusw1	equ	0xFE3
  3891                           fsr1l	equ	0xFE1
  3892                           postinc2	equ	0xFDE
  3893                           postdec2	equ	0xFDD
  3894                           plusw2	equ	0xFDB
  3895                           fsr2h	equ	0xFDA
  3896                           fsr2l	equ	0xFD9
  3897                           status	equ	0xFD8
  3898                           
  3899 ;; *************** function _analogRead *****************
  3900 ;; Defined at:
  3901 ;;		line 88 in file "iopin.c"
  3902 ;; Parameters:    Size  Location     Type
  3903 ;;  channel         2   35[COMRAM] int 
  3904 ;; Auto vars:     Size  Location     Type
  3905 ;;		None
  3906 ;; Return value:  Size  Location     Type
  3907 ;;                  4   35[COMRAM] long 
  3908 ;; Registers used:
  3909 ;;		wreg, status,2, status,0
  3910 ;; Tracked objects:
  3911 ;;		On entry : 0/0
  3912 ;;		On exit  : 0/0
  3913 ;;		Unchanged: 0/0
  3914 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  3915 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3916 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3917 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3918 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  3919 ;;Total ram usage:        6 bytes
  3920 ;; Hardware stack levels used:    1
  3921 ;; Hardware stack levels required when called:    3
  3922 ;; This function calls:
  3923 ;;		Nothing
  3924 ;; This function is called by:
  3925 ;;		_sortBattery
  3926 ;; This function uses a non-reentrant model
  3927 ;;
  3928                           
  3929                           	psect	text14
  3930  002BFA                     __ptext14:
  3931                           	opt stack 0
  3932  002BFA                     _analogRead:
  3933                           	opt stack 26
  3934                           
  3935                           ;iopin.c: 89: ADCON0 = channel<<2;
  3936                           
  3937                           ;incstack = 0
  3938  002BFA  4424               	rlncf	analogRead@channel,w,c
  3939  002BFC  46E8               	rlncf	wreg,f,c
  3940  002BFE  0BFC               	andlw	252
  3941  002C00  6EC2               	movwf	4034,c	;volatile
  3942                           
  3943                           ;iopin.c: 90: ADCON0 |= 1<<0;
  3944  002C02  80C2               	bsf	4034,0,c	;volatile
  3945                           
  3946                           ;iopin.c: 91: ADCON0 |= 1<<1;
  3947  002C04  82C2               	bsf	4034,1,c	;volatile
  3948  002C06                     l294:
  3949  002C06  B2C2               	btfsc	4034,1,c	;volatile
  3950  002C08  D7FE               	goto	l294
  3951                           
  3952                           ;iopin.c: 95: return (ADRESH<<8) + ADRESL;
  3953  002C0A  50C3               	movf	4035,w,c	;volatile
  3954  002C0C  CFC4 F028          	movff	4036,??_analogRead	;volatile
  3955  002C10  6A29               	clrf	(??_analogRead+1)& (0+255),c
  3956  002C12  C028  F029         	movff	??_analogRead,??_analogRead+1
  3957  002C16  6A28               	clrf	??_analogRead,c
  3958  002C18  2628               	addwf	??_analogRead,f,c
  3959  002C1A  0E00               	movlw	0
  3960  002C1C  2229               	addwfc	??_analogRead+1,f,c
  3961  002C1E  C028  F024         	movff	??_analogRead,?_analogRead
  3962  002C22  C029  F025         	movff	??_analogRead+1,?_analogRead+1
  3963  002C26  0E00               	movlw	0
  3964  002C28  BE25               	btfsc	?_analogRead+1,7,c
  3965  002C2A  0EFF               	movlw	-1
  3966  002C2C  6E26               	movwf	?_analogRead+2,c
  3967  002C2E  6E27               	movwf	?_analogRead+3,c
  3968  002C30  0012               	return	
  3969  002C32                     __end_of_analogRead:
  3970                           	opt stack 0
  3971                           tblptru	equ	0xFF8
  3972                           tblptrh	equ	0xFF7
  3973                           tblptrl	equ	0xFF6
  3974                           tablat	equ	0xFF5
  3975                           intcon	equ	0xFF2
  3976                           postinc0	equ	0xFEE
  3977                           wreg	equ	0xFE8
  3978                           postdec1	equ	0xFE5
  3979                           plusw1	equ	0xFE3
  3980                           fsr1l	equ	0xFE1
  3981                           postinc2	equ	0xFDE
  3982                           postdec2	equ	0xFDD
  3983                           plusw2	equ	0xFDB
  3984                           fsr2h	equ	0xFDA
  3985                           fsr2l	equ	0xFD9
  3986                           status	equ	0xFD8
  3987                           
  3988 ;; *************** function _showInterface *****************
  3989 ;; Defined at:
  3990 ;;		line 16 in file "interface.c"
  3991 ;; Parameters:    Size  Location     Type
  3992 ;;		None
  3993 ;; Auto vars:     Size  Location     Type
  3994 ;;  key             1   77[BANK0 ] unsigned char 
  3995 ;; Return value:  Size  Location     Type
  3996 ;;                  1    wreg      void 
  3997 ;; Registers used:
  3998 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  3999 ;; Tracked objects:
  4000 ;;		On entry : 0/0
  4001 ;;		On exit  : 0/0
  4002 ;;		Unchanged: 0/0
  4003 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4004 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4005 ;;      Locals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4006 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4007 ;;      Totals:         0       1       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4008 ;;Total ram usage:        1 bytes
  4009 ;; Hardware stack levels used:    1
  4010 ;; Hardware stack levels required when called:    9
  4011 ;; This function calls:
  4012 ;;		_dateTime
  4013 ;;		_initRTC
  4014 ;;		_mainMenu
  4015 ;;		_readKeypad
  4016 ;;		_runMenu
  4017 ;;		_runSelect
  4018 ;;		_runStats
  4019 ;;		_runTime
  4020 ;;		_setTime
  4021 ;; This function is called by:
  4022 ;;		_main
  4023 ;; This function uses a non-reentrant model
  4024 ;;
  4025                           
  4026                           	psect	text15
  4027  001E0C                     __ptext15:
  4028                           	opt stack 0
  4029  001E0C                     _showInterface:
  4030                           	opt stack 21
  4031                           
  4032                           ;interface.c: 18: initRTC();
  4033                           
  4034                           ;incstack = 0
  4035  001E0C  EC14  F017         	call	_initRTC	;wreg free
  4036                           
  4037                           ;interface.c: 19: setTime();
  4038  001E10  ECBD  F014         	call	_setTime	;wreg free
  4039  001E14                     l5979:
  4040                           
  4041                           ;interface.c: 23: dateTime();
  4042  001E14  EC90  F016         	call	_dateTime	;wreg free
  4043  001E18                     l5981:
  4044  001E18  EC6A  F016         	call	_readKeypad	;wreg free
  4045  001E1C  0A41               	xorlw	65
  4046  001E1E  A4D8               	btfss	status,2,c
  4047  001E20  D7FB               	goto	l5981
  4048  001E22                     l5983:
  4049                           
  4050                           ;interface.c: 28: mainMenu();
  4051  001E22  EC7D  F016         	call	_mainMenu	;wreg free
  4052  001E26                     l5985:
  4053  001E26  EC6A  F016         	call	_readKeypad	;wreg free
  4054  001E2A  0100               	movlb	0	; () banked
  4055  001E2C  6FCD               	movwf	showInterface@key& (0+255),b
  4056                           
  4057                           ; BSR set to: 0
  4058                           ;interface.c: 32: while(key != 'B' && key != 'C' && key != '*');
  4059  001E2E  0E42               	movlw	66
  4060  001E30  0100               	movlb	0	; () banked
  4061  001E32  19CD               	xorwf	showInterface@key& (0+255),w,b
  4062  001E34  B4D8               	btfsc	status,2,c
  4063  001E36  D00A               	goto	l5993
  4064                           
  4065                           ; BSR set to: 0
  4066  001E38  0E43               	movlw	67
  4067  001E3A  0100               	movlb	0	; () banked
  4068  001E3C  19CD               	xorwf	showInterface@key& (0+255),w,b
  4069  001E3E  B4D8               	btfsc	status,2,c
  4070  001E40  D005               	goto	l5993
  4071                           
  4072                           ; BSR set to: 0
  4073  001E42  0E2A               	movlw	42
  4074  001E44  0100               	movlb	0	; () banked
  4075  001E46  19CD               	xorwf	showInterface@key& (0+255),w,b
  4076  001E48  A4D8               	btfss	status,2,c
  4077  001E4A  D7ED               	goto	l5985
  4078  001E4C                     l5993:
  4079                           
  4080                           ; BSR set to: 0
  4081                           ;interface.c: 34: if(key == 'C'){
  4082  001E4C  0E43               	movlw	67
  4083  001E4E  0100               	movlb	0	; () banked
  4084  001E50  19CD               	xorwf	showInterface@key& (0+255),w,b
  4085  001E52  A4D8               	btfss	status,2,c
  4086  001E54  D056               	goto	l6037
  4087                           
  4088                           ; BSR set to: 0
  4089                           ;interface.c: 36: runSelect();
  4090  001E56  EC57  F016         	call	_runSelect	;wreg free
  4091  001E5A                     l5997:
  4092  001E5A  EC6A  F016         	call	_readKeypad	;wreg free
  4093  001E5E  0100               	movlb	0	; () banked
  4094  001E60  6FCD               	movwf	showInterface@key& (0+255),b
  4095                           
  4096                           ; BSR set to: 0
  4097                           ;interface.c: 42: while(key != '1' && key != '2' && key != '3' && key != '4' && key != '
      +                          *');
  4098  001E62  0E31               	movlw	49
  4099  001E64  0100               	movlb	0	; () banked
  4100  001E66  19CD               	xorwf	showInterface@key& (0+255),w,b
  4101  001E68  B4D8               	btfsc	status,2,c
  4102  001E6A  D014               	goto	l6009
  4103                           
  4104                           ; BSR set to: 0
  4105  001E6C  0E32               	movlw	50
  4106  001E6E  0100               	movlb	0	; () banked
  4107  001E70  19CD               	xorwf	showInterface@key& (0+255),w,b
  4108  001E72  B4D8               	btfsc	status,2,c
  4109  001E74  D00F               	goto	l6009
  4110                           
  4111                           ; BSR set to: 0
  4112  001E76  0E33               	movlw	51
  4113  001E78  0100               	movlb	0	; () banked
  4114  001E7A  19CD               	xorwf	showInterface@key& (0+255),w,b
  4115  001E7C  B4D8               	btfsc	status,2,c
  4116  001E7E  D00A               	goto	l6009
  4117                           
  4118                           ; BSR set to: 0
  4119  001E80  0E34               	movlw	52
  4120  001E82  0100               	movlb	0	; () banked
  4121  001E84  19CD               	xorwf	showInterface@key& (0+255),w,b
  4122  001E86  B4D8               	btfsc	status,2,c
  4123  001E88  D005               	goto	l6009
  4124                           
  4125                           ; BSR set to: 0
  4126  001E8A  0E2A               	movlw	42
  4127  001E8C  0100               	movlb	0	; () banked
  4128  001E8E  19CD               	xorwf	showInterface@key& (0+255),w,b
  4129  001E90  A4D8               	btfss	status,2,c
  4130  001E92  D7E3               	goto	l5997
  4131  001E94                     l6009:
  4132                           
  4133                           ; BSR set to: 0
  4134                           ;interface.c: 44: if(key == '*')continue;
  4135  001E94  0E2A               	movlw	42
  4136  001E96  0100               	movlb	0	; () banked
  4137  001E98  19CD               	xorwf	showInterface@key& (0+255),w,b
  4138  001E9A  B4D8               	btfsc	status,2,c
  4139  001E9C  D7C2               	goto	l5983
  4140  001E9E                     l6013:
  4141                           
  4142                           ;interface.c: 50: runMenu(key);
  4143  001E9E  0100               	movlb	0	; () banked
  4144  001EA0  51CD               	movf	showInterface@key& (0+255),w,b
  4145  001EA2  EC19  F016         	call	_runMenu
  4146  001EA6                     l6015:
  4147  001EA6  EC6A  F016         	call	_readKeypad	;wreg free
  4148  001EAA  0100               	movlb	0	; () banked
  4149  001EAC  6FCD               	movwf	showInterface@key& (0+255),b
  4150                           
  4151                           ; BSR set to: 0
  4152                           ;interface.c: 54: while(key != 'A' && key != 'B' && key != '*');
  4153  001EAE  0E41               	movlw	65
  4154  001EB0  0100               	movlb	0	; () banked
  4155  001EB2  19CD               	xorwf	showInterface@key& (0+255),w,b
  4156  001EB4  B4D8               	btfsc	status,2,c
  4157  001EB6  D00A               	goto	l6023
  4158                           
  4159                           ; BSR set to: 0
  4160  001EB8  0E42               	movlw	66
  4161  001EBA  0100               	movlb	0	; () banked
  4162  001EBC  19CD               	xorwf	showInterface@key& (0+255),w,b
  4163  001EBE  B4D8               	btfsc	status,2,c
  4164  001EC0  D005               	goto	l6023
  4165                           
  4166                           ; BSR set to: 0
  4167  001EC2  0E2A               	movlw	42
  4168  001EC4  0100               	movlb	0	; () banked
  4169  001EC6  19CD               	xorwf	showInterface@key& (0+255),w,b
  4170  001EC8  A4D8               	btfss	status,2,c
  4171  001ECA  D7ED               	goto	l6015
  4172  001ECC                     l6023:
  4173                           
  4174                           ; BSR set to: 0
  4175                           ;interface.c: 56: if(key == 'A'){
  4176  001ECC  0E41               	movlw	65
  4177  001ECE  0100               	movlb	0	; () banked
  4178  001ED0  19CD               	xorwf	showInterface@key& (0+255),w,b
  4179  001ED2  A4D8               	btfss	status,2,c
  4180  001ED4  D003               	goto	l6027
  4181                           
  4182                           ; BSR set to: 0
  4183                           ;interface.c: 58: runTime();
  4184  001ED6  EC31  F016         	call	_runTime	;wreg free
  4185                           
  4186                           ;interface.c: 60: }
  4187  001EDA  D00D               	goto	l6035
  4188  001EDC                     l6027:
  4189                           
  4190                           ;interface.c: 61: else if(key == 'B'){
  4191  001EDC  0E42               	movlw	66
  4192  001EDE  0100               	movlb	0	; () banked
  4193  001EE0  19CD               	xorwf	showInterface@key& (0+255),w,b
  4194  001EE2  A4D8               	btfss	status,2,c
  4195  001EE4  D003               	goto	l6031
  4196                           
  4197                           ; BSR set to: 0
  4198                           ;interface.c: 63: runStats();
  4199  001EE6  EC44  F016         	call	_runStats	;wreg free
  4200                           
  4201                           ;interface.c: 65: }
  4202  001EEA  D005               	goto	l6035
  4203  001EEC                     l6031:
  4204                           
  4205                           ;interface.c: 66: else if(key == '*')break;
  4206  001EEC  0E2A               	movlw	42
  4207  001EEE  0100               	movlb	0	; () banked
  4208  001EF0  19CD               	xorwf	showInterface@key& (0+255),w,b
  4209  001EF2  B4D8               	btfsc	status,2,c
  4210  001EF4  D796               	goto	l5983
  4211  001EF6                     l6035:
  4212  001EF6  EC6A  F016         	call	_readKeypad	;wreg free
  4213  001EFA  0A2A               	xorlw	42
  4214  001EFC  B4D8               	btfsc	status,2,c
  4215  001EFE  D7CF               	goto	l6013
  4216  001F00  D7FA               	goto	l6035
  4217  001F02                     l6037:
  4218                           
  4219                           ;interface.c: 72: else if(key == 'B'){
  4220  001F02  0E42               	movlw	66
  4221  001F04  0100               	movlb	0	; () banked
  4222  001F06  19CD               	xorwf	showInterface@key& (0+255),w,b
  4223  001F08  B4D8               	btfsc	status,2,c
  4224  001F0A  0012               	return	
  4225                           
  4226                           ; BSR set to: 0
  4227                           ;interface.c: 75: else if(key == '*')
  4228                           
  4229                           ; BSR set to: 0
  4230                           
  4231                           ; BSR set to: 0
  4232                           ;interface.c: 74: }
  4233                           
  4234                           ; BSR set to: 0
  4235                           ;interface.c: 73: return;
  4236  001F0C  0E2A               	movlw	42
  4237  001F0E  0100               	movlb	0	; () banked
  4238  001F10  19CD               	xorwf	showInterface@key& (0+255),w,b
  4239  001F12  B4D8               	btfsc	status,2,c
  4240  001F14  D77F               	goto	l5979
  4241  001F16  D785               	goto	l5983
  4242  001F18                     __end_of_showInterface:
  4243                           	opt stack 0
  4244                           tblptru	equ	0xFF8
  4245                           tblptrh	equ	0xFF7
  4246                           tblptrl	equ	0xFF6
  4247                           tablat	equ	0xFF5
  4248                           intcon	equ	0xFF2
  4249                           postinc0	equ	0xFEE
  4250                           wreg	equ	0xFE8
  4251                           postdec1	equ	0xFE5
  4252                           plusw1	equ	0xFE3
  4253                           fsr1l	equ	0xFE1
  4254                           postinc2	equ	0xFDE
  4255                           postdec2	equ	0xFDD
  4256                           plusw2	equ	0xFDB
  4257                           fsr2h	equ	0xFDA
  4258                           fsr2l	equ	0xFD9
  4259                           status	equ	0xFD8
  4260                           
  4261 ;; *************** function _setTime *****************
  4262 ;; Defined at:
  4263 ;;		line 48 in file "RTC.c"
  4264 ;; Parameters:    Size  Location     Type
  4265 ;;		None
  4266 ;; Auto vars:     Size  Location     Type
  4267 ;;  i               1   38[COMRAM] unsigned char 
  4268 ;; Return value:  Size  Location     Type
  4269 ;;                  1    wreg      void 
  4270 ;; Registers used:
  4271 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4272 ;; Tracked objects:
  4273 ;;		On entry : 0/0
  4274 ;;		On exit  : 0/0
  4275 ;;		Unchanged: 0/0
  4276 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4277 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4278 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4279 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4280 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4281 ;;Total ram usage:        1 bytes
  4282 ;; Hardware stack levels used:    1
  4283 ;; Hardware stack levels required when called:    5
  4284 ;; This function calls:
  4285 ;;		_I2C_Master_Start
  4286 ;;		_I2C_Master_Stop
  4287 ;;		_I2C_Master_Write
  4288 ;; This function is called by:
  4289 ;;		_showInterface
  4290 ;; This function uses a non-reentrant model
  4291 ;;
  4292                           
  4293                           	psect	text16
  4294  00297A                     __ptext16:
  4295                           	opt stack 0
  4296  00297A                     _setTime:
  4297                           	opt stack 24
  4298                           
  4299                           ;RTC.c: 49: (INTCONbits.GIE = 0);
  4300                           
  4301                           ; BSR set to: 0
  4302                           ;incstack = 0
  4303  00297A  9EF2               	bcf	intcon,7,c	;volatile
  4304                           
  4305                           ;RTC.c: 50: I2C_Master_Start();
  4306  00297C  EC3E  F017         	call	_I2C_Master_Start	;wreg free
  4307                           
  4308                           ;RTC.c: 51: I2C_Master_Write(0b11010000);
  4309  002980  0E00               	movlw	0
  4310  002982  6E26               	movwf	I2C_Master_Write@d+1,c
  4311  002984  0ED0               	movlw	208
  4312  002986  6E25               	movwf	I2C_Master_Write@d,c
  4313  002988  EC31  F017         	call	_I2C_Master_Write	;wreg free
  4314                           
  4315                           ;RTC.c: 52: I2C_Master_Write(0x00);
  4316  00298C  0E00               	movlw	0
  4317  00298E  6E26               	movwf	I2C_Master_Write@d+1,c
  4318  002990  0E00               	movlw	0
  4319  002992  6E25               	movwf	I2C_Master_Write@d,c
  4320  002994  EC31  F017         	call	_I2C_Master_Write	;wreg free
  4321                           
  4322                           ;RTC.c: 53: for(char i=0; i<7; i++){
  4323  002998  0E00               	movlw	0
  4324  00299A  6E27               	movwf	setTime@i,c
  4325  00299C                     l4269:
  4326  00299C  0E06               	movlw	6
  4327  00299E  6427               	cpfsgt	setTime@i,c
  4328  0029A0  D001               	goto	l4273
  4329  0029A2  D010               	goto	l4279
  4330  0029A4                     l4273:
  4331                           
  4332                           ;RTC.c: 54: I2C_Master_Write(happynewyear[i]);
  4333  0029A4  5027               	movf	setTime@i,w,c
  4334  0029A6  0D01               	mullw	1
  4335  0029A8  0E7A               	movlw	low _happynewyear
  4336  0029AA  24F3               	addwf	prodl,w,c
  4337  0029AC  6EF6               	movwf	tblptrl,c
  4338  0029AE  0EFE               	movlw	high _happynewyear
  4339  0029B0  20F4               	addwfc	prodh,w,c
  4340  0029B2  6EF7               	movwf	tblptrh,c
  4341  0029B4                     	if	0	;There are less than 3 active tblptr bytes
  4342  0029B4                     	endif
  4343  0029B4  0008               	tblrd		*
  4344  0029B6  50F5               	movf	tablat,w,c
  4345  0029B8  6E25               	movwf	I2C_Master_Write@d,c
  4346  0029BA  6A26               	clrf	I2C_Master_Write@d+1,c
  4347  0029BC  EC31  F017         	call	_I2C_Master_Write	;wreg free
  4348  0029C0  2A27               	incf	setTime@i,f,c
  4349  0029C2  D7EC               	goto	l4269
  4350  0029C4                     l4279:
  4351                           
  4352                           ;RTC.c: 55: }
  4353                           ;RTC.c: 56: I2C_Master_Stop();
  4354  0029C4  EC3A  F017         	call	_I2C_Master_Stop	;wreg free
  4355                           
  4356                           ;RTC.c: 57: (INTCONbits.GIE = 1);
  4357  0029C8  8EF2               	bsf	intcon,7,c	;volatile
  4358  0029CA  0012               	return		;funcret
  4359  0029CC                     __end_of_setTime:
  4360                           	opt stack 0
  4361                           tblptru	equ	0xFF8
  4362                           tblptrh	equ	0xFF7
  4363                           tblptrl	equ	0xFF6
  4364                           tablat	equ	0xFF5
  4365                           prodh	equ	0xFF4
  4366                           prodl	equ	0xFF3
  4367                           intcon	equ	0xFF2
  4368                           postinc0	equ	0xFEE
  4369                           wreg	equ	0xFE8
  4370                           postdec1	equ	0xFE5
  4371                           plusw1	equ	0xFE3
  4372                           fsr1l	equ	0xFE1
  4373                           postinc2	equ	0xFDE
  4374                           postdec2	equ	0xFDD
  4375                           plusw2	equ	0xFDB
  4376                           fsr2h	equ	0xFDA
  4377                           fsr2l	equ	0xFD9
  4378                           status	equ	0xFD8
  4379                           
  4380 ;; *************** function _I2C_Master_Write *****************
  4381 ;; Defined at:
  4382 ;;		line 47 in file "I2C.c"
  4383 ;; Parameters:    Size  Location     Type
  4384 ;;  d               2   36[COMRAM] unsigned int 
  4385 ;; Auto vars:     Size  Location     Type
  4386 ;;		None
  4387 ;; Return value:  Size  Location     Type
  4388 ;;                  1    wreg      void 
  4389 ;; Registers used:
  4390 ;;		wreg, status,2, status,0, cstack
  4391 ;; Tracked objects:
  4392 ;;		On entry : 0/0
  4393 ;;		On exit  : 0/0
  4394 ;;		Unchanged: 0/0
  4395 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4396 ;;      Params:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4397 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4398 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4399 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4400 ;;Total ram usage:        2 bytes
  4401 ;; Hardware stack levels used:    1
  4402 ;; Hardware stack levels required when called:    4
  4403 ;; This function calls:
  4404 ;;		_I2C_Master_Wait
  4405 ;; This function is called by:
  4406 ;;		_setTime
  4407 ;;		_testFrequency
  4408 ;;		_getTime
  4409 ;; This function uses a non-reentrant model
  4410 ;;
  4411                           
  4412                           	psect	text17
  4413  002E62                     __ptext17:
  4414                           	opt stack 0
  4415  002E62                     _I2C_Master_Write:
  4416                           	opt stack 24
  4417                           
  4418                           ;I2C.c: 49: I2C_Master_Wait();
  4419                           
  4420                           ;incstack = 0
  4421  002E62  EC28  F017         	call	_I2C_Master_Wait	;wreg free
  4422                           
  4423                           ;I2C.c: 50: SSPBUF = d;
  4424  002E66  C025  FFC9         	movff	I2C_Master_Write@d,4041	;volatile
  4425  002E6A  0012               	return		;funcret
  4426  002E6C                     __end_of_I2C_Master_Write:
  4427                           	opt stack 0
  4428                           tblptru	equ	0xFF8
  4429                           tblptrh	equ	0xFF7
  4430                           tblptrl	equ	0xFF6
  4431                           tablat	equ	0xFF5
  4432                           prodh	equ	0xFF4
  4433                           prodl	equ	0xFF3
  4434                           intcon	equ	0xFF2
  4435                           postinc0	equ	0xFEE
  4436                           wreg	equ	0xFE8
  4437                           postdec1	equ	0xFE5
  4438                           plusw1	equ	0xFE3
  4439                           fsr1l	equ	0xFE1
  4440                           postinc2	equ	0xFDE
  4441                           postdec2	equ	0xFDD
  4442                           plusw2	equ	0xFDB
  4443                           fsr2h	equ	0xFDA
  4444                           fsr2l	equ	0xFD9
  4445                           status	equ	0xFD8
  4446                           
  4447 ;; *************** function _I2C_Master_Stop *****************
  4448 ;; Defined at:
  4449 ;;		line 41 in file "I2C.c"
  4450 ;; Parameters:    Size  Location     Type
  4451 ;;		None
  4452 ;; Auto vars:     Size  Location     Type
  4453 ;;		None
  4454 ;; Return value:  Size  Location     Type
  4455 ;;                  2  359[None  ] int 
  4456 ;; Registers used:
  4457 ;;		wreg, status,2, status,0, cstack
  4458 ;; Tracked objects:
  4459 ;;		On entry : 0/0
  4460 ;;		On exit  : 0/0
  4461 ;;		Unchanged: 0/0
  4462 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4463 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4464 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4465 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4466 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4467 ;;Total ram usage:        0 bytes
  4468 ;; Hardware stack levels used:    1
  4469 ;; Hardware stack levels required when called:    4
  4470 ;; This function calls:
  4471 ;;		_I2C_Master_Wait
  4472 ;; This function is called by:
  4473 ;;		_setTime
  4474 ;;		_testFrequency
  4475 ;;		_getTime
  4476 ;; This function uses a non-reentrant model
  4477 ;;
  4478                           
  4479                           	psect	text18
  4480  002E74                     __ptext18:
  4481                           	opt stack 0
  4482  002E74                     _I2C_Master_Stop:
  4483                           	opt stack 24
  4484                           
  4485                           ;I2C.c: 43: I2C_Master_Wait();
  4486                           
  4487                           ;incstack = 0
  4488  002E74  EC28  F017         	call	_I2C_Master_Wait	;wreg free
  4489                           
  4490                           ;I2C.c: 44: PEN = 1;
  4491  002E78  84C5               	bsf	4037,2,c	;volatile
  4492  002E7A  0012               	return		;funcret
  4493  002E7C                     __end_of_I2C_Master_Stop:
  4494                           	opt stack 0
  4495                           tblptru	equ	0xFF8
  4496                           tblptrh	equ	0xFF7
  4497                           tblptrl	equ	0xFF6
  4498                           tablat	equ	0xFF5
  4499                           prodh	equ	0xFF4
  4500                           prodl	equ	0xFF3
  4501                           intcon	equ	0xFF2
  4502                           postinc0	equ	0xFEE
  4503                           wreg	equ	0xFE8
  4504                           postdec1	equ	0xFE5
  4505                           plusw1	equ	0xFE3
  4506                           fsr1l	equ	0xFE1
  4507                           postinc2	equ	0xFDE
  4508                           postdec2	equ	0xFDD
  4509                           plusw2	equ	0xFDB
  4510                           fsr2h	equ	0xFDA
  4511                           fsr2l	equ	0xFD9
  4512                           status	equ	0xFD8
  4513                           
  4514 ;; *************** function _I2C_Master_Start *****************
  4515 ;; Defined at:
  4516 ;;		line 29 in file "I2C.c"
  4517 ;; Parameters:    Size  Location     Type
  4518 ;;		None
  4519 ;; Auto vars:     Size  Location     Type
  4520 ;;		None
  4521 ;; Return value:  Size  Location     Type
  4522 ;;                  2  355[None  ] int 
  4523 ;; Registers used:
  4524 ;;		wreg, status,2, status,0, cstack
  4525 ;; Tracked objects:
  4526 ;;		On entry : 0/0
  4527 ;;		On exit  : 0/0
  4528 ;;		Unchanged: 0/0
  4529 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4530 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4531 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4532 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4533 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4534 ;;Total ram usage:        0 bytes
  4535 ;; Hardware stack levels used:    1
  4536 ;; Hardware stack levels required when called:    4
  4537 ;; This function calls:
  4538 ;;		_I2C_Master_Wait
  4539 ;; This function is called by:
  4540 ;;		_setTime
  4541 ;;		_testFrequency
  4542 ;;		_getTime
  4543 ;; This function uses a non-reentrant model
  4544 ;;
  4545                           
  4546                           	psect	text19
  4547  002E7C                     __ptext19:
  4548                           	opt stack 0
  4549  002E7C                     _I2C_Master_Start:
  4550                           	opt stack 24
  4551                           
  4552                           ;I2C.c: 31: I2C_Master_Wait();
  4553                           
  4554                           ;incstack = 0
  4555  002E7C  EC28  F017         	call	_I2C_Master_Wait	;wreg free
  4556                           
  4557                           ;I2C.c: 32: SEN = 1;
  4558  002E80  80C5               	bsf	4037,0,c	;volatile
  4559  002E82  0012               	return		;funcret
  4560  002E84                     __end_of_I2C_Master_Start:
  4561                           	opt stack 0
  4562                           tblptru	equ	0xFF8
  4563                           tblptrh	equ	0xFF7
  4564                           tblptrl	equ	0xFF6
  4565                           tablat	equ	0xFF5
  4566                           prodh	equ	0xFF4
  4567                           prodl	equ	0xFF3
  4568                           intcon	equ	0xFF2
  4569                           postinc0	equ	0xFEE
  4570                           wreg	equ	0xFE8
  4571                           postdec1	equ	0xFE5
  4572                           plusw1	equ	0xFE3
  4573                           fsr1l	equ	0xFE1
  4574                           postinc2	equ	0xFDE
  4575                           postdec2	equ	0xFDD
  4576                           plusw2	equ	0xFDB
  4577                           fsr2h	equ	0xFDA
  4578                           fsr2l	equ	0xFD9
  4579                           status	equ	0xFD8
  4580                           
  4581 ;; *************** function _I2C_Master_Wait *****************
  4582 ;; Defined at:
  4583 ;;		line 24 in file "I2C.c"
  4584 ;; Parameters:    Size  Location     Type
  4585 ;;		None
  4586 ;; Auto vars:     Size  Location     Type
  4587 ;;		None
  4588 ;; Return value:  Size  Location     Type
  4589 ;;                  1    wreg      void 
  4590 ;; Registers used:
  4591 ;;		wreg, status,2, status,0
  4592 ;; Tracked objects:
  4593 ;;		On entry : 0/0
  4594 ;;		On exit  : 0/0
  4595 ;;		Unchanged: 0/0
  4596 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4597 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4598 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4599 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4600 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4601 ;;Total ram usage:        1 bytes
  4602 ;; Hardware stack levels used:    1
  4603 ;; Hardware stack levels required when called:    3
  4604 ;; This function calls:
  4605 ;;		Nothing
  4606 ;; This function is called by:
  4607 ;;		_I2C_Master_Start
  4608 ;;		_I2C_Master_Stop
  4609 ;;		_I2C_Master_Write
  4610 ;;		_I2C_Master_RepeatedStart
  4611 ;;		_I2C_Master_Read
  4612 ;; This function uses a non-reentrant model
  4613 ;;
  4614                           
  4615                           	psect	text20
  4616  002E50                     __ptext20:
  4617                           	opt stack 0
  4618  002E50                     _I2C_Master_Wait:
  4619                           	opt stack 24
  4620  002E50                     l432:
  4621  002E50  B4C7               	btfsc	4039,2,c	;volatile
  4622  002E52  D7FE               	goto	l432
  4623  002E54  CFC5 F024          	movff	4037,??_I2C_Master_Wait	;volatile
  4624  002E58  0E1F               	movlw	31
  4625  002E5A  1624               	andwf	??_I2C_Master_Wait,f,c
  4626  002E5C  B4D8               	btfsc	status,2,c
  4627  002E5E  0012               	return	
  4628  002E60  D7F7               	goto	l432
  4629  002E62                     __end_of_I2C_Master_Wait:
  4630                           	opt stack 0
  4631                           tblptru	equ	0xFF8
  4632                           tblptrh	equ	0xFF7
  4633                           tblptrl	equ	0xFF6
  4634                           tablat	equ	0xFF5
  4635                           prodh	equ	0xFF4
  4636                           prodl	equ	0xFF3
  4637                           intcon	equ	0xFF2
  4638                           postinc0	equ	0xFEE
  4639                           wreg	equ	0xFE8
  4640                           postdec1	equ	0xFE5
  4641                           plusw1	equ	0xFE3
  4642                           fsr1l	equ	0xFE1
  4643                           postinc2	equ	0xFDE
  4644                           postdec2	equ	0xFDD
  4645                           plusw2	equ	0xFDB
  4646                           fsr2h	equ	0xFDA
  4647                           fsr2l	equ	0xFD9
  4648                           status	equ	0xFD8
  4649                           
  4650 ;; *************** function _runTime *****************
  4651 ;; Defined at:
  4652 ;;		line 117 in file "interface.c"
  4653 ;; Parameters:    Size  Location     Type
  4654 ;;		None
  4655 ;; Auto vars:     Size  Location     Type
  4656 ;;		None
  4657 ;; Return value:  Size  Location     Type
  4658 ;;                  1    wreg      void 
  4659 ;; Registers used:
  4660 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4661 ;; Tracked objects:
  4662 ;;		On entry : 0/0
  4663 ;;		On exit  : 0/0
  4664 ;;		Unchanged: 0/0
  4665 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4666 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4667 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4668 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4669 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4670 ;;Total ram usage:        0 bytes
  4671 ;; Hardware stack levels used:    1
  4672 ;; Hardware stack levels required when called:    8
  4673 ;; This function calls:
  4674 ;;		_lcdClear
  4675 ;;		_printf
  4676 ;; This function is called by:
  4677 ;;		_showInterface
  4678 ;; This function uses a non-reentrant model
  4679 ;;
  4680                           
  4681                           	psect	text21
  4682  002C62                     __ptext21:
  4683                           	opt stack 0
  4684  002C62                     _runTime:
  4685                           	opt stack 21
  4686                           
  4687                           ;interface.c: 118: lcdClear();
  4688                           
  4689                           ;incstack = 0
  4690  002C62  EC46  F017         	call	_lcdClear	;wreg free
  4691                           
  4692                           ;interface.c: 119: printf("time: nnn sec   \n");
  4693  002C66  0E0B               	movlw	low STR_19
  4694  002C68  0100               	movlb	0	; () banked
  4695  002C6A  6FC0               	movwf	printf@f& (0+255),b
  4696  002C6C  0EFF               	movlw	high STR_19
  4697  002C6E  0100               	movlb	0	; () banked
  4698  002C70  6FC1               	movwf	(printf@f+1)& (0+255),b
  4699  002C72  EC09  F000         	call	_printf	;wreg free
  4700                           
  4701                           ;interface.c: 120: printf("              *>");
  4702  002C76  0E40               	movlw	low STR_20
  4703  002C78  0100               	movlb	0	; () banked
  4704  002C7A  6FC0               	movwf	printf@f& (0+255),b
  4705  002C7C  0EFF               	movlw	high STR_20
  4706  002C7E  0100               	movlb	0	; () banked
  4707  002C80  6FC1               	movwf	(printf@f+1)& (0+255),b
  4708  002C82  EC09  F000         	call	_printf	;wreg free
  4709  002C86  0012               	return		;funcret
  4710  002C88                     __end_of_runTime:
  4711                           	opt stack 0
  4712                           tblptru	equ	0xFF8
  4713                           tblptrh	equ	0xFF7
  4714                           tblptrl	equ	0xFF6
  4715                           tablat	equ	0xFF5
  4716                           prodh	equ	0xFF4
  4717                           prodl	equ	0xFF3
  4718                           intcon	equ	0xFF2
  4719                           postinc0	equ	0xFEE
  4720                           wreg	equ	0xFE8
  4721                           postdec1	equ	0xFE5
  4722                           plusw1	equ	0xFE3
  4723                           fsr1l	equ	0xFE1
  4724                           postinc2	equ	0xFDE
  4725                           postdec2	equ	0xFDD
  4726                           plusw2	equ	0xFDB
  4727                           fsr2h	equ	0xFDA
  4728                           fsr2l	equ	0xFD9
  4729                           status	equ	0xFD8
  4730                           
  4731 ;; *************** function _runStats *****************
  4732 ;; Defined at:
  4733 ;;		line 123 in file "interface.c"
  4734 ;; Parameters:    Size  Location     Type
  4735 ;;		None
  4736 ;; Auto vars:     Size  Location     Type
  4737 ;;		None
  4738 ;; Return value:  Size  Location     Type
  4739 ;;                  1    wreg      void 
  4740 ;; Registers used:
  4741 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4742 ;; Tracked objects:
  4743 ;;		On entry : 0/0
  4744 ;;		On exit  : 0/0
  4745 ;;		Unchanged: 0/0
  4746 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4747 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4748 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4749 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4750 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4751 ;;Total ram usage:        0 bytes
  4752 ;; Hardware stack levels used:    1
  4753 ;; Hardware stack levels required when called:    8
  4754 ;; This function calls:
  4755 ;;		_lcdClear
  4756 ;;		_printf
  4757 ;; This function is called by:
  4758 ;;		_showInterface
  4759 ;; This function uses a non-reentrant model
  4760 ;;
  4761                           
  4762                           	psect	text22
  4763  002C88                     __ptext22:
  4764                           	opt stack 0
  4765  002C88                     _runStats:
  4766                           	opt stack 21
  4767                           
  4768                           ;interface.c: 124: lcdClear();
  4769                           
  4770                           ;incstack = 0
  4771  002C88  EC46  F017         	call	_lcdClear	;wreg free
  4772                           
  4773                           ;interface.c: 125: printf("[AA,9V,C,other] \n");
  4774  002C8C  0E1D               	movlw	low STR_21
  4775  002C8E  0100               	movlb	0	; () banked
  4776  002C90  6FC0               	movwf	printf@f& (0+255),b
  4777  002C92  0EFF               	movlw	high STR_21
  4778  002C94  0100               	movlb	0	; () banked
  4779  002C96  6FC1               	movwf	(printf@f+1)& (0+255),b
  4780  002C98  EC09  F000         	call	_printf	;wreg free
  4781                           
  4782                           ;interface.c: 126: printf("[nn,n,n,nn]   *>");
  4783  002C9C  0E84               	movlw	low STR_22
  4784  002C9E  0100               	movlb	0	; () banked
  4785  002CA0  6FC0               	movwf	printf@f& (0+255),b
  4786  002CA2  0EFF               	movlw	high STR_22
  4787  002CA4  0100               	movlb	0	; () banked
  4788  002CA6  6FC1               	movwf	(printf@f+1)& (0+255),b
  4789  002CA8  EC09  F000         	call	_printf	;wreg free
  4790  002CAC  0012               	return		;funcret
  4791  002CAE                     __end_of_runStats:
  4792                           	opt stack 0
  4793                           tblptru	equ	0xFF8
  4794                           tblptrh	equ	0xFF7
  4795                           tblptrl	equ	0xFF6
  4796                           tablat	equ	0xFF5
  4797                           prodh	equ	0xFF4
  4798                           prodl	equ	0xFF3
  4799                           intcon	equ	0xFF2
  4800                           postinc0	equ	0xFEE
  4801                           wreg	equ	0xFE8
  4802                           postdec1	equ	0xFE5
  4803                           plusw1	equ	0xFE3
  4804                           fsr1l	equ	0xFE1
  4805                           postinc2	equ	0xFDE
  4806                           postdec2	equ	0xFDD
  4807                           plusw2	equ	0xFDB
  4808                           fsr2h	equ	0xFDA
  4809                           fsr2l	equ	0xFD9
  4810                           status	equ	0xFD8
  4811                           
  4812 ;; *************** function _runSelect *****************
  4813 ;; Defined at:
  4814 ;;		line 105 in file "interface.c"
  4815 ;; Parameters:    Size  Location     Type
  4816 ;;		None
  4817 ;; Auto vars:     Size  Location     Type
  4818 ;;		None
  4819 ;; Return value:  Size  Location     Type
  4820 ;;                  1    wreg      void 
  4821 ;; Registers used:
  4822 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4823 ;; Tracked objects:
  4824 ;;		On entry : 0/0
  4825 ;;		On exit  : 0/0
  4826 ;;		Unchanged: 0/0
  4827 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4828 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4829 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4830 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4831 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4832 ;;Total ram usage:        0 bytes
  4833 ;; Hardware stack levels used:    1
  4834 ;; Hardware stack levels required when called:    8
  4835 ;; This function calls:
  4836 ;;		_lcdClear
  4837 ;;		_printf
  4838 ;; This function is called by:
  4839 ;;		_showInterface
  4840 ;; This function uses a non-reentrant model
  4841 ;;
  4842                           
  4843                           	psect	text23
  4844  002CAE                     __ptext23:
  4845                           	opt stack 0
  4846  002CAE                     _runSelect:
  4847                           	opt stack 21
  4848                           
  4849                           ;interface.c: 106: lcdClear();
  4850                           
  4851                           ;incstack = 0
  4852  002CAE  EC46  F017         	call	_lcdClear	;wreg free
  4853                           
  4854                           ;interface.c: 107: printf("select run:     \n");
  4855  002CB2  0EF9               	movlw	low STR_15
  4856  002CB4  0100               	movlb	0	; () banked
  4857  002CB6  6FC0               	movwf	printf@f& (0+255),b
  4858  002CB8  0EFE               	movlw	high STR_15
  4859  002CBA  0100               	movlb	0	; () banked
  4860  002CBC  6FC1               	movwf	(printf@f+1)& (0+255),b
  4861  002CBE  EC09  F000         	call	_printf	;wreg free
  4862                           
  4863                           ;interface.c: 108: printf("[1,2,3,4]     *>");
  4864  002CC2  0E51               	movlw	low STR_16
  4865  002CC4  0100               	movlb	0	; () banked
  4866  002CC6  6FC0               	movwf	printf@f& (0+255),b
  4867  002CC8  0EFF               	movlw	high STR_16
  4868  002CCA  0100               	movlb	0	; () banked
  4869  002CCC  6FC1               	movwf	(printf@f+1)& (0+255),b
  4870  002CCE  EC09  F000         	call	_printf	;wreg free
  4871  002CD2  0012               	return		;funcret
  4872  002CD4                     __end_of_runSelect:
  4873                           	opt stack 0
  4874                           tblptru	equ	0xFF8
  4875                           tblptrh	equ	0xFF7
  4876                           tblptrl	equ	0xFF6
  4877                           tablat	equ	0xFF5
  4878                           prodh	equ	0xFF4
  4879                           prodl	equ	0xFF3
  4880                           intcon	equ	0xFF2
  4881                           postinc0	equ	0xFEE
  4882                           wreg	equ	0xFE8
  4883                           postdec1	equ	0xFE5
  4884                           plusw1	equ	0xFE3
  4885                           fsr1l	equ	0xFE1
  4886                           postinc2	equ	0xFDE
  4887                           postdec2	equ	0xFDD
  4888                           plusw2	equ	0xFDB
  4889                           fsr2h	equ	0xFDA
  4890                           fsr2l	equ	0xFD9
  4891                           status	equ	0xFD8
  4892                           
  4893 ;; *************** function _runMenu *****************
  4894 ;; Defined at:
  4895 ;;		line 111 in file "interface.c"
  4896 ;; Parameters:    Size  Location     Type
  4897 ;;  key             1    wreg     unsigned char 
  4898 ;; Auto vars:     Size  Location     Type
  4899 ;;  key             1   57[COMRAM] unsigned char 
  4900 ;; Return value:  Size  Location     Type
  4901 ;;                  1    wreg      void 
  4902 ;; Registers used:
  4903 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  4904 ;; Tracked objects:
  4905 ;;		On entry : 0/0
  4906 ;;		On exit  : 0/0
  4907 ;;		Unchanged: 0/0
  4908 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4909 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4910 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4911 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4912 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4913 ;;Total ram usage:        1 bytes
  4914 ;; Hardware stack levels used:    1
  4915 ;; Hardware stack levels required when called:    8
  4916 ;; This function calls:
  4917 ;;		_lcdClear
  4918 ;;		_printf
  4919 ;; This function is called by:
  4920 ;;		_showInterface
  4921 ;; This function uses a non-reentrant model
  4922 ;;
  4923                           
  4924                           	psect	text24
  4925  002C32                     __ptext24:
  4926                           	opt stack 0
  4927  002C32                     _runMenu:
  4928                           	opt stack 21
  4929                           
  4930                           ;incstack = 0
  4931                           ;runMenu@key stored from wreg
  4932  002C32  6E3A               	movwf	runMenu@key,c
  4933                           
  4934                           ;interface.c: 112: lcdClear();
  4935  002C34  EC46  F017         	call	_lcdClear	;wreg free
  4936                           
  4937                           ;interface.c: 113: printf("%c) time  <A     \n",key);
  4938  002C38  0EC2               	movlw	low STR_17
  4939  002C3A  0100               	movlb	0	; () banked
  4940  002C3C  6FC0               	movwf	printf@f& (0+255),b
  4941  002C3E  0EFE               	movlw	high STR_17
  4942  002C40  0100               	movlb	0	; () banked
  4943  002C42  6FC1               	movwf	(printf@f+1)& (0+255),b
  4944  002C44  C03A  F0C2         	movff	runMenu@key,?_printf+2
  4945  002C48  0100               	movlb	0	; () banked
  4946  002C4A  6BC3               	clrf	(?_printf+3)& (0+255),b
  4947  002C4C  EC09  F000         	call	_printf	;wreg free
  4948                           
  4949                           ;interface.c: 114: printf( "   stats <B   *>");
  4950  002C50  0E73               	movlw	low STR_18
  4951  002C52  0100               	movlb	0	; () banked
  4952  002C54  6FC0               	movwf	printf@f& (0+255),b
  4953  002C56  0EFF               	movlw	high STR_18
  4954  002C58  0100               	movlb	0	; () banked
  4955  002C5A  6FC1               	movwf	(printf@f+1)& (0+255),b
  4956  002C5C  EC09  F000         	call	_printf	;wreg free
  4957  002C60  0012               	return		;funcret
  4958  002C62                     __end_of_runMenu:
  4959                           	opt stack 0
  4960                           tblptru	equ	0xFF8
  4961                           tblptrh	equ	0xFF7
  4962                           tblptrl	equ	0xFF6
  4963                           tablat	equ	0xFF5
  4964                           prodh	equ	0xFF4
  4965                           prodl	equ	0xFF3
  4966                           intcon	equ	0xFF2
  4967                           postinc0	equ	0xFEE
  4968                           wreg	equ	0xFE8
  4969                           postdec1	equ	0xFE5
  4970                           plusw1	equ	0xFE3
  4971                           fsr1l	equ	0xFE1
  4972                           postinc2	equ	0xFDE
  4973                           postdec2	equ	0xFDD
  4974                           plusw2	equ	0xFDB
  4975                           fsr2h	equ	0xFDA
  4976                           fsr2l	equ	0xFD9
  4977                           status	equ	0xFD8
  4978                           
  4979 ;; *************** function _readKeypad *****************
  4980 ;; Defined at:
  4981 ;;		line 36 in file "keypad.c"
  4982 ;; Parameters:    Size  Location     Type
  4983 ;;		None
  4984 ;; Auto vars:     Size  Location     Type
  4985 ;;  key             1   35[COMRAM] unsigned char 
  4986 ;; Return value:  Size  Location     Type
  4987 ;;                  1    wreg      unsigned char 
  4988 ;; Registers used:
  4989 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
  4990 ;; Tracked objects:
  4991 ;;		On entry : 0/0
  4992 ;;		On exit  : 0/0
  4993 ;;		Unchanged: 0/0
  4994 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  4995 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4996 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4997 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4998 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  4999 ;;Total ram usage:        1 bytes
  5000 ;; Hardware stack levels used:    1
  5001 ;; Hardware stack levels required when called:    3
  5002 ;; This function calls:
  5003 ;;		Nothing
  5004 ;; This function is called by:
  5005 ;;		_sortBattery
  5006 ;;		_pause
  5007 ;;		_showInterface
  5008 ;; This function uses a non-reentrant model
  5009 ;;
  5010                           
  5011                           	psect	text25
  5012  002CD4                     __ptext25:
  5013                           	opt stack 0
  5014  002CD4                     _readKeypad:
  5015                           	opt stack 26
  5016  002CD4                     l197:
  5017  002CD4  A281               	btfss	3969,1,c	;volatile
  5018  002CD6  D7FE               	goto	l197
  5019                           
  5020                           ;keypad.c: 38: char key = (PORTB & 0xF0) >> 4;
  5021  002CD8  3881               	swapf	3969,w,c	;volatile
  5022  002CDA  0B0F               	andlw	15
  5023  002CDC  0B0F               	andlw	15
  5024  002CDE  6E24               	movwf	readKeypad@key,c
  5025  002CE0                     l200:
  5026  002CE0  B281               	btfsc	3969,1,c	;volatile
  5027  002CE2  D7FE               	goto	l200
  5028                           
  5029                           ;keypad.c: 40: return keys[key];
  5030  002CE4  5024               	movf	readKeypad@key,w,c
  5031  002CE6  0D01               	mullw	1
  5032  002CE8  0E69               	movlw	low _keys
  5033  002CEA  24F3               	addwf	prodl,w,c
  5034  002CEC  6EF6               	movwf	tblptrl,c
  5035  002CEE  0EFE               	movlw	high _keys
  5036  002CF0  20F4               	addwfc	prodh,w,c
  5037  002CF2  6EF7               	movwf	tblptrh,c
  5038  002CF4                     	if	0	;There are less than 3 active tblptr bytes
  5039  002CF4                     	endif
  5040  002CF4  0008               	tblrd		*
  5041  002CF6  50F5               	movf	tablat,w,c
  5042  002CF8  0012               	return	
  5043  002CFA                     __end_of_readKeypad:
  5044                           	opt stack 0
  5045                           tblptru	equ	0xFF8
  5046                           tblptrh	equ	0xFF7
  5047                           tblptrl	equ	0xFF6
  5048                           tablat	equ	0xFF5
  5049                           prodh	equ	0xFF4
  5050                           prodl	equ	0xFF3
  5051                           intcon	equ	0xFF2
  5052                           postinc0	equ	0xFEE
  5053                           wreg	equ	0xFE8
  5054                           postdec1	equ	0xFE5
  5055                           plusw1	equ	0xFE3
  5056                           fsr1l	equ	0xFE1
  5057                           postinc2	equ	0xFDE
  5058                           postdec2	equ	0xFDD
  5059                           plusw2	equ	0xFDB
  5060                           fsr2h	equ	0xFDA
  5061                           fsr2l	equ	0xFD9
  5062                           status	equ	0xFD8
  5063                           
  5064 ;; *************** function _mainMenu *****************
  5065 ;; Defined at:
  5066 ;;		line 99 in file "interface.c"
  5067 ;; Parameters:    Size  Location     Type
  5068 ;;		None
  5069 ;; Auto vars:     Size  Location     Type
  5070 ;;		None
  5071 ;; Return value:  Size  Location     Type
  5072 ;;                  1    wreg      void 
  5073 ;; Registers used:
  5074 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5075 ;; Tracked objects:
  5076 ;;		On entry : 0/0
  5077 ;;		On exit  : 0/0
  5078 ;;		Unchanged: 0/0
  5079 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5080 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5081 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5082 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5083 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5084 ;;Total ram usage:        0 bytes
  5085 ;; Hardware stack levels used:    1
  5086 ;; Hardware stack levels required when called:    8
  5087 ;; This function calls:
  5088 ;;		_lcdClear
  5089 ;;		_printf
  5090 ;; This function is called by:
  5091 ;;		_showInterface
  5092 ;; This function uses a non-reentrant model
  5093 ;;
  5094                           
  5095                           	psect	text26
  5096  002CFA                     __ptext26:
  5097                           	opt stack 0
  5098  002CFA                     _mainMenu:
  5099                           	opt stack 21
  5100                           
  5101                           ;interface.c: 100: lcdClear();
  5102                           
  5103                           ;incstack = 0
  5104  002CFA  EC46  F017         	call	_lcdClear	;wreg free
  5105                           
  5106                           ;interface.c: 101: printf("start   <B      \n");
  5107  002CFE  0ED5               	movlw	low STR_13
  5108  002D00  0100               	movlb	0	; () banked
  5109  002D02  6FC0               	movwf	printf@f& (0+255),b
  5110  002D04  0EFE               	movlw	high STR_13
  5111  002D06  0100               	movlb	0	; () banked
  5112  002D08  6FC1               	movwf	(printf@f+1)& (0+255),b
  5113  002D0A  EC09  F000         	call	_printf	;wreg free
  5114                           
  5115                           ;interface.c: 102: printf("history <C    *>");
  5116  002D0E  0E62               	movlw	low STR_14
  5117  002D10  0100               	movlb	0	; () banked
  5118  002D12  6FC0               	movwf	printf@f& (0+255),b
  5119  002D14  0EFF               	movlw	high STR_14
  5120  002D16  0100               	movlb	0	; () banked
  5121  002D18  6FC1               	movwf	(printf@f+1)& (0+255),b
  5122  002D1A  EC09  F000         	call	_printf	;wreg free
  5123  002D1E  0012               	return		;funcret
  5124  002D20                     __end_of_mainMenu:
  5125                           	opt stack 0
  5126                           tblptru	equ	0xFF8
  5127                           tblptrh	equ	0xFF7
  5128                           tblptrl	equ	0xFF6
  5129                           tablat	equ	0xFF5
  5130                           prodh	equ	0xFF4
  5131                           prodl	equ	0xFF3
  5132                           intcon	equ	0xFF2
  5133                           postinc0	equ	0xFEE
  5134                           wreg	equ	0xFE8
  5135                           postdec1	equ	0xFE5
  5136                           plusw1	equ	0xFE3
  5137                           fsr1l	equ	0xFE1
  5138                           postinc2	equ	0xFDE
  5139                           postdec2	equ	0xFDD
  5140                           plusw2	equ	0xFDB
  5141                           fsr2h	equ	0xFDA
  5142                           fsr2l	equ	0xFD9
  5143                           status	equ	0xFD8
  5144                           
  5145 ;; *************** function _initRTC *****************
  5146 ;; Defined at:
  5147 ;;		line 19 in file "RTC.c"
  5148 ;; Parameters:    Size  Location     Type
  5149 ;;		None
  5150 ;; Auto vars:     Size  Location     Type
  5151 ;;		None
  5152 ;; Return value:  Size  Location     Type
  5153 ;;                  1    wreg      void 
  5154 ;; Registers used:
  5155 ;;		wreg, status,2, status,0, cstack
  5156 ;; Tracked objects:
  5157 ;;		On entry : 0/0
  5158 ;;		On exit  : 0/0
  5159 ;;		Unchanged: 0/0
  5160 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5161 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5162 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5163 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5164 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5165 ;;Total ram usage:        0 bytes
  5166 ;; Hardware stack levels used:    1
  5167 ;; Hardware stack levels required when called:    5
  5168 ;; This function calls:
  5169 ;;		_I2C_Master_Init
  5170 ;; This function is called by:
  5171 ;;		_showInterface
  5172 ;; This function uses a non-reentrant model
  5173 ;;
  5174                           
  5175                           	psect	text27
  5176  002E28                     __ptext27:
  5177                           	opt stack 0
  5178  002E28                     _initRTC:
  5179                           	opt stack 24
  5180                           
  5181                           ;RTC.c: 20: I2C_Master_Init(10000);
  5182                           
  5183                           ;incstack = 0
  5184  002E28  0E10               	movlw	16
  5185  002E2A  6E31               	movwf	I2C_Master_Init@c,c
  5186  002E2C  0E27               	movlw	39
  5187  002E2E  6E32               	movwf	I2C_Master_Init@c+1,c
  5188  002E30  0E00               	movlw	0
  5189  002E32  6E33               	movwf	I2C_Master_Init@c+2,c
  5190  002E34  0E00               	movlw	0
  5191  002E36  6E34               	movwf	I2C_Master_Init@c+3,c
  5192  002E38  EC90  F014         	call	_I2C_Master_Init	;wreg free
  5193  002E3C  0012               	return		;funcret
  5194  002E3E                     __end_of_initRTC:
  5195                           	opt stack 0
  5196                           tblptru	equ	0xFF8
  5197                           tblptrh	equ	0xFF7
  5198                           tblptrl	equ	0xFF6
  5199                           tablat	equ	0xFF5
  5200                           prodh	equ	0xFF4
  5201                           prodl	equ	0xFF3
  5202                           intcon	equ	0xFF2
  5203                           postinc0	equ	0xFEE
  5204                           wreg	equ	0xFE8
  5205                           postdec1	equ	0xFE5
  5206                           plusw1	equ	0xFE3
  5207                           fsr1l	equ	0xFE1
  5208                           postinc2	equ	0xFDE
  5209                           postdec2	equ	0xFDD
  5210                           plusw2	equ	0xFDB
  5211                           fsr2h	equ	0xFDA
  5212                           fsr2l	equ	0xFD9
  5213                           status	equ	0xFD8
  5214                           
  5215 ;; *************** function _I2C_Master_Init *****************
  5216 ;; Defined at:
  5217 ;;		line 13 in file "I2C.c"
  5218 ;; Parameters:    Size  Location     Type
  5219 ;;  c               4   48[COMRAM] const unsigned long 
  5220 ;; Auto vars:     Size  Location     Type
  5221 ;;		None
  5222 ;; Return value:  Size  Location     Type
  5223 ;;                  1    wreg      void 
  5224 ;; Registers used:
  5225 ;;		wreg, status,2, status,0, cstack
  5226 ;; Tracked objects:
  5227 ;;		On entry : 0/0
  5228 ;;		On exit  : 0/0
  5229 ;;		Unchanged: 0/0
  5230 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5231 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5232 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5233 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5234 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5235 ;;Total ram usage:        8 bytes
  5236 ;; Hardware stack levels used:    1
  5237 ;; Hardware stack levels required when called:    4
  5238 ;; This function calls:
  5239 ;;		___lldiv
  5240 ;; This function is called by:
  5241 ;;		_initRTC
  5242 ;;		_testFrequency
  5243 ;; This function uses a non-reentrant model
  5244 ;;
  5245                           
  5246                           	psect	text28
  5247  002920                     __ptext28:
  5248                           	opt stack 0
  5249  002920                     _I2C_Master_Init:
  5250                           	opt stack 24
  5251                           
  5252                           ;I2C.c: 16: SSPSTAT = 0b00000000;
  5253                           
  5254                           ;incstack = 0
  5255  002920  0E00               	movlw	0
  5256  002922  6EC7               	movwf	4039,c	;volatile
  5257                           
  5258                           ;I2C.c: 17: SSPCON1 = 0b00101000;
  5259  002924  0E28               	movlw	40
  5260  002926  6EC6               	movwf	4038,c	;volatile
  5261                           
  5262                           ;I2C.c: 18: SSPCON2 = 0b00000000;
  5263  002928  0E00               	movlw	0
  5264  00292A  6EC5               	movwf	4037,c	;volatile
  5265                           
  5266                           ;I2C.c: 19: SSPADD = (10000000/(4*c))-1;
  5267  00292C  0E80               	movlw	128
  5268  00292E  6E24               	movwf	___lldiv@dividend,c
  5269  002930  0E96               	movlw	150
  5270  002932  6E25               	movwf	___lldiv@dividend+1,c
  5271  002934  0E98               	movlw	152
  5272  002936  6E26               	movwf	___lldiv@dividend+2,c
  5273  002938  0E00               	movlw	0
  5274  00293A  6E27               	movwf	___lldiv@dividend+3,c
  5275  00293C  C031  F035         	movff	I2C_Master_Init@c,??_I2C_Master_Init
  5276  002940  C032  F036         	movff	I2C_Master_Init@c+1,??_I2C_Master_Init+1
  5277  002944  C033  F037         	movff	I2C_Master_Init@c+2,??_I2C_Master_Init+2
  5278  002948  C034  F038         	movff	I2C_Master_Init@c+3,??_I2C_Master_Init+3
  5279  00294C  0E02               	movlw	2
  5280  00294E                     u5605:
  5281  00294E  90D8               	bcf	status,0,c
  5282  002950  3635               	rlcf	??_I2C_Master_Init,f,c
  5283  002952  3636               	rlcf	??_I2C_Master_Init+1,f,c
  5284  002954  3637               	rlcf	??_I2C_Master_Init+2,f,c
  5285  002956  3638               	rlcf	??_I2C_Master_Init+3,f,c
  5286  002958  2EE8               	decfsz	wreg,f,c
  5287  00295A  D7F9               	goto	u5605
  5288  00295C  C035  F028         	movff	??_I2C_Master_Init,___lldiv@divisor
  5289  002960  C036  F029         	movff	??_I2C_Master_Init+1,___lldiv@divisor+1
  5290  002964  C037  F02A         	movff	??_I2C_Master_Init+2,___lldiv@divisor+2
  5291  002968  C038  F02B         	movff	??_I2C_Master_Init+3,___lldiv@divisor+3
  5292  00296C  EC0A  F013         	call	___lldiv	;wreg free
  5293  002970  0424               	decf	?___lldiv,w,c
  5294  002972  6EC8               	movwf	4040,c	;volatile
  5295                           
  5296                           ;I2C.c: 20: TRISC3 = 1;
  5297  002974  8694               	bsf	3988,3,c	;volatile
  5298                           
  5299                           ;I2C.c: 21: TRISC4 = 1;
  5300  002976  8894               	bsf	3988,4,c	;volatile
  5301  002978  0012               	return		;funcret
  5302  00297A                     __end_of_I2C_Master_Init:
  5303                           	opt stack 0
  5304                           tblptru	equ	0xFF8
  5305                           tblptrh	equ	0xFF7
  5306                           tblptrl	equ	0xFF6
  5307                           tablat	equ	0xFF5
  5308                           prodh	equ	0xFF4
  5309                           prodl	equ	0xFF3
  5310                           intcon	equ	0xFF2
  5311                           postinc0	equ	0xFEE
  5312                           wreg	equ	0xFE8
  5313                           postdec1	equ	0xFE5
  5314                           plusw1	equ	0xFE3
  5315                           fsr1l	equ	0xFE1
  5316                           postinc2	equ	0xFDE
  5317                           postdec2	equ	0xFDD
  5318                           plusw2	equ	0xFDB
  5319                           fsr2h	equ	0xFDA
  5320                           fsr2l	equ	0xFD9
  5321                           status	equ	0xFD8
  5322                           
  5323 ;; *************** function _dateTime *****************
  5324 ;; Defined at:
  5325 ;;		line 84 in file "interface.c"
  5326 ;; Parameters:    Size  Location     Type
  5327 ;;		None
  5328 ;; Auto vars:     Size  Location     Type
  5329 ;;		None
  5330 ;; Return value:  Size  Location     Type
  5331 ;;                  1    wreg      void 
  5332 ;; Registers used:
  5333 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5334 ;; Tracked objects:
  5335 ;;		On entry : 0/0
  5336 ;;		On exit  : 0/0
  5337 ;;		Unchanged: 0/0
  5338 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5339 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5340 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5341 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5342 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5343 ;;Total ram usage:        0 bytes
  5344 ;; Hardware stack levels used:    1
  5345 ;; Hardware stack levels required when called:    8
  5346 ;; This function calls:
  5347 ;;		_lcdClear
  5348 ;;		_printf
  5349 ;; This function is called by:
  5350 ;;		_showInterface
  5351 ;; This function uses a non-reentrant model
  5352 ;;
  5353                           
  5354                           	psect	text29
  5355  002D20                     __ptext29:
  5356                           	opt stack 0
  5357  002D20                     _dateTime:
  5358                           	opt stack 21
  5359                           
  5360                           ;interface.c: 94: lcdClear();
  5361                           
  5362                           ;incstack = 0
  5363  002D20  EC46  F017         	call	_lcdClear	;wreg free
  5364                           
  5365                           ;interface.c: 95: printf("  hh:mm:ss      \n");
  5366  002D24  0EE7               	movlw	low STR_11
  5367  002D26  0100               	movlb	0	; () banked
  5368  002D28  6FC0               	movwf	printf@f& (0+255),b
  5369  002D2A  0EFE               	movlw	high STR_11
  5370  002D2C  0100               	movlb	0	; () banked
  5371  002D2E  6FC1               	movwf	(printf@f+1)& (0+255),b
  5372  002D30  EC09  F000         	call	_printf	;wreg free
  5373                           
  5374                           ;interface.c: 96: printf("  mm:dd:yy    A>");
  5375  002D34  0E95               	movlw	low STR_12
  5376  002D36  0100               	movlb	0	; () banked
  5377  002D38  6FC0               	movwf	printf@f& (0+255),b
  5378  002D3A  0EFF               	movlw	high STR_12
  5379  002D3C  0100               	movlb	0	; () banked
  5380  002D3E  6FC1               	movwf	(printf@f+1)& (0+255),b
  5381  002D40  EC09  F000         	call	_printf	;wreg free
  5382  002D44  0012               	return		;funcret
  5383  002D46                     __end_of_dateTime:
  5384                           	opt stack 0
  5385                           tblptru	equ	0xFF8
  5386                           tblptrh	equ	0xFF7
  5387                           tblptrl	equ	0xFF6
  5388                           tablat	equ	0xFF5
  5389                           prodh	equ	0xFF4
  5390                           prodl	equ	0xFF3
  5391                           intcon	equ	0xFF2
  5392                           postinc0	equ	0xFEE
  5393                           wreg	equ	0xFE8
  5394                           postdec1	equ	0xFE5
  5395                           plusw1	equ	0xFE3
  5396                           fsr1l	equ	0xFE1
  5397                           postinc2	equ	0xFDE
  5398                           postdec2	equ	0xFDD
  5399                           plusw2	equ	0xFDB
  5400                           fsr2h	equ	0xFDA
  5401                           fsr2l	equ	0xFD9
  5402                           status	equ	0xFD8
  5403                           
  5404 ;; *************** function _printf *****************
  5405 ;; Defined at:
  5406 ;;		line 464 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  5407 ;; Parameters:    Size  Location     Type
  5408 ;;  f               2   64[BANK0 ] PTR const unsigned char 
  5409 ;;		 -> STR_22(17), STR_21(18), STR_20(17), STR_19(18), 
  5410 ;;		 -> STR_18(17), STR_17(19), STR_16(17), STR_15(18), 
  5411 ;;		 -> STR_14(17), STR_13(18), STR_12(17), STR_11(18), 
  5412 ;;		 -> STR_10(9), STR_9(8), STR_8(24), STR_7(15), 
  5413 ;;		 -> STR_6(17), STR_5(21), STR_4(17), STR_3(14), 
  5414 ;;		 -> STR_2(20), STR_1(8), 
  5415 ;; Auto vars:     Size  Location     Type
  5416 ;;  idx             1    3[BANK1 ] unsigned char 
  5417 ;;  val             4   16[BANK1 ] unsigned long 
  5418 ;;  tmpval          4   12[BANK1 ] struct .
  5419 ;;  fval            3   20[BANK1 ] struct .
  5420 ;;  cp              3    0        PTR const unsigned char 
  5421 ;;  exp             2   10[BANK1 ] int 
  5422 ;;  prec            2    8[BANK1 ] int 
  5423 ;;  flag            2    6[BANK1 ] unsigned short 
  5424 ;;  ap              2    4[BANK1 ] PTR void [1]
  5425 ;;		 -> ?_printf(2), 
  5426 ;;  len             2    0        unsigned int 
  5427 ;;  width           2    0        int 
  5428 ;;  c               1   23[BANK1 ] char 
  5429 ;;  d               1    0        unsigned char 
  5430 ;; Return value:  Size  Location     Type
  5431 ;;                  2   64[BANK0 ] int 
  5432 ;; Registers used:
  5433 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  5434 ;; Tracked objects:
  5435 ;;		On entry : 0/0
  5436 ;;		On exit  : 0/0
  5437 ;;		Unchanged: 0/0
  5438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  5439 ;;      Params:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5440 ;;      Locals:         0       0      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5441 ;;      Temps:          0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5442 ;;      Totals:         0      13      24       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  5443 ;;Total ram usage:       37 bytes
  5444 ;; Hardware stack levels used:    1
  5445 ;; Hardware stack levels required when called:    7
  5446 ;; This function calls:
  5447 ;;		___awdiv
  5448 ;;		___ftadd
  5449 ;;		___ftge
  5450 ;;		___ftmul
  5451 ;;		___ftneg
  5452 ;;		___ftsub
  5453 ;;		___fttol
  5454 ;;		___lldiv
  5455 ;;		___llmod
  5456 ;;		___lltoft
  5457 ;;		___wmul
  5458 ;;		__div_to_l_
  5459 ;;		__tdiv_to_l_
  5460 ;;		_fround
  5461 ;;		_putch
  5462 ;;		_scale
  5463 ;; This function is called by:
  5464 ;;		_main
  5465 ;;		_sortBattery
  5466 ;;		_pause
  5467 ;;		_dateTime
  5468 ;;		_mainMenu
  5469 ;;		_runSelect
  5470 ;;		_runMenu
  5471 ;;		_runTime
  5472 ;;		_runStats
  5473 ;;		_testFrequency
  5474 ;; This function uses a non-reentrant model
  5475 ;;
  5476                           
  5477                           	psect	text30
  5478  000012                     __ptext30:
  5479                           	opt stack 0
  5480  000012                     _printf:
  5481                           	opt stack 22
  5482                           
  5483                           ;doprnt.c: 466: va_list ap;
  5484                           ;doprnt.c: 499: signed char c;
  5485                           ;doprnt.c: 501: int width;
  5486                           ;doprnt.c: 504: int prec;
  5487                           ;doprnt.c: 508: unsigned short flag;
  5488                           ;doprnt.c: 515: char d;
  5489                           ;doprnt.c: 516: double fval;
  5490                           ;doprnt.c: 517: int exp;
  5491                           ;doprnt.c: 523: union {
  5492                           ;doprnt.c: 524: unsigned long vd;
  5493                           ;doprnt.c: 525: double integ;
  5494                           ;doprnt.c: 526: } tmpval;
  5495                           ;doprnt.c: 528: unsigned long val;
  5496                           ;doprnt.c: 529: unsigned len;
  5497                           ;doprnt.c: 530: const char * cp;
  5498                           ;doprnt.c: 533: *ap = __va_start();
  5499                           
  5500                           ;incstack = 0
  5501  000012  0EC2               	movlw	low (?_printf+2)
  5502  000014  0101               	movlb	1	; () banked
  5503  000016  6F04               	movwf	printf@ap& (0+255),b
  5504  000018  0E00               	movlw	high (?_printf+2)
  5505  00001A  0101               	movlb	1	; () banked
  5506  00001C  6F05               	movwf	(printf@ap+1)& (0+255),b
  5507                           
  5508                           ;doprnt.c: 536: while(c = *f++) {
  5509  00001E  EF8F  F004         	goto	l5763
  5510  000022                     l5545:
  5511                           
  5512                           ; BSR set to: 1
  5513                           ;doprnt.c: 538: if(c != '%')
  5514  000022  0E25               	movlw	37
  5515  000024  0101               	movlb	1	; () banked
  5516  000026  1917               	xorwf	printf@c& (0+255),w,b
  5517  000028  B4D8               	btfsc	status,2,c
  5518  00002A  D006               	goto	l5549
  5519                           
  5520                           ; BSR set to: 1
  5521                           ;doprnt.c: 540: {
  5522                           ;doprnt.c: 541: (putch(c) );
  5523  00002C  0101               	movlb	1	; () banked
  5524  00002E  5117               	movf	printf@c& (0+255),w,b
  5525  000030  ECC8  F016         	call	_putch
  5526                           
  5527                           ;doprnt.c: 542: continue;
  5528  000034  EF8F  F004         	goto	l5763
  5529  000038                     l5549:
  5530                           
  5531                           ;doprnt.c: 543: }
  5532                           ;doprnt.c: 548: flag = 0;
  5533  000038  0E00               	movlw	0
  5534  00003A  0101               	movlb	1	; () banked
  5535  00003C  6F07               	movwf	(printf@flag+1)& (0+255),b
  5536  00003E  0E00               	movlw	0
  5537  000040  6F06               	movwf	printf@flag& (0+255),b
  5538                           
  5539                           ;doprnt.c: 635: switch(c = *f++) {
  5540  000042  D018               	goto	l5563
  5541  000044                     l5551:
  5542                           
  5543                           ; BSR set to: 1
  5544                           ;doprnt.c: 663: flag |= 0x400;
  5545  000044  0101               	movlb	1	; () banked
  5546  000046  8507               	bsf	(printf@flag+1)& (0+255),2,b
  5547                           
  5548                           ; BSR set to: 1
  5549                           ;doprnt.c: 698: case 'i':
  5550                           ;doprnt.c: 699: break;
  5551                           
  5552                           ; BSR set to: 1
  5553                           
  5554                           ;doprnt.c: 697: case 'd':
  5555                           
  5556                           ;doprnt.c: 664: break;
  5557  000048  D034               	goto	l5565
  5558  00004A                     l5553:
  5559                           
  5560                           ; BSR set to: 1
  5561                           ;doprnt.c: 721: flag |= 0x80;
  5562  00004A  0101               	movlb	1	; () banked
  5563  00004C  8F06               	bsf	printf@flag& (0+255),7,b
  5564                           
  5565                           ;doprnt.c: 723: break;
  5566  00004E  D031               	goto	l5565
  5567  000050                     l5555:
  5568                           
  5569                           ; BSR set to: 1
  5570                           ;doprnt.c: 799: c = (*(int *)__va_arg((*(int **)ap), (int)0));
  5571  000050  C104  FFD9         	movff	printf@ap,fsr2l
  5572  000054  C105  FFDA         	movff	printf@ap+1,fsr2h
  5573  000058  50DF               	movf	indf2,w,c
  5574  00005A  0101               	movlb	1	; () banked
  5575  00005C  6F17               	movwf	printf@c& (0+255),b
  5576                           
  5577                           ; BSR set to: 1
  5578  00005E  0E02               	movlw	2
  5579  000060  0101               	movlb	1	; () banked
  5580  000062  2704               	addwf	printf@ap& (0+255),f,b
  5581  000064  0E00               	movlw	0
  5582  000066  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  5583  000068                     l5559:
  5584                           
  5585                           ; BSR set to: 1
  5586                           ;doprnt.c: 809: (putch(c) );
  5587  000068  0101               	movlb	1	; () banked
  5588  00006A  5117               	movf	printf@c& (0+255),w,b
  5589  00006C  ECC8  F016         	call	_putch
  5590                           
  5591                           ;doprnt.c: 810: continue;
  5592  000070  EF8F  F004         	goto	l5763
  5593  000074                     l5563:
  5594  000074  C0C0  FFF6         	movff	printf@f,tblptrl
  5595  000078  C0C1  FFF7         	movff	printf@f+1,tblptrh
  5596  00007C  0100               	movlb	0	; () banked
  5597  00007E  4BC0               	infsnz	printf@f& (0+255),f,b
  5598  000080  2BC1               	incf	(printf@f+1)& (0+255),f,b
  5599  000082                     	if	0	;tblptru may be non-zero
  5600  000082                     	endif
  5601  000082                     	if	0	;tblptru may be non-zero
  5602  000082                     	endif
  5603  000082  0008               	tblrd		*
  5604  000084  CFF5 F117          	movff	tablat,printf@c
  5605  000088  0101               	movlb	1	; () banked
  5606  00008A  5117               	movf	printf@c& (0+255),w,b
  5607                           
  5608                           ; Switch size 1, requested type "space"
  5609                           ; Number of cases is 6, Range of values is 0 to 120
  5610                           ; switch strategies available:
  5611                           ; Name         Instructions Cycles
  5612                           ; simple_byte           19    10 (average)
  5613                           ;	Chosen strategy is simple_byte
  5614  00008C  0A00               	xorlw	0	; case 0
  5615  00008E  B4D8               	btfsc	status,2,c
  5616  000090  0012               	return	
  5617  000092  0A63               	xorlw	99	; case 99
  5618  000094  B4D8               	btfsc	status,2,c
  5619  000096  D7DC               	goto	l5555
  5620  000098  0A07               	xorlw	7	; case 100
  5621  00009A  B4D8               	btfsc	status,2,c
  5622  00009C  D00A               	goto	l5565
  5623  00009E  0A02               	xorlw	2	; case 102
  5624  0000A0  B4D8               	btfsc	status,2,c
  5625  0000A2  D7D0               	goto	l5551
  5626  0000A4  0A0F               	xorlw	15	; case 105
  5627  0000A6  B4D8               	btfsc	status,2,c
  5628  0000A8  D004               	goto	l5565
  5629  0000AA  0A11               	xorlw	17	; case 120
  5630  0000AC  B4D8               	btfsc	status,2,c
  5631  0000AE  D7CD               	goto	l5553
  5632  0000B0  D7DB               	goto	l5559
  5633  0000B2                     l5565:
  5634                           
  5635                           ;doprnt.c: 825: if(flag & (0x700)) {
  5636  0000B2  0E07               	movlw	7
  5637  0000B4  0101               	movlb	1	; () banked
  5638  0000B6  1507               	andwf	(printf@flag+1)& (0+255),w,b
  5639  0000B8  B4D8               	btfsc	status,2,c
  5640  0000BA  D2F4               	goto	l682
  5641                           
  5642                           ; BSR set to: 1
  5643                           ;doprnt.c: 829: prec = 6;
  5644  0000BC  0E00               	movlw	0
  5645  0000BE  0101               	movlb	1	; () banked
  5646  0000C0  6F09               	movwf	(printf@prec+1)& (0+255),b
  5647  0000C2  0E06               	movlw	6
  5648  0000C4  6F08               	movwf	printf@prec& (0+255),b
  5649                           
  5650                           ; BSR set to: 1
  5651                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  5652  0000C6  C104  FFD9         	movff	printf@ap,fsr2l
  5653  0000CA  C105  FFDA         	movff	printf@ap+1,fsr2h
  5654  0000CE  CFDE F114          	movff	postinc2,printf@fval
  5655  0000D2  CFDE F115          	movff	postinc2,printf@fval+1
  5656  0000D6  CFDD F116          	movff	postdec2,printf@fval+2
  5657                           
  5658                           ; BSR set to: 1
  5659  0000DA  0E03               	movlw	3
  5660  0000DC  0101               	movlb	1	; () banked
  5661  0000DE  2704               	addwf	printf@ap& (0+255),f,b
  5662  0000E0  0E00               	movlw	0
  5663  0000E2  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  5664                           
  5665                           ; BSR set to: 1
  5666                           ;doprnt.c: 831: if(fval < 0.0) {
  5667  0000E4  0101               	movlb	1	; () banked
  5668  0000E6  AF16               	btfss	(printf@fval+2)& (0+255),7,b
  5669  0000E8  D011               	goto	l5579
  5670                           
  5671                           ; BSR set to: 1
  5672                           ;doprnt.c: 832: fval = -fval;
  5673  0000EA  C114  F024         	movff	printf@fval,___ftneg@f1
  5674  0000EE  C115  F025         	movff	printf@fval+1,___ftneg@f1+1
  5675  0000F2  C116  F026         	movff	printf@fval+2,___ftneg@f1+2
  5676  0000F6  ECB6  F016         	call	___ftneg	;wreg free
  5677  0000FA  C024  F114         	movff	?___ftneg,printf@fval
  5678  0000FE  C025  F115         	movff	?___ftneg+1,printf@fval+1
  5679  000102  C026  F116         	movff	?___ftneg+2,printf@fval+2
  5680                           
  5681                           ;doprnt.c: 833: flag |= 0x03;
  5682  000106  0E03               	movlw	3
  5683  000108  0101               	movlb	1	; () banked
  5684  00010A  1306               	iorwf	printf@flag& (0+255),f,b
  5685  00010C                     l5579:
  5686                           
  5687                           ; BSR set to: 1
  5688                           ;doprnt.c: 834: }
  5689                           ;doprnt.c: 835: exp = 0;
  5690  00010C  0E00               	movlw	0
  5691  00010E  0101               	movlb	1	; () banked
  5692  000110  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5693  000112  0E00               	movlw	0
  5694  000114  6F0A               	movwf	printf@exp& (0+255),b
  5695                           
  5696                           ; BSR set to: 1
  5697                           ;doprnt.c: 836: if( fval!=0) {
  5698  000116  0101               	movlb	1	; () banked
  5699  000118  5114               	movf	printf@fval& (0+255),w,b
  5700  00011A  0101               	movlb	1	; () banked
  5701  00011C  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5702  00011E  0101               	movlb	1	; () banked
  5703  000120  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5704  000122  B4D8               	btfsc	status,2,c
  5705  000124  D091               	goto	l5607
  5706                           
  5707                           ; BSR set to: 1
  5708                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  5709  000126  0E82               	movlw	130
  5710  000128  0100               	movlb	0	; () banked
  5711  00012A  6FC7               	movwf	??_printf& (0+255),b
  5712  00012C  0EFF               	movlw	255
  5713  00012E  0100               	movlb	0	; () banked
  5714  000130  6FC8               	movwf	(??_printf+1)& (0+255),b
  5715  000132  C114  F0C9         	movff	printf@fval,??_printf+2
  5716  000136  C115  F0CA         	movff	printf@fval+1,??_printf+3
  5717  00013A  C116  F0CB         	movff	printf@fval+2,??_printf+4
  5718  00013E  C117  F0CC         	movff	printf@fval+3,??_printf+5
  5719  000142  0E10               	movlw	16
  5720  000144  D006               	goto	u5270
  5721  000146                     u5275:
  5722  000146  0100               	movlb	0	; () banked
  5723  000148  90D8               	bcf	status,0,c
  5724  00014A  33CC               	rrcf	(??_printf+5)& (0+255),f,b
  5725  00014C  33CB               	rrcf	(??_printf+4)& (0+255),f,b
  5726  00014E  33CA               	rrcf	(??_printf+3)& (0+255),f,b
  5727  000150  33C9               	rrcf	(??_printf+2)& (0+255),f,b
  5728  000152                     u5270:
  5729  000152  2EE8               	decfsz	wreg,f,c
  5730  000154  D7F8               	goto	u5275
  5731  000156  0100               	movlb	0	; () banked
  5732  000158  51C9               	movf	(??_printf+2)& (0+255),w,b
  5733  00015A  0100               	movlb	0	; () banked
  5734  00015C  25C7               	addwf	??_printf& (0+255),w,b
  5735  00015E  0101               	movlb	1	; () banked
  5736  000160  6F0A               	movwf	printf@exp& (0+255),b
  5737  000162  0E00               	movlw	0
  5738  000164  0100               	movlb	0	; () banked
  5739  000166  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  5740  000168  0101               	movlb	1	; () banked
  5741  00016A  6F0B               	movwf	(printf@exp+1)& (0+255),b
  5742                           
  5743                           ; BSR set to: 1
  5744                           ;doprnt.c: 838: exp--;
  5745  00016C  0101               	movlb	1	; () banked
  5746  00016E  070A               	decf	printf@exp& (0+255),f,b
  5747  000170  A0D8               	btfss	status,0,c
  5748  000172  070B               	decf	(printf@exp+1)& (0+255),f,b
  5749                           
  5750                           ; BSR set to: 1
  5751                           ;doprnt.c: 839: exp *= 3;
  5752  000174  C10A  F032         	movff	printf@exp,___wmul@multiplier
  5753  000178  C10B  F033         	movff	printf@exp+1,___wmul@multiplier+1
  5754  00017C  0E00               	movlw	0
  5755  00017E  6E35               	movwf	___wmul@multiplicand+1,c
  5756  000180  0E03               	movlw	3
  5757  000182  6E34               	movwf	___wmul@multiplicand,c
  5758  000184  ECA3  F016         	call	___wmul	;wreg free
  5759  000188  C032  F10A         	movff	?___wmul,printf@exp
  5760  00018C  C033  F10B         	movff	?___wmul+1,printf@exp+1
  5761                           
  5762                           ;doprnt.c: 840: exp /= 10;
  5763  000190  C10A  F02A         	movff	printf@exp,___awdiv@dividend
  5764  000194  C10B  F02B         	movff	printf@exp+1,___awdiv@dividend+1
  5765  000198  0E00               	movlw	0
  5766  00019A  6E2D               	movwf	___awdiv@divisor+1,c
  5767  00019C  0E0A               	movlw	10
  5768  00019E  6E2C               	movwf	___awdiv@divisor,c
  5769  0001A0  ECC8  F012         	call	___awdiv	;wreg free
  5770  0001A4  C02A  F10A         	movff	?___awdiv,printf@exp
  5771  0001A8  C02B  F10B         	movff	?___awdiv+1,printf@exp+1
  5772                           
  5773                           ;doprnt.c: 841: if(exp < 0)
  5774  0001AC  0101               	movlb	1	; () banked
  5775  0001AE  AF0B               	btfss	(printf@exp+1)& (0+255),7,b
  5776  0001B0  D004               	goto	l5595
  5777                           
  5778                           ; BSR set to: 1
  5779                           ;doprnt.c: 842: exp--;
  5780  0001B2  0101               	movlb	1	; () banked
  5781  0001B4  070A               	decf	printf@exp& (0+255),f,b
  5782  0001B6  A0D8               	btfss	status,0,c
  5783  0001B8  070B               	decf	(printf@exp+1)& (0+255),f,b
  5784  0001BA                     l5595:
  5785                           
  5786                           ; BSR set to: 1
  5787                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  5788  0001BA  0101               	movlb	1	; () banked
  5789  0001BC  510A               	movf	printf@exp& (0+255),w,b
  5790  0001BE  0800               	sublw	0
  5791  0001C0  EC9F  F004         	call	_scale
  5792  0001C4  C09B  F10C         	movff	?_scale,printf@tmpval
  5793  0001C8  C09C  F10D         	movff	?_scale+1,printf@tmpval+1
  5794  0001CC  C09D  F10E         	movff	?_scale+2,printf@tmpval+2
  5795                           
  5796                           ;doprnt.c: 847: tmpval.integ *= fval;
  5797  0001D0  C10C  F08C         	movff	printf@tmpval,___ftmul@f1
  5798  0001D4  C10D  F08D         	movff	printf@tmpval+1,___ftmul@f1+1
  5799  0001D8  C10E  F08E         	movff	printf@tmpval+2,___ftmul@f1+2
  5800  0001DC  C114  F08F         	movff	printf@fval,___ftmul@f2
  5801  0001E0  C115  F090         	movff	printf@fval+1,___ftmul@f2+1
  5802  0001E4  C116  F091         	movff	printf@fval+2,___ftmul@f2+2
  5803  0001E8  ECE8  F00B         	call	___ftmul	;wreg free
  5804  0001EC  C08C  F10C         	movff	?___ftmul,printf@tmpval
  5805  0001F0  C08D  F10D         	movff	?___ftmul+1,printf@tmpval+1
  5806  0001F4  C08E  F10E         	movff	?___ftmul+2,printf@tmpval+2
  5807                           
  5808                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  5809  0001F8  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5810  0001FC  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5811  000200  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5812  000204  0E00               	movlw	0
  5813  000206  6E27               	movwf	___ftge@ff2,c
  5814  000208  0E80               	movlw	128
  5815  00020A  6E28               	movwf	___ftge@ff2+1,c
  5816  00020C  0E3F               	movlw	63
  5817  00020E  6E29               	movwf	___ftge@ff2+2,c
  5818  000210  EC3A  F012         	call	___ftge	;wreg free
  5819  000214  B0D8               	btfsc	status,0,c
  5820  000216  D005               	goto	l5603
  5821                           
  5822                           ;doprnt.c: 849: exp--;
  5823  000218  0101               	movlb	1	; () banked
  5824  00021A  070A               	decf	printf@exp& (0+255),f,b
  5825  00021C  A0D8               	btfss	status,0,c
  5826  00021E  070B               	decf	(printf@exp+1)& (0+255),f,b
  5827  000220  D013               	goto	l5607
  5828  000222                     l5603:
  5829                           
  5830                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  5831  000222  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5832  000226  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5833  00022A  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5834  00022E  0E00               	movlw	0
  5835  000230  6E27               	movwf	___ftge@ff2,c
  5836  000232  0E20               	movlw	32
  5837  000234  6E28               	movwf	___ftge@ff2+1,c
  5838  000236  0E41               	movlw	65
  5839  000238  6E29               	movwf	___ftge@ff2+2,c
  5840  00023A  EC3A  F012         	call	___ftge	;wreg free
  5841  00023E  A0D8               	btfss	status,0,c
  5842  000240  D003               	goto	l5607
  5843                           
  5844                           ;doprnt.c: 851: exp++;
  5845  000242  0101               	movlb	1	; () banked
  5846  000244  4B0A               	infsnz	printf@exp& (0+255),f,b
  5847  000246  2B0B               	incf	(printf@exp+1)& (0+255),f,b
  5848  000248                     l5607:
  5849                           
  5850                           ;doprnt.c: 852: }
  5851                           ;doprnt.c: 1112: if(prec <= 12)
  5852  000248  0101               	movlb	1	; () banked
  5853  00024A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  5854  00024C  D008               	goto	l5609
  5855  00024E  0101               	movlb	1	; () banked
  5856  000250  5109               	movf	(printf@prec+1)& (0+255),w,b
  5857  000252  E11D               	bnz	l5611
  5858  000254  0E0D               	movlw	13
  5859  000256  0101               	movlb	1	; () banked
  5860  000258  5D08               	subwf	printf@prec& (0+255),w,b
  5861  00025A  B0D8               	btfsc	status,0,c
  5862  00025C  D018               	goto	l5611
  5863  00025E                     l5609:
  5864                           
  5865                           ; BSR set to: 1
  5866                           ;doprnt.c: 1113: fval += fround(prec);
  5867  00025E  C114  F0A5         	movff	printf@fval,___ftadd@f1
  5868  000262  C115  F0A6         	movff	printf@fval+1,___ftadd@f1+1
  5869  000266  C116  F0A7         	movff	printf@fval+2,___ftadd@f1+2
  5870  00026A  0101               	movlb	1	; () banked
  5871  00026C  5108               	movf	printf@prec& (0+255),w,b
  5872  00026E  EC1F  F009         	call	_fround
  5873  000272  C09B  F0A8         	movff	?_fround,___ftadd@f2
  5874  000276  C09C  F0A9         	movff	?_fround+1,___ftadd@f2+1
  5875  00027A  C09D  F0AA         	movff	?_fround+2,___ftadd@f2+2
  5876  00027E  ECEB  F007         	call	___ftadd	;wreg free
  5877  000282  C0A5  F114         	movff	?___ftadd,printf@fval
  5878  000286  C0A6  F115         	movff	?___ftadd+1,printf@fval+1
  5879  00028A  C0A7  F116         	movff	?___ftadd+2,printf@fval+2
  5880  00028E                     l5611:
  5881                           
  5882                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  5883  00028E  0101               	movlb	1	; () banked
  5884  000290  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5885  000292  D008               	goto	l5613
  5886  000294  0101               	movlb	1	; () banked
  5887  000296  510B               	movf	(printf@exp+1)& (0+255),w,b
  5888  000298  E12A               	bnz	l5619
  5889  00029A  0E0A               	movlw	10
  5890  00029C  0101               	movlb	1	; () banked
  5891  00029E  5D0A               	subwf	printf@exp& (0+255),w,b
  5892  0002A0  B0D8               	btfsc	status,0,c
  5893  0002A2  D025               	goto	l5619
  5894  0002A4                     l5613:
  5895                           
  5896                           ; BSR set to: 1
  5897  0002A4  0101               	movlb	1	; () banked
  5898  0002A6  5114               	movf	printf@fval& (0+255),w,b
  5899  0002A8  0101               	movlb	1	; () banked
  5900  0002AA  1115               	iorwf	(printf@fval+1)& (0+255),w,b
  5901  0002AC  0101               	movlb	1	; () banked
  5902  0002AE  1116               	iorwf	(printf@fval+2)& (0+255),w,b
  5903  0002B0  B4D8               	btfsc	status,2,c
  5904  0002B2  D05F               	goto	l5633
  5905                           
  5906                           ; BSR set to: 1
  5907  0002B4  C114  F0B1         	movff	printf@fval,___fttol@f1
  5908  0002B8  C115  F0B2         	movff	printf@fval+1,___fttol@f1+1
  5909  0002BC  C116  F0B3         	movff	printf@fval+2,___fttol@f1+2
  5910  0002C0  EC97  F00C         	call	___fttol	;wreg free
  5911  0002C4  0100               	movlb	0	; () banked
  5912  0002C6  51B1               	movf	?___fttol& (0+255),w,b
  5913  0002C8  0100               	movlb	0	; () banked
  5914  0002CA  11B2               	iorwf	(?___fttol+1)& (0+255),w,b
  5915  0002CC  0100               	movlb	0	; () banked
  5916  0002CE  11B3               	iorwf	(?___fttol+2)& (0+255),w,b
  5917  0002D0  0100               	movlb	0	; () banked
  5918  0002D2  11B4               	iorwf	(?___fttol+3)& (0+255),w,b
  5919  0002D4  A4D8               	btfss	status,2,c
  5920  0002D6  D04D               	goto	l5633
  5921                           
  5922                           ; BSR set to: 0
  5923  0002D8  0101               	movlb	1	; () banked
  5924  0002DA  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  5925  0002DC  D04A               	goto	l5633
  5926  0002DE  0101               	movlb	1	; () banked
  5927  0002E0  510B               	movf	(printf@exp+1)& (0+255),w,b
  5928  0002E2  E105               	bnz	l5619
  5929  0002E4  0E02               	movlw	2
  5930  0002E6  0101               	movlb	1	; () banked
  5931  0002E8  5D0A               	subwf	printf@exp& (0+255),w,b
  5932  0002EA  A0D8               	btfss	status,0,c
  5933  0002EC  D042               	goto	l5633
  5934  0002EE                     l5619:
  5935                           
  5936                           ; BSR set to: 1
  5937                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  5938  0002EE  C10C  F024         	movff	printf@tmpval,___ftge@ff1
  5939  0002F2  C10D  F025         	movff	printf@tmpval+1,___ftge@ff1+1
  5940  0002F6  C10E  F026         	movff	printf@tmpval+2,___ftge@ff1+2
  5941  0002FA  0E70               	movlw	112
  5942  0002FC  6E27               	movwf	___ftge@ff2,c
  5943  0002FE  0E89               	movlw	137
  5944  000300  6E28               	movwf	___ftge@ff2+1,c
  5945  000302  0E40               	movlw	64
  5946  000304  6E29               	movwf	___ftge@ff2+2,c
  5947  000306  EC3A  F012         	call	___ftge	;wreg free
  5948  00030A  B0D8               	btfsc	status,0,c
  5949  00030C  D003               	goto	l5623
  5950                           
  5951                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  5952  00030E  0101               	movlb	1	; () banked
  5953  000310  0EF7               	movlw	247
  5954  000312  D002               	goto	L1
  5955  000314                     l5623:
  5956                           
  5957                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  5958  000314  0101               	movlb	1	; () banked
  5959  000316  0EF8               	movlw	248
  5960  000318                     L1:
  5961  000318  270A               	addwf	printf@exp& (0+255),f,b
  5962  00031A  0EFF               	movlw	255
  5963  00031C  230B               	addwfc	(printf@exp+1)& (0+255),f,b
  5964                           
  5965                           ; BSR set to: 1
  5966                           ;doprnt.c: 1124: }
  5967                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  5968                           
  5969                           ; BSR set to: 1
  5970  00031E  0101               	movlb	1	; () banked
  5971  000320  510A               	movf	printf@exp& (0+255),w,b
  5972  000322  EC9F  F004         	call	_scale
  5973  000326  C09B  F10C         	movff	?_scale,printf@tmpval
  5974  00032A  C09C  F10D         	movff	?_scale+1,printf@tmpval+1
  5975  00032E  C09D  F10E         	movff	?_scale+2,printf@tmpval+2
  5976                           
  5977                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  5978  000332  C114  F024         	movff	printf@fval,__tdiv_to_l_@f1
  5979  000336  C115  F025         	movff	printf@fval+1,__tdiv_to_l_@f1+1
  5980  00033A  C116  F026         	movff	printf@fval+2,__tdiv_to_l_@f1+2
  5981  00033E  C10C  F027         	movff	printf@tmpval,__tdiv_to_l_@f2
  5982  000342  C10D  F028         	movff	printf@tmpval+1,__tdiv_to_l_@f2+1
  5983  000346  C10E  F029         	movff	printf@tmpval+2,__tdiv_to_l_@f2+2
  5984  00034A  ECD9  F00D         	call	__tdiv_to_l_	;wreg free
  5985  00034E  C024  F110         	movff	?__tdiv_to_l_,printf@val
  5986  000352  C025  F111         	movff	?__tdiv_to_l_+1,printf@val+1
  5987  000356  C026  F112         	movff	?__tdiv_to_l_+2,printf@val+2
  5988  00035A  C027  F113         	movff	?__tdiv_to_l_+3,printf@val+3
  5989                           
  5990                           ;doprnt.c: 1129: fval = 0.0;
  5991  00035E  0E00               	movlw	0
  5992  000360  0101               	movlb	1	; () banked
  5993  000362  6F14               	movwf	printf@fval& (0+255),b
  5994  000364  0E00               	movlw	0
  5995  000366  0101               	movlb	1	; () banked
  5996  000368  6F15               	movwf	(printf@fval+1)& (0+255),b
  5997  00036A  0E00               	movlw	0
  5998  00036C  0101               	movlb	1	; () banked
  5999  00036E  6F16               	movwf	(printf@fval+2)& (0+255),b
  6000                           
  6001                           ;doprnt.c: 1130: } else {
  6002  000370  D033               	goto	l5637
  6003  000372                     l5633:
  6004                           
  6005                           ;doprnt.c: 1131: val = (unsigned long)fval;
  6006  000372  C114  F0B1         	movff	printf@fval,___fttol@f1
  6007  000376  C115  F0B2         	movff	printf@fval+1,___fttol@f1+1
  6008  00037A  C116  F0B3         	movff	printf@fval+2,___fttol@f1+2
  6009  00037E  EC97  F00C         	call	___fttol	;wreg free
  6010  000382  C0B1  F110         	movff	?___fttol,printf@val
  6011  000386  C0B2  F111         	movff	?___fttol+1,printf@val+1
  6012  00038A  C0B3  F112         	movff	?___fttol+2,printf@val+2
  6013  00038E  C0B4  F113         	movff	?___fttol+3,printf@val+3
  6014                           
  6015                           ;doprnt.c: 1132: fval -= (double)val;
  6016  000392  C114  F0B1         	movff	printf@fval,___ftsub@f1
  6017  000396  C115  F0B2         	movff	printf@fval+1,___ftsub@f1+1
  6018  00039A  C116  F0B3         	movff	printf@fval+2,___ftsub@f1+2
  6019  00039E  C110  F02C         	movff	printf@val,___lltoft@c
  6020  0003A2  C111  F02D         	movff	printf@val+1,___lltoft@c+1
  6021  0003A6  C112  F02E         	movff	printf@val+2,___lltoft@c+2
  6022  0003AA  C113  F02F         	movff	printf@val+3,___lltoft@c+3
  6023  0003AE  EC62  F014         	call	___lltoft	;wreg free
  6024  0003B2  C02C  F0B4         	movff	?___lltoft,___ftsub@f2
  6025  0003B6  C02D  F0B5         	movff	?___lltoft+1,___ftsub@f2+1
  6026  0003BA  C02E  F0B6         	movff	?___lltoft+2,___ftsub@f2+2
  6027  0003BE  EC0C  F015         	call	___ftsub	;wreg free
  6028  0003C2  C0B1  F114         	movff	?___ftsub,printf@fval
  6029  0003C6  C0B2  F115         	movff	?___ftsub+1,printf@fval+1
  6030  0003CA  C0B3  F116         	movff	?___ftsub+2,printf@fval+2
  6031                           
  6032                           ;doprnt.c: 1133: exp = 0;
  6033  0003CE  0E00               	movlw	0
  6034  0003D0  0101               	movlb	1	; () banked
  6035  0003D2  6F0B               	movwf	(printf@exp+1)& (0+255),b
  6036  0003D4  0E00               	movlw	0
  6037  0003D6  6F0A               	movwf	printf@exp& (0+255),b
  6038  0003D8                     l5637:
  6039                           
  6040                           ; BSR set to: 1
  6041                           ;doprnt.c: 1134: }
  6042                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  6043  0003D8  0E01               	movlw	1
  6044  0003DA  0101               	movlb	1	; () banked
  6045  0003DC  6F17               	movwf	printf@c& (0+255),b
  6046  0003DE                     l5639:
  6047                           
  6048                           ; BSR set to: 1
  6049  0003DE  0E0A               	movlw	10
  6050  0003E0  0101               	movlb	1	; () banked
  6051  0003E2  1917               	xorwf	printf@c& (0+255),w,b
  6052  0003E4  B4D8               	btfsc	status,2,c
  6053  0003E6  D01E               	goto	l5651
  6054                           
  6055                           ; BSR set to: 1
  6056                           ;doprnt.c: 1137: if(val < dpowers[c])
  6057                           
  6058                           ; BSR set to: 1
  6059                           
  6060                           ; BSR set to: 1
  6061  0003E8  0101               	movlb	1	; () banked
  6062  0003EA  5117               	movf	printf@c& (0+255),w,b
  6063  0003EC  0D04               	mullw	4
  6064  0003EE  0ED3               	movlw	low _dpowers
  6065  0003F0  24F3               	addwf	prodl,w,c
  6066  0003F2  6EF6               	movwf	tblptrl,c
  6067  0003F4  0EFD               	movlw	high _dpowers
  6068  0003F6  20F4               	addwfc	prodh,w,c
  6069  0003F8  6EF7               	movwf	tblptrh,c
  6070  0003FA                     	if	0	;There are less than 3 active tblptr bytes
  6071  0003FA                     	endif
  6072  0003FA  0009               	tblrd		*+
  6073  0003FC  50F5               	movf	tablat,w,c
  6074  0003FE  0101               	movlb	1	; () banked
  6075  000400  5D10               	subwf	printf@val& (0+255),w,b
  6076  000402  0009               	tblrd		*+
  6077  000404  50F5               	movf	tablat,w,c
  6078  000406  0101               	movlb	1	; () banked
  6079  000408  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6080  00040A  0009               	tblrd		*+
  6081  00040C  50F5               	movf	tablat,w,c
  6082  00040E  0101               	movlb	1	; () banked
  6083  000410  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6084  000412  0009               	tblrd		*+
  6085  000414  50F5               	movf	tablat,w,c
  6086  000416  0101               	movlb	1	; () banked
  6087  000418  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6088  00041A  A0D8               	btfss	status,0,c
  6089  00041C  D003               	goto	l5651
  6090                           
  6091                           ; BSR set to: 1
  6092                           
  6093                           ; BSR set to: 1
  6094                           
  6095                           ; BSR set to: 1
  6096                           ;doprnt.c: 1138: break;
  6097  00041E  0101               	movlb	1	; () banked
  6098  000420  2B17               	incf	printf@c& (0+255),f,b
  6099  000422  D7DD               	goto	l5639
  6100  000424                     l5651:
  6101                           
  6102                           ; BSR set to: 1
  6103                           ;doprnt.c: 1175: {
  6104                           ;doprnt.c: 1188: if(flag & 0x03)
  6105  000424  0E03               	movlw	3
  6106  000426  0101               	movlb	1	; () banked
  6107  000428  1506               	andwf	printf@flag& (0+255),w,b
  6108  00042A  0100               	movlb	0	; () banked
  6109  00042C  6FC7               	movwf	??_printf& (0+255),b
  6110  00042E  0E00               	movlw	0
  6111  000430  0101               	movlb	1	; () banked
  6112  000432  1507               	andwf	(printf@flag+1)& (0+255),w,b
  6113  000434  0100               	movlb	0	; () banked
  6114  000436  6FC8               	movwf	(??_printf+1)& (0+255),b
  6115  000438  0100               	movlb	0	; () banked
  6116  00043A  51C7               	movf	??_printf& (0+255),w,b
  6117  00043C  0100               	movlb	0	; () banked
  6118  00043E  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6119  000440  B4D8               	btfsc	status,2,c
  6120  000442  D04A               	goto	l5661
  6121                           
  6122                           ; BSR set to: 0
  6123                           ;doprnt.c: 1190: (putch('-') );
  6124  000444  0E2D               	movlw	45
  6125  000446  ECC8  F016         	call	_putch
  6126                           
  6127                           ;doprnt.c: 1195: }
  6128                           ;doprnt.c: 1196: while(c--) {
  6129  00044A  D046               	goto	l5661
  6130  00044C                     l5655:
  6131                           
  6132                           ;doprnt.c: 1200: {
  6133                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  6134  00044C  C110  F024         	movff	printf@val,___lldiv@dividend
  6135  000450  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6136  000454  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6137  000458  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6138  00045C  0101               	movlb	1	; () banked
  6139  00045E  5117               	movf	printf@c& (0+255),w,b
  6140  000460  0D04               	mullw	4
  6141  000462  0ED3               	movlw	low _dpowers
  6142  000464  24F3               	addwf	prodl,w,c
  6143  000466  6EF6               	movwf	tblptrl,c
  6144  000468  0EFD               	movlw	high _dpowers
  6145  00046A  20F4               	addwfc	prodh,w,c
  6146  00046C  6EF7               	movwf	tblptrh,c
  6147  00046E                     	if	0	;There are less than 3 active tblptr bytes
  6148  00046E                     	endif
  6149  00046E  0009               	tblrd		*+
  6150  000470  CFF5 F028          	movff	tablat,___lldiv@divisor
  6151  000474  0009               	tblrd		*+
  6152  000476  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6153  00047A  0009               	tblrd		*+
  6154  00047C  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6155  000480  000A               	tblrd		*-
  6156  000482  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6157  000486  EC0A  F013         	call	___lldiv	;wreg free
  6158  00048A  C024  F10C         	movff	?___lldiv,printf@tmpval
  6159  00048E  C025  F10D         	movff	?___lldiv+1,printf@tmpval+1
  6160  000492  C026  F10E         	movff	?___lldiv+2,printf@tmpval+2
  6161  000496  C027  F10F         	movff	?___lldiv+3,printf@tmpval+3
  6162                           
  6163                           ;doprnt.c: 1202: tmpval.vd %= 10;
  6164  00049A  C10C  F031         	movff	printf@tmpval,___llmod@dividend
  6165  00049E  C10D  F032         	movff	printf@tmpval+1,___llmod@dividend+1
  6166  0004A2  C10E  F033         	movff	printf@tmpval+2,___llmod@dividend+2
  6167  0004A6  C10F  F034         	movff	printf@tmpval+3,___llmod@dividend+3
  6168  0004AA  0E0A               	movlw	10
  6169  0004AC  6E35               	movwf	___llmod@divisor,c
  6170  0004AE  0E00               	movlw	0
  6171  0004B0  6E36               	movwf	___llmod@divisor+1,c
  6172  0004B2  0E00               	movlw	0
  6173  0004B4  6E37               	movwf	___llmod@divisor+2,c
  6174  0004B6  0E00               	movlw	0
  6175  0004B8  6E38               	movwf	___llmod@divisor+3,c
  6176  0004BA  ECFC  F013         	call	___llmod	;wreg free
  6177  0004BE  C031  F10C         	movff	?___llmod,printf@tmpval
  6178  0004C2  C032  F10D         	movff	?___llmod+1,printf@tmpval+1
  6179  0004C6  C033  F10E         	movff	?___llmod+2,printf@tmpval+2
  6180  0004CA  C034  F10F         	movff	?___llmod+3,printf@tmpval+3
  6181                           
  6182                           ;doprnt.c: 1203: (putch('0' + tmpval.vd) );
  6183  0004CE  0101               	movlb	1	; () banked
  6184  0004D0  510C               	movf	printf@tmpval& (0+255),w,b
  6185  0004D2  0F30               	addlw	48
  6186  0004D4  ECC8  F016         	call	_putch
  6187  0004D8                     l5661:
  6188  0004D8  0101               	movlb	1	; () banked
  6189  0004DA  0717               	decf	printf@c& (0+255),f,b
  6190  0004DC  0101               	movlb	1	; () banked
  6191  0004DE  2917               	incf	printf@c& (0+255),w,b
  6192  0004E0  B4D8               	btfsc	status,2,c
  6193  0004E2  D008               	goto	l5667
  6194  0004E4  D7B3               	goto	l5655
  6195  0004E6                     l5663:
  6196                           
  6197                           ; BSR set to: 1
  6198                           ;doprnt.c: 1208: (putch('0') );
  6199  0004E6  0E30               	movlw	48
  6200  0004E8  ECC8  F016         	call	_putch
  6201                           
  6202                           ;doprnt.c: 1209: exp--;
  6203  0004EC  0101               	movlb	1	; () banked
  6204  0004EE  070A               	decf	printf@exp& (0+255),f,b
  6205  0004F0  A0D8               	btfss	status,0,c
  6206  0004F2  070B               	decf	(printf@exp+1)& (0+255),f,b
  6207  0004F4                     l5667:
  6208                           
  6209                           ; BSR set to: 1
  6210  0004F4  0101               	movlb	1	; () banked
  6211  0004F6  BF0B               	btfsc	(printf@exp+1)& (0+255),7,b
  6212  0004F8  D007               	goto	l5669
  6213  0004FA  0101               	movlb	1	; () banked
  6214  0004FC  510B               	movf	(printf@exp+1)& (0+255),w,b
  6215  0004FE  E1F3               	bnz	l5663
  6216  000500  0101               	movlb	1	; () banked
  6217  000502  050A               	decf	printf@exp& (0+255),w,b
  6218  000504  B0D8               	btfsc	status,0,c
  6219  000506  D7EF               	goto	l5663
  6220  000508                     l5669:
  6221                           
  6222                           ; BSR set to: 1
  6223                           ;doprnt.c: 1210: }
  6224                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  6225  000508  0101               	movlb	1	; () banked
  6226  00050A  BF09               	btfsc	(printf@prec+1)& (0+255),7,b
  6227  00050C  D00C               	goto	l710
  6228  00050E  0101               	movlb	1	; () banked
  6229  000510  5109               	movf	(printf@prec+1)& (0+255),w,b
  6230  000512  E105               	bnz	u5430
  6231  000514  0E09               	movlw	9
  6232  000516  0101               	movlb	1	; () banked
  6233  000518  5D08               	subwf	printf@prec& (0+255),w,b
  6234  00051A  A0D8               	btfss	status,0,c
  6235  00051C  D004               	goto	l710
  6236  00051E                     u5430:
  6237                           
  6238                           ; BSR set to: 1
  6239                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  6240  00051E  0E08               	movlw	8
  6241  000520  0101               	movlb	1	; () banked
  6242  000522  6F17               	movwf	printf@c& (0+255),b
  6243  000524  D002               	goto	l5673
  6244  000526                     l710:
  6245                           
  6246                           ; BSR set to: 1
  6247                           ;doprnt.c: 1213: else
  6248                           ;doprnt.c: 1214: c = prec;
  6249  000526  C108  F117         	movff	printf@prec,printf@c
  6250  00052A                     l5673:
  6251                           
  6252                           ; BSR set to: 1
  6253                           ;doprnt.c: 1215: prec -= c;
  6254  00052A  0101               	movlb	1	; () banked
  6255  00052C  5117               	movf	printf@c& (0+255),w,b
  6256  00052E  0101               	movlb	1	; () banked
  6257  000530  5F08               	subwf	printf@prec& (0+255),f,b
  6258  000532  0E00               	movlw	0
  6259  000534  0101               	movlb	1	; () banked
  6260  000536  BF17               	btfsc	printf@c& (0+255),7,b
  6261  000538  0EFF               	movlw	255
  6262  00053A  0101               	movlb	1	; () banked
  6263  00053C  5B09               	subwfb	(printf@prec+1)& (0+255),f,b
  6264                           
  6265                           ; BSR set to: 1
  6266                           ;doprnt.c: 1219: if(c)
  6267  00053E  0101               	movlb	1	; () banked
  6268  000540  5117               	movf	printf@c& (0+255),w,b
  6269  000542  0101               	movlb	1	; () banked
  6270  000544  B4D8               	btfsc	status,2,c
  6271  000546  D003               	goto	l5679
  6272                           
  6273                           ; BSR set to: 1
  6274                           ;doprnt.c: 1221: (putch('.') );
  6275  000548  0E2E               	movlw	46
  6276  00054A  ECC8  F016         	call	_putch
  6277  00054E                     l5679:
  6278                           
  6279                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6280  00054E  0101               	movlb	1	; () banked
  6281  000550  5117               	movf	printf@c& (0+255),w,b
  6282  000552  EC9F  F004         	call	_scale
  6283  000556  C09B  F100         	movff	?_scale,_printf$1342
  6284  00055A  C09C  F101         	movff	?_scale+1,_printf$1342+1
  6285  00055E  C09D  F102         	movff	?_scale+2,_printf$1342+2
  6286                           
  6287                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  6288  000562  C114  F08F         	movff	printf@fval,___ftmul@f2
  6289  000566  C115  F090         	movff	printf@fval+1,___ftmul@f2+1
  6290  00056A  C116  F091         	movff	printf@fval+2,___ftmul@f2+2
  6291  00056E  C100  F08C         	movff	_printf$1342,___ftmul@f1
  6292  000572  C101  F08D         	movff	_printf$1342+1,___ftmul@f1+1
  6293  000576  C102  F08E         	movff	_printf$1342+2,___ftmul@f1+2
  6294  00057A  ECE8  F00B         	call	___ftmul	;wreg free
  6295  00057E  C08C  F0B1         	movff	?___ftmul,___fttol@f1
  6296  000582  C08D  F0B2         	movff	?___ftmul+1,___fttol@f1+1
  6297  000586  C08E  F0B3         	movff	?___ftmul+2,___fttol@f1+2
  6298  00058A  EC97  F00C         	call	___fttol	;wreg free
  6299  00058E  C0B1  F110         	movff	?___fttol,printf@val
  6300  000592  C0B2  F111         	movff	?___fttol+1,printf@val+1
  6301  000596  C0B3  F112         	movff	?___fttol+2,printf@val+2
  6302  00059A  C0B4  F113         	movff	?___fttol+3,printf@val+3
  6303                           
  6304                           ;doprnt.c: 1228: while(c--) {
  6305  00059E  D06D               	goto	l5689
  6306  0005A0                     l5683:
  6307                           
  6308                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  6309  0005A0  C110  F024         	movff	printf@val,___lldiv@dividend
  6310  0005A4  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6311  0005A8  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6312  0005AC  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6313  0005B0  0101               	movlb	1	; () banked
  6314  0005B2  5117               	movf	printf@c& (0+255),w,b
  6315  0005B4  0D04               	mullw	4
  6316  0005B6  0ED3               	movlw	low _dpowers
  6317  0005B8  24F3               	addwf	prodl,w,c
  6318  0005BA  6EF6               	movwf	tblptrl,c
  6319  0005BC  0EFD               	movlw	high _dpowers
  6320  0005BE  20F4               	addwfc	prodh,w,c
  6321  0005C0  6EF7               	movwf	tblptrh,c
  6322  0005C2                     	if	0	;There are less than 3 active tblptr bytes
  6323  0005C2                     	endif
  6324  0005C2  0009               	tblrd		*+
  6325  0005C4  CFF5 F028          	movff	tablat,___lldiv@divisor
  6326  0005C8  0009               	tblrd		*+
  6327  0005CA  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6328  0005CE  0009               	tblrd		*+
  6329  0005D0  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6330  0005D4  000A               	tblrd		*-
  6331  0005D6  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6332  0005DA  EC0A  F013         	call	___lldiv	;wreg free
  6333  0005DE  C024  F10C         	movff	?___lldiv,printf@tmpval
  6334  0005E2  C025  F10D         	movff	?___lldiv+1,printf@tmpval+1
  6335  0005E6  C026  F10E         	movff	?___lldiv+2,printf@tmpval+2
  6336  0005EA  C027  F10F         	movff	?___lldiv+3,printf@tmpval+3
  6337                           
  6338                           ;doprnt.c: 1230: tmpval.vd %= 10;
  6339  0005EE  C10C  F031         	movff	printf@tmpval,___llmod@dividend
  6340  0005F2  C10D  F032         	movff	printf@tmpval+1,___llmod@dividend+1
  6341  0005F6  C10E  F033         	movff	printf@tmpval+2,___llmod@dividend+2
  6342  0005FA  C10F  F034         	movff	printf@tmpval+3,___llmod@dividend+3
  6343  0005FE  0E0A               	movlw	10
  6344  000600  6E35               	movwf	___llmod@divisor,c
  6345  000602  0E00               	movlw	0
  6346  000604  6E36               	movwf	___llmod@divisor+1,c
  6347  000606  0E00               	movlw	0
  6348  000608  6E37               	movwf	___llmod@divisor+2,c
  6349  00060A  0E00               	movlw	0
  6350  00060C  6E38               	movwf	___llmod@divisor+3,c
  6351  00060E  ECFC  F013         	call	___llmod	;wreg free
  6352  000612  C031  F10C         	movff	?___llmod,printf@tmpval
  6353  000616  C032  F10D         	movff	?___llmod+1,printf@tmpval+1
  6354  00061A  C033  F10E         	movff	?___llmod+2,printf@tmpval+2
  6355  00061E  C034  F10F         	movff	?___llmod+3,printf@tmpval+3
  6356                           
  6357                           ;doprnt.c: 1231: (putch('0' + tmpval.vd) );
  6358  000622  0101               	movlb	1	; () banked
  6359  000624  510C               	movf	printf@tmpval& (0+255),w,b
  6360  000626  0F30               	addlw	48
  6361  000628  ECC8  F016         	call	_putch
  6362                           
  6363                           ;doprnt.c: 1232: val %= dpowers[c];
  6364  00062C  C110  F031         	movff	printf@val,___llmod@dividend
  6365  000630  C111  F032         	movff	printf@val+1,___llmod@dividend+1
  6366  000634  C112  F033         	movff	printf@val+2,___llmod@dividend+2
  6367  000638  C113  F034         	movff	printf@val+3,___llmod@dividend+3
  6368  00063C  0101               	movlb	1	; () banked
  6369  00063E  5117               	movf	printf@c& (0+255),w,b
  6370  000640  0D04               	mullw	4
  6371  000642  0ED3               	movlw	low _dpowers
  6372  000644  24F3               	addwf	prodl,w,c
  6373  000646  6EF6               	movwf	tblptrl,c
  6374  000648  0EFD               	movlw	high _dpowers
  6375  00064A  20F4               	addwfc	prodh,w,c
  6376  00064C  6EF7               	movwf	tblptrh,c
  6377  00064E                     	if	0	;There are less than 3 active tblptr bytes
  6378  00064E                     	endif
  6379  00064E  0009               	tblrd		*+
  6380  000650  CFF5 F035          	movff	tablat,___llmod@divisor
  6381  000654  0009               	tblrd		*+
  6382  000656  CFF5 F036          	movff	tablat,___llmod@divisor+1
  6383  00065A  0009               	tblrd		*+
  6384  00065C  CFF5 F037          	movff	tablat,___llmod@divisor+2
  6385  000660  000A               	tblrd		*-
  6386  000662  CFF5 F038          	movff	tablat,___llmod@divisor+3
  6387  000666  ECFC  F013         	call	___llmod	;wreg free
  6388  00066A  C031  F110         	movff	?___llmod,printf@val
  6389  00066E  C032  F111         	movff	?___llmod+1,printf@val+1
  6390  000672  C033  F112         	movff	?___llmod+2,printf@val+2
  6391  000676  C034  F113         	movff	?___llmod+3,printf@val+3
  6392  00067A                     l5689:
  6393  00067A  0101               	movlb	1	; () banked
  6394  00067C  0717               	decf	printf@c& (0+255),f,b
  6395  00067E  0101               	movlb	1	; () banked
  6396  000680  2917               	incf	printf@c& (0+255),w,b
  6397  000682  B4D8               	btfsc	status,2,c
  6398  000684  D008               	goto	l5695
  6399  000686  D78C               	goto	l5683
  6400  000688                     l5691:
  6401                           
  6402                           ; BSR set to: 1
  6403                           ;doprnt.c: 1236: (putch('0') );
  6404  000688  0E30               	movlw	48
  6405  00068A  ECC8  F016         	call	_putch
  6406                           
  6407                           ;doprnt.c: 1237: prec--;
  6408  00068E  0101               	movlb	1	; () banked
  6409  000690  0708               	decf	printf@prec& (0+255),f,b
  6410  000692  A0D8               	btfss	status,0,c
  6411  000694  0709               	decf	(printf@prec+1)& (0+255),f,b
  6412  000696                     l5695:
  6413                           
  6414                           ; BSR set to: 1
  6415  000696  0101               	movlb	1	; () banked
  6416  000698  5108               	movf	printf@prec& (0+255),w,b
  6417  00069A  0101               	movlb	1	; () banked
  6418  00069C  1109               	iorwf	(printf@prec+1)& (0+255),w,b
  6419  00069E  B4D8               	btfsc	status,2,c
  6420  0006A0  D13E               	goto	l5763
  6421  0006A2  D7F2               	goto	l5691
  6422  0006A4                     l682:
  6423                           
  6424                           ; BSR set to: 1
  6425                           ;doprnt.c: 1246: }
  6426                           ;doprnt.c: 1251: if((flag & 0x80) == 0x00)
  6427  0006A4  0101               	movlb	1	; () banked
  6428  0006A6  BF06               	btfsc	printf@flag& (0+255),7,b
  6429  0006A8  D023               	goto	l5707
  6430                           
  6431                           ; BSR set to: 1
  6432                           ;doprnt.c: 1253: {
  6433                           ;doprnt.c: 1259: val = (long)(*(int *)__va_arg((*(int **)ap), (int)0));
  6434  0006AA  C104  FFD9         	movff	printf@ap,fsr2l
  6435  0006AE  C105  FFDA         	movff	printf@ap+1,fsr2h
  6436  0006B2  CFDE F110          	movff	postinc2,printf@val
  6437  0006B6  CFDD F111          	movff	postdec2,printf@val+1
  6438  0006BA  0101               	movlb	1	; () banked
  6439  0006BC  0E00               	movlw	0
  6440  0006BE  BF11               	btfsc	(printf@val+1)& (0+255),7,b
  6441  0006C0  0EFF               	movlw	-1
  6442  0006C2  6F12               	movwf	(printf@val+2)& (0+255),b
  6443  0006C4  6F13               	movwf	(printf@val+3)& (0+255),b
  6444                           
  6445                           ; BSR set to: 1
  6446  0006C6  0E02               	movlw	2
  6447  0006C8  0101               	movlb	1	; () banked
  6448  0006CA  2704               	addwf	printf@ap& (0+255),f,b
  6449  0006CC  0E00               	movlw	0
  6450  0006CE  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  6451                           
  6452                           ; BSR set to: 1
  6453                           ;doprnt.c: 1261: if((long)val < 0) {
  6454  0006D0  0101               	movlb	1	; () banked
  6455  0006D2  AF13               	btfss	(printf@val+3)& (0+255),7,b
  6456  0006D4  D06E               	goto	l5741
  6457                           
  6458                           ; BSR set to: 1
  6459                           ;doprnt.c: 1262: flag |= 0x03;
  6460  0006D6  0E03               	movlw	3
  6461  0006D8  0101               	movlb	1	; () banked
  6462  0006DA  1306               	iorwf	printf@flag& (0+255),f,b
  6463                           
  6464                           ; BSR set to: 1
  6465                           ;doprnt.c: 1263: val = -val;
  6466  0006DC  0101               	movlb	1	; () banked
  6467  0006DE  1F13               	comf	(printf@val+3)& (0+255),f,b
  6468  0006E0  1F12               	comf	(printf@val+2)& (0+255),f,b
  6469  0006E2  1F11               	comf	(printf@val+1)& (0+255),f,b
  6470  0006E4  6D10               	negf	printf@val& (0+255),b
  6471  0006E6  0E00               	movlw	0
  6472  0006E8  2311               	addwfc	(printf@val+1)& (0+255),f,b
  6473  0006EA  2312               	addwfc	(printf@val+2)& (0+255),f,b
  6474  0006EC  2313               	addwfc	(printf@val+3)& (0+255),f,b
  6475                           
  6476                           ; BSR set to: 1
  6477                           ;doprnt.c: 1264: }
  6478                           ;doprnt.c: 1266: }
  6479  0006EE  D061               	goto	l5741
  6480  0006F0                     l5707:
  6481                           
  6482                           ; BSR set to: 1
  6483                           ;doprnt.c: 1268: else
  6484                           ;doprnt.c: 1273: {
  6485                           ;doprnt.c: 1286: val = (*(unsigned *)__va_arg((*(unsigned **)ap), (unsigned)0));
  6486  0006F0  C104  FFD9         	movff	printf@ap,fsr2l
  6487  0006F4  C105  FFDA         	movff	printf@ap+1,fsr2h
  6488  0006F8  CFDE F0C7          	movff	postinc2,??_printf
  6489  0006FC  CFDD F0C8          	movff	postdec2,??_printf+1
  6490  000700  C0C7  F110         	movff	??_printf,printf@val
  6491  000704  C0C8  F111         	movff	??_printf+1,printf@val+1
  6492  000708  0101               	movlb	1	; () banked
  6493  00070A  6B12               	clrf	(printf@val+2)& (0+255),b
  6494  00070C  6B13               	clrf	(printf@val+3)& (0+255),b
  6495                           
  6496                           ; BSR set to: 1
  6497  00070E  0E02               	movlw	2
  6498  000710  0101               	movlb	1	; () banked
  6499  000712  2704               	addwf	printf@ap& (0+255),f,b
  6500  000714  0E00               	movlw	0
  6501  000716  2305               	addwfc	(printf@ap+1)& (0+255),f,b
  6502                           
  6503                           ; BSR set to: 1
  6504                           ;doprnt.c: 1287: }
  6505                           ;doprnt.c: 1294: switch((unsigned char)(flag & 0x80)) {
  6506  000718  D04C               	goto	l5741
  6507  00071A                     l5711:
  6508                           
  6509                           ; BSR set to: 1
  6510                           ;doprnt.c: 1305: for(c = 1 ; c != sizeof dpowers/sizeof dpowers[0] ; c++)
  6511  00071A  0E01               	movlw	1
  6512  00071C  0101               	movlb	1	; () banked
  6513  00071E  6F17               	movwf	printf@c& (0+255),b
  6514  000720                     l5713:
  6515                           
  6516                           ; BSR set to: 1
  6517  000720  0E0A               	movlw	10
  6518  000722  0101               	movlb	1	; () banked
  6519  000724  1917               	xorwf	printf@c& (0+255),w,b
  6520  000726  B4D8               	btfsc	status,2,c
  6521  000728  D04D               	goto	l5743
  6522                           
  6523                           ; BSR set to: 1
  6524                           ;doprnt.c: 1306: if(val < dpowers[c])
  6525                           
  6526                           ; BSR set to: 1
  6527                           
  6528                           ; BSR set to: 1
  6529  00072A  0101               	movlb	1	; () banked
  6530  00072C  5117               	movf	printf@c& (0+255),w,b
  6531  00072E  0D04               	mullw	4
  6532  000730  0ED3               	movlw	low _dpowers
  6533  000732  24F3               	addwf	prodl,w,c
  6534  000734  6EF6               	movwf	tblptrl,c
  6535  000736  0EFD               	movlw	high _dpowers
  6536  000738  20F4               	addwfc	prodh,w,c
  6537  00073A  6EF7               	movwf	tblptrh,c
  6538  00073C                     	if	0	;There are less than 3 active tblptr bytes
  6539  00073C                     	endif
  6540  00073C  0009               	tblrd		*+
  6541  00073E  50F5               	movf	tablat,w,c
  6542  000740  0101               	movlb	1	; () banked
  6543  000742  5D10               	subwf	printf@val& (0+255),w,b
  6544  000744  0009               	tblrd		*+
  6545  000746  50F5               	movf	tablat,w,c
  6546  000748  0101               	movlb	1	; () banked
  6547  00074A  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6548  00074C  0009               	tblrd		*+
  6549  00074E  50F5               	movf	tablat,w,c
  6550  000750  0101               	movlb	1	; () banked
  6551  000752  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6552  000754  0009               	tblrd		*+
  6553  000756  50F5               	movf	tablat,w,c
  6554  000758  0101               	movlb	1	; () banked
  6555  00075A  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6556  00075C  A0D8               	btfss	status,0,c
  6557  00075E  D032               	goto	l5743
  6558                           
  6559                           ; BSR set to: 1
  6560                           
  6561                           ; BSR set to: 1
  6562                           
  6563                           ; BSR set to: 1
  6564                           ;doprnt.c: 1307: break;
  6565  000760  0101               	movlb	1	; () banked
  6566  000762  2B17               	incf	printf@c& (0+255),f,b
  6567  000764  D7DD               	goto	l5713
  6568  000766                     l5725:
  6569                           
  6570                           ; BSR set to: 1
  6571                           ;doprnt.c: 1316: for(c = 1 ; c != sizeof hexpowers/sizeof hexpowers[0] ; c++)
  6572  000766  0E01               	movlw	1
  6573  000768  0101               	movlb	1	; () banked
  6574  00076A  6F17               	movwf	printf@c& (0+255),b
  6575  00076C                     l5727:
  6576                           
  6577                           ; BSR set to: 1
  6578  00076C  0E08               	movlw	8
  6579  00076E  0101               	movlb	1	; () banked
  6580  000770  1917               	xorwf	printf@c& (0+255),w,b
  6581  000772  B4D8               	btfsc	status,2,c
  6582  000774  D027               	goto	l5743
  6583                           
  6584                           ; BSR set to: 1
  6585                           ;doprnt.c: 1317: if(val < hexpowers[c])
  6586                           
  6587                           ; BSR set to: 1
  6588                           
  6589                           ; BSR set to: 1
  6590  000776  0101               	movlb	1	; () banked
  6591  000778  5117               	movf	printf@c& (0+255),w,b
  6592  00077A  0D04               	mullw	4
  6593  00077C  0E49               	movlw	low _hexpowers
  6594  00077E  24F3               	addwf	prodl,w,c
  6595  000780  6EF6               	movwf	tblptrl,c
  6596  000782  0EFE               	movlw	high _hexpowers
  6597  000784  20F4               	addwfc	prodh,w,c
  6598  000786  6EF7               	movwf	tblptrh,c
  6599  000788                     	if	0	;There are less than 3 active tblptr bytes
  6600  000788                     	endif
  6601  000788  0009               	tblrd		*+
  6602  00078A  50F5               	movf	tablat,w,c
  6603  00078C  0101               	movlb	1	; () banked
  6604  00078E  5D10               	subwf	printf@val& (0+255),w,b
  6605  000790  0009               	tblrd		*+
  6606  000792  50F5               	movf	tablat,w,c
  6607  000794  0101               	movlb	1	; () banked
  6608  000796  5911               	subwfb	(printf@val+1)& (0+255),w,b
  6609  000798  0009               	tblrd		*+
  6610  00079A  50F5               	movf	tablat,w,c
  6611  00079C  0101               	movlb	1	; () banked
  6612  00079E  5912               	subwfb	(printf@val+2)& (0+255),w,b
  6613  0007A0  0009               	tblrd		*+
  6614  0007A2  50F5               	movf	tablat,w,c
  6615  0007A4  0101               	movlb	1	; () banked
  6616  0007A6  5913               	subwfb	(printf@val+3)& (0+255),w,b
  6617  0007A8  A0D8               	btfss	status,0,c
  6618  0007AA  D00C               	goto	l5743
  6619                           
  6620                           ; BSR set to: 1
  6621                           
  6622                           ; BSR set to: 1
  6623                           
  6624                           ; BSR set to: 1
  6625                           ;doprnt.c: 1318: break;
  6626  0007AC  0101               	movlb	1	; () banked
  6627  0007AE  2B17               	incf	printf@c& (0+255),f,b
  6628  0007B0  D7DD               	goto	l5727
  6629  0007B2                     l5741:
  6630                           
  6631                           ; BSR set to: 1
  6632  0007B2  0101               	movlb	1	; () banked
  6633  0007B4  5106               	movf	printf@flag& (0+255),w,b
  6634  0007B6  0B80               	andlw	128
  6635                           
  6636                           ; Switch size 1, requested type "space"
  6637                           ; Number of cases is 2, Range of values is 0 to 128
  6638                           ; switch strategies available:
  6639                           ; Name         Instructions Cycles
  6640                           ; simple_byte            7     4 (average)
  6641                           ;	Chosen strategy is simple_byte
  6642  0007B8  0A00               	xorlw	0	; case 0
  6643  0007BA  B4D8               	btfsc	status,2,c
  6644  0007BC  D7AE               	goto	l5711
  6645  0007BE  0A80               	xorlw	128	; case 128
  6646  0007C0  B4D8               	btfsc	status,2,c
  6647  0007C2  D7D1               	goto	l5725
  6648  0007C4                     l5743:
  6649                           
  6650                           ; BSR set to: 1
  6651                           ;doprnt.c: 1422: {
  6652                           ;doprnt.c: 1438: if(flag & 0x03)
  6653  0007C4  0E03               	movlw	3
  6654  0007C6  0101               	movlb	1	; () banked
  6655  0007C8  1506               	andwf	printf@flag& (0+255),w,b
  6656  0007CA  0100               	movlb	0	; () banked
  6657  0007CC  6FC7               	movwf	??_printf& (0+255),b
  6658  0007CE  0E00               	movlw	0
  6659  0007D0  0101               	movlb	1	; () banked
  6660  0007D2  1507               	andwf	(printf@flag+1)& (0+255),w,b
  6661  0007D4  0100               	movlb	0	; () banked
  6662  0007D6  6FC8               	movwf	(??_printf+1)& (0+255),b
  6663  0007D8  0100               	movlb	0	; () banked
  6664  0007DA  51C7               	movf	??_printf& (0+255),w,b
  6665  0007DC  0100               	movlb	0	; () banked
  6666  0007DE  11C8               	iorwf	(??_printf+1)& (0+255),w,b
  6667  0007E0  B4D8               	btfsc	status,2,c
  6668  0007E2  D003               	goto	l5747
  6669                           
  6670                           ; BSR set to: 0
  6671                           ;doprnt.c: 1439: (putch('-') );
  6672  0007E4  0E2D               	movlw	45
  6673  0007E6  ECC8  F016         	call	_putch
  6674  0007EA                     l5747:
  6675                           
  6676                           ;doprnt.c: 1469: }
  6677                           ;doprnt.c: 1472: prec = c;
  6678  0007EA  0101               	movlb	1	; () banked
  6679  0007EC  5117               	movf	printf@c& (0+255),w,b
  6680  0007EE  0101               	movlb	1	; () banked
  6681  0007F0  6F08               	movwf	printf@prec& (0+255),b
  6682  0007F2  6B09               	clrf	(printf@prec+1)& (0+255),b
  6683  0007F4  BF08               	btfsc	printf@prec& (0+255),7,b
  6684  0007F6  0709               	decf	(printf@prec+1)& (0+255),f,b
  6685                           
  6686                           ;doprnt.c: 1474: while(prec--) {
  6687  0007F8  D087               	goto	l5761
  6688  0007FA                     l5749:
  6689                           
  6690                           ; BSR set to: 1
  6691                           ;doprnt.c: 1489: c = (val / dpowers[prec]) % 10 + '0';
  6692  0007FA  C108  F0C7         	movff	printf@prec,??_printf
  6693  0007FE  C109  F0C8         	movff	printf@prec+1,??_printf+1
  6694  000802  0100               	movlb	0	; () banked
  6695  000804  90D8               	bcf	status,0,c
  6696  000806  37C7               	rlcf	??_printf& (0+255),f,b
  6697  000808  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6698  00080A  0100               	movlb	0	; () banked
  6699  00080C  90D8               	bcf	status,0,c
  6700  00080E  37C7               	rlcf	??_printf& (0+255),f,b
  6701  000810  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6702  000812  0ED3               	movlw	low _dpowers
  6703  000814  0100               	movlb	0	; () banked
  6704  000816  25C7               	addwf	??_printf& (0+255),w,b
  6705  000818  6EF6               	movwf	tblptrl,c
  6706  00081A  0EFD               	movlw	high _dpowers
  6707  00081C  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6708  00081E  6EF7               	movwf	tblptrh,c
  6709  000820                     	if	0	;There are less than 3 active tblptr bytes
  6710  000820                     	endif
  6711  000820  0009               	tblrd		*+
  6712  000822  CFF5 F028          	movff	tablat,___lldiv@divisor
  6713  000826  0009               	tblrd		*+
  6714  000828  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6715  00082C  0009               	tblrd		*+
  6716  00082E  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6717  000832  000A               	tblrd		*-
  6718  000834  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6719  000838  C110  F024         	movff	printf@val,___lldiv@dividend
  6720  00083C  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6721  000840  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6722  000844  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6723  000848  EC0A  F013         	call	___lldiv	;wreg free
  6724  00084C  C024  F031         	movff	?___lldiv,___llmod@dividend
  6725  000850  C025  F032         	movff	?___lldiv+1,___llmod@dividend+1
  6726  000854  C026  F033         	movff	?___lldiv+2,___llmod@dividend+2
  6727  000858  C027  F034         	movff	?___lldiv+3,___llmod@dividend+3
  6728  00085C  0E0A               	movlw	10
  6729  00085E  6E35               	movwf	___llmod@divisor,c
  6730  000860  0E00               	movlw	0
  6731  000862  6E36               	movwf	___llmod@divisor+1,c
  6732  000864  0E00               	movlw	0
  6733  000866  6E37               	movwf	___llmod@divisor+2,c
  6734  000868  0E00               	movlw	0
  6735  00086A  6E38               	movwf	___llmod@divisor+3,c
  6736  00086C  ECFC  F013         	call	___llmod	;wreg free
  6737  000870  5031               	movf	?___llmod,w,c
  6738  000872  0F30               	addlw	48
  6739  000874  0101               	movlb	1	; () banked
  6740  000876  6F17               	movwf	printf@c& (0+255),b
  6741                           
  6742                           ;doprnt.c: 1491: break;
  6743  000878  D043               	goto	l5759
  6744  00087A                     l5751:
  6745                           
  6746                           ; BSR set to: 1
  6747                           ;doprnt.c: 1499: {
  6748                           ;doprnt.c: 1500: unsigned char idx = (val / hexpowers[prec]) & 0xF;
  6749  00087A  C110  F024         	movff	printf@val,___lldiv@dividend
  6750  00087E  C111  F025         	movff	printf@val+1,___lldiv@dividend+1
  6751  000882  C112  F026         	movff	printf@val+2,___lldiv@dividend+2
  6752  000886  C113  F027         	movff	printf@val+3,___lldiv@dividend+3
  6753  00088A  C108  F0C7         	movff	printf@prec,??_printf
  6754  00088E  C109  F0C8         	movff	printf@prec+1,??_printf+1
  6755  000892  0100               	movlb	0	; () banked
  6756  000894  90D8               	bcf	status,0,c
  6757  000896  37C7               	rlcf	??_printf& (0+255),f,b
  6758  000898  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6759  00089A  0100               	movlb	0	; () banked
  6760  00089C  90D8               	bcf	status,0,c
  6761  00089E  37C7               	rlcf	??_printf& (0+255),f,b
  6762  0008A0  37C8               	rlcf	(??_printf+1)& (0+255),f,b
  6763  0008A2  0E49               	movlw	low _hexpowers
  6764  0008A4  0100               	movlb	0	; () banked
  6765  0008A6  25C7               	addwf	??_printf& (0+255),w,b
  6766  0008A8  6EF6               	movwf	tblptrl,c
  6767  0008AA  0EFE               	movlw	high _hexpowers
  6768  0008AC  21C8               	addwfc	(??_printf+1)& (0+255),w,b
  6769  0008AE  6EF7               	movwf	tblptrh,c
  6770  0008B0                     	if	0	;There are less than 3 active tblptr bytes
  6771  0008B0                     	endif
  6772  0008B0  0009               	tblrd		*+
  6773  0008B2  CFF5 F028          	movff	tablat,___lldiv@divisor
  6774  0008B6  0009               	tblrd		*+
  6775  0008B8  CFF5 F029          	movff	tablat,___lldiv@divisor+1
  6776  0008BC  0009               	tblrd		*+
  6777  0008BE  CFF5 F02A          	movff	tablat,___lldiv@divisor+2
  6778  0008C2  000A               	tblrd		*-
  6779  0008C4  CFF5 F02B          	movff	tablat,___lldiv@divisor+3
  6780  0008C8  EC0A  F013         	call	___lldiv	;wreg free
  6781  0008CC  5024               	movf	?___lldiv,w,c
  6782  0008CE  0B0F               	andlw	15
  6783  0008D0  0101               	movlb	1	; () banked
  6784  0008D2  6F03               	movwf	printf@idx& (0+255),b
  6785                           
  6786                           ; BSR set to: 1
  6787                           ;doprnt.c: 1506: c = "0123456789abcdef"[idx];
  6788  0008D4  0101               	movlb	1	; () banked
  6789  0008D6  5103               	movf	printf@idx& (0+255),w,b
  6790  0008D8  0D01               	mullw	1
  6791  0008DA  0E2F               	movlw	low STR_23
  6792  0008DC  24F3               	addwf	prodl,w,c
  6793  0008DE  6EF6               	movwf	tblptrl,c
  6794  0008E0  0EFF               	movlw	high STR_23
  6795  0008E2  20F4               	addwfc	prodh,w,c
  6796  0008E4  6EF7               	movwf	tblptrh,c
  6797  0008E6                     	if	0	;There are less than 3 active tblptr bytes
  6798  0008E6                     	endif
  6799  0008E6  0008               	tblrd		*
  6800  0008E8  CFF5 F117          	movff	tablat,printf@c
  6801                           
  6802                           ; BSR set to: 1
  6803                           ;doprnt.c: 1523: }
  6804                           
  6805                           ;doprnt.c: 1508: }
  6806                           ;doprnt.c: 1510: break;
  6807  0008EC  D009               	goto	l5759
  6808  0008EE                     l5757:
  6809                           
  6810                           ; BSR set to: 1
  6811  0008EE  0101               	movlb	1	; () banked
  6812  0008F0  5106               	movf	printf@flag& (0+255),w,b
  6813  0008F2  0B80               	andlw	128
  6814                           
  6815                           ; Switch size 1, requested type "space"
  6816                           ; Number of cases is 2, Range of values is 0 to 128
  6817                           ; switch strategies available:
  6818                           ; Name         Instructions Cycles
  6819                           ; simple_byte            7     4 (average)
  6820                           ;	Chosen strategy is simple_byte
  6821  0008F4  0A00               	xorlw	0	; case 0
  6822  0008F6  B4D8               	btfsc	status,2,c
  6823  0008F8  D780               	goto	l5749
  6824  0008FA  0A80               	xorlw	128	; case 128
  6825  0008FC  B4D8               	btfsc	status,2,c
  6826  0008FE  D7BD               	goto	l5751
  6827  000900                     l5759:
  6828                           
  6829                           ; BSR set to: 1
  6830                           ;doprnt.c: 1524: (putch(c) );
  6831  000900  0101               	movlb	1	; () banked
  6832  000902  5117               	movf	printf@c& (0+255),w,b
  6833  000904  ECC8  F016         	call	_putch
  6834  000908                     l5761:
  6835  000908  0101               	movlb	1	; () banked
  6836  00090A  0708               	decf	printf@prec& (0+255),f,b
  6837  00090C  A0D8               	btfss	status,0,c
  6838  00090E  0709               	decf	(printf@prec+1)& (0+255),f,b
  6839  000910  0101               	movlb	1	; () banked
  6840  000912  2908               	incf	printf@prec& (0+255),w,b
  6841  000914  E1EC               	bnz	l5757
  6842  000916  0101               	movlb	1	; () banked
  6843  000918  2909               	incf	(printf@prec+1)& (0+255),w,b
  6844  00091A  A4D8               	btfss	status,2,c
  6845  00091C  D7E8               	goto	l5757
  6846  00091E                     l5763:
  6847  00091E  C0C0  FFF6         	movff	printf@f,tblptrl
  6848  000922  C0C1  FFF7         	movff	printf@f+1,tblptrh
  6849  000926  0100               	movlb	0	; () banked
  6850  000928  4BC0               	infsnz	printf@f& (0+255),f,b
  6851  00092A  2BC1               	incf	(printf@f+1)& (0+255),f,b
  6852  00092C                     	if	0	;tblptru may be non-zero
  6853  00092C                     	endif
  6854  00092C                     	if	0	;tblptru may be non-zero
  6855  00092C                     	endif
  6856  00092C  0008               	tblrd		*
  6857  00092E  CFF5 F117          	movff	tablat,printf@c
  6858  000932  0101               	movlb	1	; () banked
  6859  000934  5117               	movf	printf@c& (0+255),w,b
  6860  000936  B4D8               	btfsc	status,2,c
  6861  000938  0012               	return	
  6862  00093A  EF11  F000         	goto	l5545
  6863  00093E                     __end_of_printf:
  6864                           	opt stack 0
  6865                           tblptru	equ	0xFF8
  6866                           tblptrh	equ	0xFF7
  6867                           tblptrl	equ	0xFF6
  6868                           tablat	equ	0xFF5
  6869                           prodh	equ	0xFF4
  6870                           prodl	equ	0xFF3
  6871                           intcon	equ	0xFF2
  6872                           postinc0	equ	0xFEE
  6873                           wreg	equ	0xFE8
  6874                           postdec1	equ	0xFE5
  6875                           plusw1	equ	0xFE3
  6876                           fsr1l	equ	0xFE1
  6877                           indf2	equ	0xFDF
  6878                           postinc2	equ	0xFDE
  6879                           postdec2	equ	0xFDD
  6880                           plusw2	equ	0xFDB
  6881                           fsr2h	equ	0xFDA
  6882                           fsr2l	equ	0xFD9
  6883                           status	equ	0xFD8
  6884                           
  6885 ;; *************** function _scale *****************
  6886 ;; Defined at:
  6887 ;;		line 425 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  6888 ;; Parameters:    Size  Location     Type
  6889 ;;  scl             1    wreg     char 
  6890 ;; Auto vars:     Size  Location     Type
  6891 ;;  scl             1   33[BANK0 ] char 
  6892 ;; Return value:  Size  Location     Type
  6893 ;;                  3   27[BANK0 ] char 
  6894 ;; Registers used:
  6895 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  6896 ;; Tracked objects:
  6897 ;;		On entry : 0/0
  6898 ;;		On exit  : 0/0
  6899 ;;		Unchanged: 0/0
  6900 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  6901 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6902 ;;      Locals:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6903 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6904 ;;      Totals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  6905 ;;Total ram usage:        7 bytes
  6906 ;; Hardware stack levels used:    1
  6907 ;; Hardware stack levels required when called:    5
  6908 ;; This function calls:
  6909 ;;		___awdiv
  6910 ;;		___awmod
  6911 ;;		___ftmul
  6912 ;;		___wmul
  6913 ;; This function is called by:
  6914 ;;		_printf
  6915 ;; This function uses a non-reentrant model
  6916 ;;
  6917                           
  6918                           	psect	text31
  6919  00093E                     __ptext31:
  6920                           	opt stack 0
  6921  00093E                     _scale:
  6922                           	opt stack 23
  6923                           
  6924                           ; BSR set to: 1
  6925                           ;incstack = 0
  6926                           ;scale@scl stored from wreg
  6927  00093E  0100               	movlb	0	; () banked
  6928  000940  6FA1               	movwf	scale@scl& (0+255),b
  6929                           
  6930                           ;doprnt.c: 428: if(scl < 0) {
  6931  000942  0100               	movlb	0	; () banked
  6932  000944  AFA1               	btfss	scale@scl& (0+255),7,b
  6933  000946  D104               	goto	l5329
  6934                           
  6935                           ; BSR set to: 0
  6936                           ;doprnt.c: 429: scl = -scl;
  6937  000948  0100               	movlb	0	; () banked
  6938  00094A  6DA1               	negf	scale@scl& (0+255),b
  6939                           
  6940                           ;doprnt.c: 430: if(scl>=110)
  6941  00094C  0100               	movlb	0	; () banked
  6942  00094E  51A1               	movf	scale@scl& (0+255),w,b
  6943  000950  0A80               	xorlw	128
  6944  000952  0F12               	addlw	-238
  6945  000954  A0D8               	btfss	status,0,c
  6946  000956  D094               	goto	l5319
  6947                           
  6948                           ; BSR set to: 0
  6949                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  6950  000958  0E00               	movlw	0
  6951  00095A  6E35               	movwf	___wmul@multiplicand+1,c
  6952  00095C  0E03               	movlw	3
  6953  00095E  6E34               	movwf	___wmul@multiplicand,c
  6954  000960  0E00               	movlw	0
  6955  000962  6E2D               	movwf	___awdiv@divisor+1,c
  6956  000964  0E0A               	movlw	10
  6957  000966  6E2C               	movwf	___awdiv@divisor,c
  6958  000968  0E00               	movlw	0
  6959  00096A  6E27               	movwf	___awmod@divisor+1,c
  6960  00096C  0E64               	movlw	100
  6961  00096E  6E26               	movwf	___awmod@divisor,c
  6962  000970  0100               	movlb	0	; () banked
  6963  000972  51A1               	movf	scale@scl& (0+255),w,b
  6964  000974  6E24               	movwf	___awmod@dividend,c
  6965  000976  6A25               	clrf	___awmod@dividend+1,c
  6966  000978  BE24               	btfsc	___awmod@dividend,7,c
  6967  00097A  0625               	decf	___awmod@dividend+1,f,c
  6968  00097C  ECC4  F013         	call	___awmod	;wreg free
  6969  000980  C024  F02A         	movff	?___awmod,___awdiv@dividend
  6970  000984  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  6971  000988  ECC8  F012         	call	___awdiv	;wreg free
  6972  00098C  0E09               	movlw	9
  6973  00098E  242A               	addwf	?___awdiv,w,c
  6974  000990  6E32               	movwf	___wmul@multiplier,c
  6975  000992  0E00               	movlw	0
  6976  000994  202B               	addwfc	?___awdiv+1,w,c
  6977  000996  6E33               	movwf	___wmul@multiplier+1,c
  6978  000998  ECA3  F016         	call	___wmul	;wreg free
  6979  00099C  0EFB               	movlw	low __npowers_
  6980  00099E  2432               	addwf	?___wmul,w,c
  6981  0009A0  6EF6               	movwf	tblptrl,c
  6982  0009A2  0EFD               	movlw	high __npowers_
  6983  0009A4  2033               	addwfc	?___wmul+1,w,c
  6984  0009A6  6EF7               	movwf	tblptrh,c
  6985  0009A8                     	if	0	;There are less than 3 active tblptr bytes
  6986  0009A8                     	endif
  6987  0009A8  0009               	tblrd		*+
  6988  0009AA  CFF5 F08F          	movff	tablat,___ftmul@f2
  6989  0009AE  0009               	tblrd		*+
  6990  0009B0  CFF5 F090          	movff	tablat,___ftmul@f2+1
  6991  0009B4  000A               	tblrd		*-
  6992  0009B6  CFF5 F091          	movff	tablat,___ftmul@f2+2
  6993  0009BA  0E00               	movlw	0
  6994  0009BC  6E2D               	movwf	___awdiv@divisor+1,c
  6995  0009BE  0E64               	movlw	100
  6996  0009C0  6E2C               	movwf	___awdiv@divisor,c
  6997  0009C2  0100               	movlb	0	; () banked
  6998  0009C4  51A1               	movf	scale@scl& (0+255),w,b
  6999  0009C6  6E2A               	movwf	___awdiv@dividend,c
  7000  0009C8  6A2B               	clrf	___awdiv@dividend+1,c
  7001  0009CA  BE2A               	btfsc	___awdiv@dividend,7,c
  7002  0009CC  062B               	decf	___awdiv@dividend+1,f,c
  7003  0009CE  ECC8  F012         	call	___awdiv	;wreg free
  7004  0009D2  0E12               	movlw	18
  7005  0009D4  242A               	addwf	?___awdiv,w,c
  7006  0009D6  6E32               	movwf	___wmul@multiplier,c
  7007  0009D8  0E00               	movlw	0
  7008  0009DA  202B               	addwfc	?___awdiv+1,w,c
  7009  0009DC  6E33               	movwf	___wmul@multiplier+1,c
  7010  0009DE  0E00               	movlw	0
  7011  0009E0  6E35               	movwf	___wmul@multiplicand+1,c
  7012  0009E2  0E03               	movlw	3
  7013  0009E4  6E34               	movwf	___wmul@multiplicand,c
  7014  0009E6  ECA3  F016         	call	___wmul	;wreg free
  7015  0009EA  0EFB               	movlw	low __npowers_
  7016  0009EC  2432               	addwf	?___wmul,w,c
  7017  0009EE  6EF6               	movwf	tblptrl,c
  7018  0009F0  0EFD               	movlw	high __npowers_
  7019  0009F2  2033               	addwfc	?___wmul+1,w,c
  7020  0009F4  6EF7               	movwf	tblptrh,c
  7021  0009F6                     	if	0	;There are less than 3 active tblptr bytes
  7022  0009F6                     	endif
  7023  0009F6  0009               	tblrd		*+
  7024  0009F8  CFF5 F08C          	movff	tablat,___ftmul@f1
  7025  0009FC  0009               	tblrd		*+
  7026  0009FE  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7027  000A02  000A               	tblrd		*-
  7028  000A04  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7029  000A08  ECE8  F00B         	call	___ftmul	;wreg free
  7030  000A0C  C08C  F09E         	movff	?___ftmul,_scale$1341
  7031  000A10  C08D  F09F         	movff	?___ftmul+1,_scale$1341+1
  7032  000A14  C08E  F0A0         	movff	?___ftmul+2,_scale$1341+2
  7033                           
  7034                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  7035  000A18  C09E  F08C         	movff	_scale$1341,___ftmul@f1
  7036  000A1C  C09F  F08D         	movff	_scale$1341+1,___ftmul@f1+1
  7037  000A20  C0A0  F08E         	movff	_scale$1341+2,___ftmul@f1+2
  7038  000A24  0E00               	movlw	0
  7039  000A26  6E35               	movwf	___wmul@multiplicand+1,c
  7040  000A28  0E03               	movlw	3
  7041  000A2A  6E34               	movwf	___wmul@multiplicand,c
  7042  000A2C  0E00               	movlw	0
  7043  000A2E  6E27               	movwf	___awmod@divisor+1,c
  7044  000A30  0E0A               	movlw	10
  7045  000A32  6E26               	movwf	___awmod@divisor,c
  7046  000A34  0100               	movlb	0	; () banked
  7047  000A36  51A1               	movf	scale@scl& (0+255),w,b
  7048  000A38  6E24               	movwf	___awmod@dividend,c
  7049  000A3A  6A25               	clrf	___awmod@dividend+1,c
  7050  000A3C  BE24               	btfsc	___awmod@dividend,7,c
  7051  000A3E  0625               	decf	___awmod@dividend+1,f,c
  7052  000A40  ECC4  F013         	call	___awmod	;wreg free
  7053  000A44  C024  F032         	movff	?___awmod,___wmul@multiplier
  7054  000A48  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7055  000A4C  ECA3  F016         	call	___wmul	;wreg free
  7056  000A50  0EFB               	movlw	low __npowers_
  7057  000A52  2432               	addwf	?___wmul,w,c
  7058  000A54  6EF6               	movwf	tblptrl,c
  7059  000A56  0EFD               	movlw	high __npowers_
  7060  000A58  2033               	addwfc	?___wmul+1,w,c
  7061  000A5A  6EF7               	movwf	tblptrh,c
  7062  000A5C                     	if	0	;There are less than 3 active tblptr bytes
  7063  000A5C                     	endif
  7064  000A5C  0009               	tblrd		*+
  7065  000A5E  CFF5 F08F          	movff	tablat,___ftmul@f2
  7066  000A62  0009               	tblrd		*+
  7067  000A64  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7068  000A68  000A               	tblrd		*-
  7069  000A6A  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7070  000A6E  ECE8  F00B         	call	___ftmul	;wreg free
  7071  000A72  C08C  F09B         	movff	?___ftmul,?_scale
  7072  000A76  C08D  F09C         	movff	?___ftmul+1,?_scale+1
  7073  000A7A  C08E  F09D         	movff	?___ftmul+2,?_scale+2
  7074  000A7E  0012               	return	
  7075  000A80                     l5319:
  7076                           
  7077                           ;doprnt.c: 432: else if(scl > 10)
  7078  000A80  0100               	movlb	0	; () banked
  7079  000A82  51A1               	movf	scale@scl& (0+255),w,b
  7080  000A84  0A80               	xorlw	128
  7081  000A86  0F75               	addlw	-139
  7082  000A88  A0D8               	btfss	status,0,c
  7083  000A8A  D04F               	goto	l5325
  7084                           
  7085                           ; BSR set to: 0
  7086                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  7087  000A8C  0E00               	movlw	0
  7088  000A8E  6E2D               	movwf	___awdiv@divisor+1,c
  7089  000A90  0E0A               	movlw	10
  7090  000A92  6E2C               	movwf	___awdiv@divisor,c
  7091  000A94  0100               	movlb	0	; () banked
  7092  000A96  51A1               	movf	scale@scl& (0+255),w,b
  7093  000A98  6E2A               	movwf	___awdiv@dividend,c
  7094  000A9A  6A2B               	clrf	___awdiv@dividend+1,c
  7095  000A9C  BE2A               	btfsc	___awdiv@dividend,7,c
  7096  000A9E  062B               	decf	___awdiv@dividend+1,f,c
  7097  000AA0  ECC8  F012         	call	___awdiv	;wreg free
  7098  000AA4  0E09               	movlw	9
  7099  000AA6  242A               	addwf	?___awdiv,w,c
  7100  000AA8  6E32               	movwf	___wmul@multiplier,c
  7101  000AAA  0E00               	movlw	0
  7102  000AAC  202B               	addwfc	?___awdiv+1,w,c
  7103  000AAE  6E33               	movwf	___wmul@multiplier+1,c
  7104  000AB0  0E00               	movlw	0
  7105  000AB2  6E35               	movwf	___wmul@multiplicand+1,c
  7106  000AB4  0E03               	movlw	3
  7107  000AB6  6E34               	movwf	___wmul@multiplicand,c
  7108  000AB8  ECA3  F016         	call	___wmul	;wreg free
  7109  000ABC  0EFB               	movlw	low __npowers_
  7110  000ABE  2432               	addwf	?___wmul,w,c
  7111  000AC0  6EF6               	movwf	tblptrl,c
  7112  000AC2  0EFD               	movlw	high __npowers_
  7113  000AC4  2033               	addwfc	?___wmul+1,w,c
  7114  000AC6  6EF7               	movwf	tblptrh,c
  7115  000AC8                     	if	0	;There are less than 3 active tblptr bytes
  7116  000AC8                     	endif
  7117  000AC8  0009               	tblrd		*+
  7118  000ACA  CFF5 F08C          	movff	tablat,___ftmul@f1
  7119  000ACE  0009               	tblrd		*+
  7120  000AD0  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7121  000AD4  000A               	tblrd		*-
  7122  000AD6  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7123  000ADA  0E00               	movlw	0
  7124  000ADC  6E35               	movwf	___wmul@multiplicand+1,c
  7125  000ADE  0E03               	movlw	3
  7126  000AE0  6E34               	movwf	___wmul@multiplicand,c
  7127  000AE2  0E00               	movlw	0
  7128  000AE4  6E27               	movwf	___awmod@divisor+1,c
  7129  000AE6  0E0A               	movlw	10
  7130  000AE8  6E26               	movwf	___awmod@divisor,c
  7131  000AEA  0100               	movlb	0	; () banked
  7132  000AEC  51A1               	movf	scale@scl& (0+255),w,b
  7133  000AEE  6E24               	movwf	___awmod@dividend,c
  7134  000AF0  6A25               	clrf	___awmod@dividend+1,c
  7135  000AF2  BE24               	btfsc	___awmod@dividend,7,c
  7136  000AF4  0625               	decf	___awmod@dividend+1,f,c
  7137  000AF6  ECC4  F013         	call	___awmod	;wreg free
  7138  000AFA  C024  F032         	movff	?___awmod,___wmul@multiplier
  7139  000AFE  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7140  000B02  ECA3  F016         	call	___wmul	;wreg free
  7141  000B06  0EFB               	movlw	low __npowers_
  7142  000B08  2432               	addwf	?___wmul,w,c
  7143  000B0A  6EF6               	movwf	tblptrl,c
  7144  000B0C  0EFD               	movlw	high __npowers_
  7145  000B0E  2033               	addwfc	?___wmul+1,w,c
  7146  000B10  6EF7               	movwf	tblptrh,c
  7147  000B12                     	if	0	;There are less than 3 active tblptr bytes
  7148  000B12                     	endif
  7149  000B12  0009               	tblrd		*+
  7150  000B14  CFF5 F08F          	movff	tablat,___ftmul@f2
  7151  000B18  0009               	tblrd		*+
  7152  000B1A  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7153  000B1E  000A               	tblrd		*-
  7154  000B20  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7155  000B24  ECE8  F00B         	call	___ftmul	;wreg free
  7156  000B28  D7A4               	goto	L2
  7157  000B2A                     l5325:
  7158                           
  7159                           ;doprnt.c: 434: return _npowers_[scl];
  7160  000B2A  0100               	movlb	0	; () banked
  7161  000B2C  51A1               	movf	scale@scl& (0+255),w,b
  7162  000B2E  0D03               	mullw	3
  7163  000B30  0EFB               	movlw	low __npowers_
  7164  000B32  24F3               	addwf	prodl,w,c
  7165  000B34  6EF6               	movwf	tblptrl,c
  7166  000B36  0EFD               	movlw	high __npowers_
  7167  000B38  20F4               	addwfc	prodh,w,c
  7168  000B3A  6EF7               	movwf	tblptrh,c
  7169  000B3C                     	if	0	;There are less than 3 active tblptr bytes
  7170  000B3C                     	endif
  7171  000B3C  0009               	tblrd		*+
  7172  000B3E  CFF5 F09B          	movff	tablat,?_scale
  7173  000B42  0009               	tblrd		*+
  7174  000B44  CFF5 F09C          	movff	tablat,?_scale+1
  7175  000B48  000A               	tblrd		*-
  7176  000B4A  CFF5 F09D          	movff	tablat,?_scale+2
  7177                           
  7178                           ; BSR set to: 0
  7179  000B4E  0012               	return	
  7180  000B50                     l5329:
  7181                           
  7182                           ; BSR set to: 0
  7183                           ;doprnt.c: 435: }
  7184                           ;doprnt.c: 436: if(scl>=110)
  7185  000B50  0100               	movlb	0	; () banked
  7186  000B52  51A1               	movf	scale@scl& (0+255),w,b
  7187  000B54  0A80               	xorlw	128
  7188  000B56  0F12               	addlw	-238
  7189  000B58  A0D8               	btfss	status,0,c
  7190  000B5A  D094               	goto	l5337
  7191                           
  7192                           ; BSR set to: 0
  7193                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7194  000B5C  0E00               	movlw	0
  7195  000B5E  6E35               	movwf	___wmul@multiplicand+1,c
  7196  000B60  0E03               	movlw	3
  7197  000B62  6E34               	movwf	___wmul@multiplicand,c
  7198  000B64  0E00               	movlw	0
  7199  000B66  6E2D               	movwf	___awdiv@divisor+1,c
  7200  000B68  0E0A               	movlw	10
  7201  000B6A  6E2C               	movwf	___awdiv@divisor,c
  7202  000B6C  0E00               	movlw	0
  7203  000B6E  6E27               	movwf	___awmod@divisor+1,c
  7204  000B70  0E64               	movlw	100
  7205  000B72  6E26               	movwf	___awmod@divisor,c
  7206  000B74  0100               	movlb	0	; () banked
  7207  000B76  51A1               	movf	scale@scl& (0+255),w,b
  7208  000B78  6E24               	movwf	___awmod@dividend,c
  7209  000B7A  6A25               	clrf	___awmod@dividend+1,c
  7210  000B7C  BE24               	btfsc	___awmod@dividend,7,c
  7211  000B7E  0625               	decf	___awmod@dividend+1,f,c
  7212  000B80  ECC4  F013         	call	___awmod	;wreg free
  7213  000B84  C024  F02A         	movff	?___awmod,___awdiv@dividend
  7214  000B88  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  7215  000B8C  ECC8  F012         	call	___awdiv	;wreg free
  7216  000B90  0E09               	movlw	9
  7217  000B92  242A               	addwf	?___awdiv,w,c
  7218  000B94  6E32               	movwf	___wmul@multiplier,c
  7219  000B96  0E00               	movlw	0
  7220  000B98  202B               	addwfc	?___awdiv+1,w,c
  7221  000B9A  6E33               	movwf	___wmul@multiplier+1,c
  7222  000B9C  ECA3  F016         	call	___wmul	;wreg free
  7223  000BA0  0E22               	movlw	low __powers_
  7224  000BA2  2432               	addwf	?___wmul,w,c
  7225  000BA4  6EF6               	movwf	tblptrl,c
  7226  000BA6  0EFE               	movlw	high __powers_
  7227  000BA8  2033               	addwfc	?___wmul+1,w,c
  7228  000BAA  6EF7               	movwf	tblptrh,c
  7229  000BAC                     	if	0	;There are less than 3 active tblptr bytes
  7230  000BAC                     	endif
  7231  000BAC  0009               	tblrd		*+
  7232  000BAE  CFF5 F08F          	movff	tablat,___ftmul@f2
  7233  000BB2  0009               	tblrd		*+
  7234  000BB4  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7235  000BB8  000A               	tblrd		*-
  7236  000BBA  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7237  000BBE  0E00               	movlw	0
  7238  000BC0  6E2D               	movwf	___awdiv@divisor+1,c
  7239  000BC2  0E64               	movlw	100
  7240  000BC4  6E2C               	movwf	___awdiv@divisor,c
  7241  000BC6  0100               	movlb	0	; () banked
  7242  000BC8  51A1               	movf	scale@scl& (0+255),w,b
  7243  000BCA  6E2A               	movwf	___awdiv@dividend,c
  7244  000BCC  6A2B               	clrf	___awdiv@dividend+1,c
  7245  000BCE  BE2A               	btfsc	___awdiv@dividend,7,c
  7246  000BD0  062B               	decf	___awdiv@dividend+1,f,c
  7247  000BD2  ECC8  F012         	call	___awdiv	;wreg free
  7248  000BD6  0E12               	movlw	18
  7249  000BD8  242A               	addwf	?___awdiv,w,c
  7250  000BDA  6E32               	movwf	___wmul@multiplier,c
  7251  000BDC  0E00               	movlw	0
  7252  000BDE  202B               	addwfc	?___awdiv+1,w,c
  7253  000BE0  6E33               	movwf	___wmul@multiplier+1,c
  7254  000BE2  0E00               	movlw	0
  7255  000BE4  6E35               	movwf	___wmul@multiplicand+1,c
  7256  000BE6  0E03               	movlw	3
  7257  000BE8  6E34               	movwf	___wmul@multiplicand,c
  7258  000BEA  ECA3  F016         	call	___wmul	;wreg free
  7259  000BEE  0E22               	movlw	low __powers_
  7260  000BF0  2432               	addwf	?___wmul,w,c
  7261  000BF2  6EF6               	movwf	tblptrl,c
  7262  000BF4  0EFE               	movlw	high __powers_
  7263  000BF6  2033               	addwfc	?___wmul+1,w,c
  7264  000BF8  6EF7               	movwf	tblptrh,c
  7265  000BFA                     	if	0	;There are less than 3 active tblptr bytes
  7266  000BFA                     	endif
  7267  000BFA  0009               	tblrd		*+
  7268  000BFC  CFF5 F08C          	movff	tablat,___ftmul@f1
  7269  000C00  0009               	tblrd		*+
  7270  000C02  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7271  000C06  000A               	tblrd		*-
  7272  000C08  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7273  000C0C  ECE8  F00B         	call	___ftmul	;wreg free
  7274  000C10  C08C  F09E         	movff	?___ftmul,_scale$1341
  7275  000C14  C08D  F09F         	movff	?___ftmul+1,_scale$1341+1
  7276  000C18  C08E  F0A0         	movff	?___ftmul+2,_scale$1341+2
  7277                           
  7278                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  7279  000C1C  C09E  F08C         	movff	_scale$1341,___ftmul@f1
  7280  000C20  C09F  F08D         	movff	_scale$1341+1,___ftmul@f1+1
  7281  000C24  C0A0  F08E         	movff	_scale$1341+2,___ftmul@f1+2
  7282  000C28  0E00               	movlw	0
  7283  000C2A  6E35               	movwf	___wmul@multiplicand+1,c
  7284  000C2C  0E03               	movlw	3
  7285  000C2E  6E34               	movwf	___wmul@multiplicand,c
  7286  000C30  0E00               	movlw	0
  7287  000C32  6E27               	movwf	___awmod@divisor+1,c
  7288  000C34  0E0A               	movlw	10
  7289  000C36  6E26               	movwf	___awmod@divisor,c
  7290  000C38  0100               	movlb	0	; () banked
  7291  000C3A  51A1               	movf	scale@scl& (0+255),w,b
  7292  000C3C  6E24               	movwf	___awmod@dividend,c
  7293  000C3E  6A25               	clrf	___awmod@dividend+1,c
  7294  000C40  BE24               	btfsc	___awmod@dividend,7,c
  7295  000C42  0625               	decf	___awmod@dividend+1,f,c
  7296  000C44  ECC4  F013         	call	___awmod	;wreg free
  7297  000C48  C024  F032         	movff	?___awmod,___wmul@multiplier
  7298  000C4C  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7299  000C50  ECA3  F016         	call	___wmul	;wreg free
  7300  000C54  0E22               	movlw	low __powers_
  7301  000C56  2432               	addwf	?___wmul,w,c
  7302  000C58  6EF6               	movwf	tblptrl,c
  7303  000C5A  0EFE               	movlw	high __powers_
  7304  000C5C  2033               	addwfc	?___wmul+1,w,c
  7305  000C5E  6EF7               	movwf	tblptrh,c
  7306  000C60                     	if	0	;There are less than 3 active tblptr bytes
  7307  000C60                     	endif
  7308  000C60  0009               	tblrd		*+
  7309  000C62  CFF5 F08F          	movff	tablat,___ftmul@f2
  7310  000C66  0009               	tblrd		*+
  7311  000C68  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7312  000C6C  000A               	tblrd		*-
  7313  000C6E  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7314  000C72  ECE8  F00B         	call	___ftmul	;wreg free
  7315  000C76  C08C  F09B         	movff	?___ftmul,?_scale
  7316  000C7A  C08D  F09C         	movff	?___ftmul+1,?_scale+1
  7317  000C7E  C08E  F09D         	movff	?___ftmul+2,?_scale+2
  7318  000C82  0012               	return	
  7319  000C84                     l5337:
  7320                           
  7321                           ;doprnt.c: 438: else if(scl > 10)
  7322  000C84  0100               	movlb	0	; () banked
  7323  000C86  51A1               	movf	scale@scl& (0+255),w,b
  7324  000C88  0A80               	xorlw	128
  7325  000C8A  0F75               	addlw	-139
  7326  000C8C  A0D8               	btfss	status,0,c
  7327  000C8E  D04F               	goto	l5343
  7328                           
  7329                           ; BSR set to: 0
  7330                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  7331  000C90  0E00               	movlw	0
  7332  000C92  6E2D               	movwf	___awdiv@divisor+1,c
  7333  000C94  0E0A               	movlw	10
  7334  000C96  6E2C               	movwf	___awdiv@divisor,c
  7335  000C98  0100               	movlb	0	; () banked
  7336  000C9A  51A1               	movf	scale@scl& (0+255),w,b
  7337  000C9C  6E2A               	movwf	___awdiv@dividend,c
  7338  000C9E  6A2B               	clrf	___awdiv@dividend+1,c
  7339  000CA0  BE2A               	btfsc	___awdiv@dividend,7,c
  7340  000CA2  062B               	decf	___awdiv@dividend+1,f,c
  7341  000CA4  ECC8  F012         	call	___awdiv	;wreg free
  7342  000CA8  0E09               	movlw	9
  7343  000CAA  242A               	addwf	?___awdiv,w,c
  7344  000CAC  6E32               	movwf	___wmul@multiplier,c
  7345  000CAE  0E00               	movlw	0
  7346  000CB0  202B               	addwfc	?___awdiv+1,w,c
  7347  000CB2  6E33               	movwf	___wmul@multiplier+1,c
  7348  000CB4  0E00               	movlw	0
  7349  000CB6  6E35               	movwf	___wmul@multiplicand+1,c
  7350  000CB8  0E03               	movlw	3
  7351  000CBA  6E34               	movwf	___wmul@multiplicand,c
  7352  000CBC  ECA3  F016         	call	___wmul	;wreg free
  7353  000CC0  0E22               	movlw	low __powers_
  7354  000CC2  2432               	addwf	?___wmul,w,c
  7355  000CC4  6EF6               	movwf	tblptrl,c
  7356  000CC6  0EFE               	movlw	high __powers_
  7357  000CC8  2033               	addwfc	?___wmul+1,w,c
  7358  000CCA  6EF7               	movwf	tblptrh,c
  7359  000CCC                     	if	0	;There are less than 3 active tblptr bytes
  7360  000CCC                     	endif
  7361  000CCC  0009               	tblrd		*+
  7362  000CCE  CFF5 F08C          	movff	tablat,___ftmul@f1
  7363  000CD2  0009               	tblrd		*+
  7364  000CD4  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7365  000CD8  000A               	tblrd		*-
  7366  000CDA  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7367  000CDE  0E00               	movlw	0
  7368  000CE0  6E35               	movwf	___wmul@multiplicand+1,c
  7369  000CE2  0E03               	movlw	3
  7370  000CE4  6E34               	movwf	___wmul@multiplicand,c
  7371  000CE6  0E00               	movlw	0
  7372  000CE8  6E27               	movwf	___awmod@divisor+1,c
  7373  000CEA  0E0A               	movlw	10
  7374  000CEC  6E26               	movwf	___awmod@divisor,c
  7375  000CEE  0100               	movlb	0	; () banked
  7376  000CF0  51A1               	movf	scale@scl& (0+255),w,b
  7377  000CF2  6E24               	movwf	___awmod@dividend,c
  7378  000CF4  6A25               	clrf	___awmod@dividend+1,c
  7379  000CF6  BE24               	btfsc	___awmod@dividend,7,c
  7380  000CF8  0625               	decf	___awmod@dividend+1,f,c
  7381  000CFA  ECC4  F013         	call	___awmod	;wreg free
  7382  000CFE  C024  F032         	movff	?___awmod,___wmul@multiplier
  7383  000D02  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7384  000D06  ECA3  F016         	call	___wmul	;wreg free
  7385  000D0A  0E22               	movlw	low __powers_
  7386  000D0C  2432               	addwf	?___wmul,w,c
  7387  000D0E  6EF6               	movwf	tblptrl,c
  7388  000D10  0EFE               	movlw	high __powers_
  7389  000D12  2033               	addwfc	?___wmul+1,w,c
  7390  000D14  6EF7               	movwf	tblptrh,c
  7391  000D16                     	if	0	;There are less than 3 active tblptr bytes
  7392  000D16                     	endif
  7393  000D16  0009               	tblrd		*+
  7394  000D18  CFF5 F08F          	movff	tablat,___ftmul@f2
  7395  000D1C  0009               	tblrd		*+
  7396  000D1E  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7397  000D22  000A               	tblrd		*-
  7398  000D24  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7399  000D28  ECE8  F00B         	call	___ftmul	;wreg free
  7400  000D2C  D7A4               	goto	L3
  7401  000D2E                     l5343:
  7402                           
  7403                           ;doprnt.c: 440: return _powers_[scl];
  7404  000D2E  0100               	movlb	0	; () banked
  7405  000D30  51A1               	movf	scale@scl& (0+255),w,b
  7406  000D32  0D03               	mullw	3
  7407  000D34  0E22               	movlw	low __powers_
  7408  000D36  24F3               	addwf	prodl,w,c
  7409  000D38  6EF6               	movwf	tblptrl,c
  7410  000D3A  0EFE               	movlw	high __powers_
  7411  000D3C  20F4               	addwfc	prodh,w,c
  7412  000D3E  6EF7               	movwf	tblptrh,c
  7413  000D40                     	if	0	;There are less than 3 active tblptr bytes
  7414  000D40                     	endif
  7415  000D40  0009               	tblrd		*+
  7416  000D42  CFF5 F09B          	movff	tablat,?_scale
  7417  000D46  0009               	tblrd		*+
  7418  000D48  CFF5 F09C          	movff	tablat,?_scale+1
  7419  000D4C  000A               	tblrd		*-
  7420  000D4E  CFF5 F09D          	movff	tablat,?_scale+2
  7421  000D52  0012               	return	
  7422  000D54                     __end_of_scale:
  7423                           	opt stack 0
  7424                           tblptru	equ	0xFF8
  7425                           tblptrh	equ	0xFF7
  7426                           tblptrl	equ	0xFF6
  7427                           tablat	equ	0xFF5
  7428                           prodh	equ	0xFF4
  7429                           prodl	equ	0xFF3
  7430                           intcon	equ	0xFF2
  7431                           postinc0	equ	0xFEE
  7432                           wreg	equ	0xFE8
  7433                           postdec1	equ	0xFE5
  7434                           plusw1	equ	0xFE3
  7435                           fsr1l	equ	0xFE1
  7436                           indf2	equ	0xFDF
  7437                           postinc2	equ	0xFDE
  7438                           postdec2	equ	0xFDD
  7439                           plusw2	equ	0xFDB
  7440                           fsr2h	equ	0xFDA
  7441                           fsr2l	equ	0xFD9
  7442                           status	equ	0xFD8
  7443                           
  7444 ;; *************** function _putch *****************
  7445 ;; Defined at:
  7446 ;;		line 35 in file "lcd.c"
  7447 ;; Parameters:    Size  Location     Type
  7448 ;;  data            1    wreg     unsigned char 
  7449 ;; Auto vars:     Size  Location     Type
  7450 ;;  data            1   39[COMRAM] unsigned char 
  7451 ;; Return value:  Size  Location     Type
  7452 ;;                  1    wreg      void 
  7453 ;; Registers used:
  7454 ;;		wreg, status,2, status,0, cstack
  7455 ;; Tracked objects:
  7456 ;;		On entry : 0/0
  7457 ;;		On exit  : 0/0
  7458 ;;		Unchanged: 0/0
  7459 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7460 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7461 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7462 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7463 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7464 ;;Total ram usage:        1 bytes
  7465 ;; Hardware stack levels used:    1
  7466 ;; Hardware stack levels required when called:    6
  7467 ;; This function calls:
  7468 ;;		_lcdNewline
  7469 ;;		_lcdNibble
  7470 ;; This function is called by:
  7471 ;;		_printf
  7472 ;; This function uses a non-reentrant model
  7473 ;;
  7474                           
  7475                           	psect	text32
  7476  002D90                     __ptext32:
  7477                           	opt stack 0
  7478  002D90                     _putch:
  7479                           	opt stack 22
  7480                           
  7481                           ;incstack = 0
  7482                           ;putch@data stored from wreg
  7483  002D90  6E28               	movwf	putch@data,c
  7484                           
  7485                           ;lcd.c: 36: if(data == '\n')lcdNewline();
  7486  002D92  0E0A               	movlw	10
  7487  002D94  1828               	xorwf	putch@data,w,c
  7488  002D96  A4D8               	btfss	status,2,c
  7489  002D98  D003               	goto	l161
  7490  002D9A  EC42  F017         	call	_lcdNewline	;wreg free
  7491  002D9E  0012               	return	
  7492  002DA0                     l161:
  7493                           
  7494                           ;lcd.c: 37: else
  7495                           ;lcd.c: 38: {
  7496                           ;lcd.c: 39: LATDbits.LATD2 = 1;
  7497  002DA0  848C               	bsf	3980,2,c	;volatile
  7498                           
  7499                           ;lcd.c: 40: _delay((unsigned long)((140)*(10000000/4000000.0)));
  7500  002DA2  0E74               	movlw	116
  7501  002DA4                     u5987:
  7502  002DA4  2EE8               	decfsz	wreg,f,c
  7503  002DA6  D7FE               	bra	u5987
  7504  002DA8  D000               	nop2	
  7505                           
  7506                           ;lcd.c: 41: lcdNibble(data);
  7507  002DAA  5028               	movf	putch@data,w,c
  7508  002DAC  EC2F  F014         	call	_lcdNibble
  7509  002DB0  0012               	return	
  7510  002DB2                     __end_of_putch:
  7511                           	opt stack 0
  7512                           tblptru	equ	0xFF8
  7513                           tblptrh	equ	0xFF7
  7514                           tblptrl	equ	0xFF6
  7515                           tablat	equ	0xFF5
  7516                           prodh	equ	0xFF4
  7517                           prodl	equ	0xFF3
  7518                           intcon	equ	0xFF2
  7519                           postinc0	equ	0xFEE
  7520                           wreg	equ	0xFE8
  7521                           postdec1	equ	0xFE5
  7522                           plusw1	equ	0xFE3
  7523                           fsr1l	equ	0xFE1
  7524                           indf2	equ	0xFDF
  7525                           postinc2	equ	0xFDE
  7526                           postdec2	equ	0xFDD
  7527                           plusw2	equ	0xFDB
  7528                           fsr2h	equ	0xFDA
  7529                           fsr2l	equ	0xFD9
  7530                           status	equ	0xFD8
  7531                           
  7532 ;; *************** function _lcdNewline *****************
  7533 ;; Defined at:
  7534 ;;		line 78 in file "lcd.c"
  7535 ;; Parameters:    Size  Location     Type
  7536 ;;		None
  7537 ;; Auto vars:     Size  Location     Type
  7538 ;;		None
  7539 ;; Return value:  Size  Location     Type
  7540 ;;                  1    wreg      void 
  7541 ;; Registers used:
  7542 ;;		wreg, status,2, status,0, cstack
  7543 ;; Tracked objects:
  7544 ;;		On entry : 0/0
  7545 ;;		On exit  : 0/0
  7546 ;;		Unchanged: 0/0
  7547 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7548 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7549 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7550 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7551 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7552 ;;Total ram usage:        0 bytes
  7553 ;; Hardware stack levels used:    1
  7554 ;; Hardware stack levels required when called:    5
  7555 ;; This function calls:
  7556 ;;		_lcdInst
  7557 ;; This function is called by:
  7558 ;;		_putch
  7559 ;; This function uses a non-reentrant model
  7560 ;;
  7561                           
  7562                           	psect	text33
  7563  002E84                     __ptext33:
  7564                           	opt stack 0
  7565  002E84                     _lcdNewline:
  7566                           	opt stack 22
  7567                           
  7568                           ;lcd.c: 79: lcdInst(0b11000000);
  7569                           
  7570                           ;incstack = 0
  7571  002E84  0EC0               	movlw	192
  7572  002E86  ECD9  F016         	call	_lcdInst
  7573  002E8A  0012               	return		;funcret
  7574  002E8C                     __end_of_lcdNewline:
  7575                           	opt stack 0
  7576                           tblptru	equ	0xFF8
  7577                           tblptrh	equ	0xFF7
  7578                           tblptrl	equ	0xFF6
  7579                           tablat	equ	0xFF5
  7580                           prodh	equ	0xFF4
  7581                           prodl	equ	0xFF3
  7582                           intcon	equ	0xFF2
  7583                           postinc0	equ	0xFEE
  7584                           wreg	equ	0xFE8
  7585                           postdec1	equ	0xFE5
  7586                           plusw1	equ	0xFE3
  7587                           fsr1l	equ	0xFE1
  7588                           indf2	equ	0xFDF
  7589                           postinc2	equ	0xFDE
  7590                           postdec2	equ	0xFDD
  7591                           plusw2	equ	0xFDB
  7592                           fsr2h	equ	0xFDA
  7593                           fsr2l	equ	0xFD9
  7594                           status	equ	0xFD8
  7595                           
  7596 ;; *************** function _fround *****************
  7597 ;; Defined at:
  7598 ;;		line 409 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\doprnt.c"
  7599 ;; Parameters:    Size  Location     Type
  7600 ;;  prec            1    wreg     unsigned char 
  7601 ;; Auto vars:     Size  Location     Type
  7602 ;;  prec            1   36[BANK0 ] unsigned char 
  7603 ;; Return value:  Size  Location     Type
  7604 ;;                  3   27[BANK0 ] unsigned char 
  7605 ;; Registers used:
  7606 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  7607 ;; Tracked objects:
  7608 ;;		On entry : 0/0
  7609 ;;		On exit  : 0/0
  7610 ;;		Unchanged: 0/0
  7611 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7612 ;;      Params:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7613 ;;      Locals:         0       7       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7614 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7615 ;;      Totals:         0      10       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7616 ;;Total ram usage:       10 bytes
  7617 ;; Hardware stack levels used:    1
  7618 ;; Hardware stack levels required when called:    5
  7619 ;; This function calls:
  7620 ;;		___awdiv
  7621 ;;		___awmod
  7622 ;;		___ftmul
  7623 ;;		___wmul
  7624 ;; This function is called by:
  7625 ;;		_printf
  7626 ;; This function uses a non-reentrant model
  7627 ;;
  7628                           
  7629                           	psect	text34
  7630  00123E                     __ptext34:
  7631                           	opt stack 0
  7632  00123E                     _fround:
  7633                           	opt stack 23
  7634                           
  7635                           ;incstack = 0
  7636                           ;fround@prec stored from wreg
  7637  00123E  0100               	movlb	0	; () banked
  7638  001240  6FA4               	movwf	fround@prec& (0+255),b
  7639                           
  7640                           ;doprnt.c: 413: if(prec>=110)
  7641  001242  0E6D               	movlw	109
  7642  001244  0100               	movlb	0	; () banked
  7643  001246  65A4               	cpfsgt	fround@prec& (0+255),b
  7644  001248  D0A2               	goto	l5297
  7645                           
  7646                           ; BSR set to: 0
  7647                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7648  00124A  0E00               	movlw	0
  7649  00124C  6E35               	movwf	___wmul@multiplicand+1,c
  7650  00124E  0E03               	movlw	3
  7651  001250  6E34               	movwf	___wmul@multiplicand,c
  7652  001252  0E00               	movlw	0
  7653  001254  6E2D               	movwf	___awdiv@divisor+1,c
  7654  001256  0E0A               	movlw	10
  7655  001258  6E2C               	movwf	___awdiv@divisor,c
  7656  00125A  0E00               	movlw	0
  7657  00125C  6E27               	movwf	___awmod@divisor+1,c
  7658  00125E  0E64               	movlw	100
  7659  001260  6E26               	movwf	___awmod@divisor,c
  7660  001262  C0A4  F024         	movff	fround@prec,___awmod@dividend
  7661  001266  6A25               	clrf	___awmod@dividend+1,c
  7662  001268  ECC4  F013         	call	___awmod	;wreg free
  7663  00126C  C024  F02A         	movff	?___awmod,___awdiv@dividend
  7664  001270  C025  F02B         	movff	?___awmod+1,___awdiv@dividend+1
  7665  001274  ECC8  F012         	call	___awdiv	;wreg free
  7666  001278  0E09               	movlw	9
  7667  00127A  242A               	addwf	?___awdiv,w,c
  7668  00127C  6E32               	movwf	___wmul@multiplier,c
  7669  00127E  0E00               	movlw	0
  7670  001280  202B               	addwfc	?___awdiv+1,w,c
  7671  001282  6E33               	movwf	___wmul@multiplier+1,c
  7672  001284  ECA3  F016         	call	___wmul	;wreg free
  7673  001288  0EFB               	movlw	low __npowers_
  7674  00128A  2432               	addwf	?___wmul,w,c
  7675  00128C  6EF6               	movwf	tblptrl,c
  7676  00128E  0EFD               	movlw	high __npowers_
  7677  001290  2033               	addwfc	?___wmul+1,w,c
  7678  001292  6EF7               	movwf	tblptrh,c
  7679  001294                     	if	0	;There are less than 3 active tblptr bytes
  7680  001294                     	endif
  7681  001294  0009               	tblrd		*+
  7682  001296  CFF5 F08F          	movff	tablat,___ftmul@f2
  7683  00129A  0009               	tblrd		*+
  7684  00129C  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7685  0012A0  000A               	tblrd		*-
  7686  0012A2  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7687  0012A6  0E00               	movlw	0
  7688  0012A8  6E2D               	movwf	___awdiv@divisor+1,c
  7689  0012AA  0E64               	movlw	100
  7690  0012AC  6E2C               	movwf	___awdiv@divisor,c
  7691  0012AE  C0A4  F02A         	movff	fround@prec,___awdiv@dividend
  7692  0012B2  6A2B               	clrf	___awdiv@dividend+1,c
  7693  0012B4  ECC8  F012         	call	___awdiv	;wreg free
  7694  0012B8  0E12               	movlw	18
  7695  0012BA  242A               	addwf	?___awdiv,w,c
  7696  0012BC  6E32               	movwf	___wmul@multiplier,c
  7697  0012BE  0E00               	movlw	0
  7698  0012C0  202B               	addwfc	?___awdiv+1,w,c
  7699  0012C2  6E33               	movwf	___wmul@multiplier+1,c
  7700  0012C4  0E00               	movlw	0
  7701  0012C6  6E35               	movwf	___wmul@multiplicand+1,c
  7702  0012C8  0E03               	movlw	3
  7703  0012CA  6E34               	movwf	___wmul@multiplicand,c
  7704  0012CC  ECA3  F016         	call	___wmul	;wreg free
  7705  0012D0  0EFB               	movlw	low __npowers_
  7706  0012D2  2432               	addwf	?___wmul,w,c
  7707  0012D4  6EF6               	movwf	tblptrl,c
  7708  0012D6  0EFD               	movlw	high __npowers_
  7709  0012D8  2033               	addwfc	?___wmul+1,w,c
  7710  0012DA  6EF7               	movwf	tblptrh,c
  7711  0012DC                     	if	0	;There are less than 3 active tblptr bytes
  7712  0012DC                     	endif
  7713  0012DC  0009               	tblrd		*+
  7714  0012DE  CFF5 F08C          	movff	tablat,___ftmul@f1
  7715  0012E2  0009               	tblrd		*+
  7716  0012E4  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7717  0012E8  000A               	tblrd		*-
  7718  0012EA  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7719  0012EE  ECE8  F00B         	call	___ftmul	;wreg free
  7720  0012F2  C08C  F0A1         	movff	?___ftmul,_fround$1339
  7721  0012F6  C08D  F0A2         	movff	?___ftmul+1,_fround$1339+1
  7722  0012FA  C08E  F0A3         	movff	?___ftmul+2,_fround$1339+2
  7723                           
  7724                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7725  0012FE  0E00               	movlw	0
  7726  001300  6E35               	movwf	___wmul@multiplicand+1,c
  7727  001302  0E03               	movlw	3
  7728  001304  6E34               	movwf	___wmul@multiplicand,c
  7729  001306  0E00               	movlw	0
  7730  001308  6E27               	movwf	___awmod@divisor+1,c
  7731  00130A  0E0A               	movlw	10
  7732  00130C  6E26               	movwf	___awmod@divisor,c
  7733  00130E  C0A4  F024         	movff	fround@prec,___awmod@dividend
  7734  001312  6A25               	clrf	___awmod@dividend+1,c
  7735  001314  ECC4  F013         	call	___awmod	;wreg free
  7736  001318  C024  F032         	movff	?___awmod,___wmul@multiplier
  7737  00131C  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7738  001320  ECA3  F016         	call	___wmul	;wreg free
  7739  001324  0EFB               	movlw	low __npowers_
  7740  001326  2432               	addwf	?___wmul,w,c
  7741  001328  6EF6               	movwf	tblptrl,c
  7742  00132A  0EFD               	movlw	high __npowers_
  7743  00132C  2033               	addwfc	?___wmul+1,w,c
  7744  00132E  6EF7               	movwf	tblptrh,c
  7745  001330                     	if	0	;There are less than 3 active tblptr bytes
  7746  001330                     	endif
  7747  001330  0009               	tblrd		*+
  7748  001332  CFF5 F08F          	movff	tablat,___ftmul@f2
  7749  001336  0009               	tblrd		*+
  7750  001338  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7751  00133C  000A               	tblrd		*-
  7752  00133E  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7753  001342  C0A1  F08C         	movff	_fround$1339,___ftmul@f1
  7754  001346  C0A2  F08D         	movff	_fround$1339+1,___ftmul@f1+1
  7755  00134A  C0A3  F08E         	movff	_fround$1339+2,___ftmul@f1+2
  7756  00134E  ECE8  F00B         	call	___ftmul	;wreg free
  7757  001352  C08C  F09E         	movff	?___ftmul,_fround$1340
  7758  001356  C08D  F09F         	movff	?___ftmul+1,_fround$1340+1
  7759  00135A  C08E  F0A0         	movff	?___ftmul+2,_fround$1340+2
  7760                           
  7761                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  7762  00135E  C09E  F08C         	movff	_fround$1340,___ftmul@f1
  7763  001362  C09F  F08D         	movff	_fround$1340+1,___ftmul@f1+1
  7764  001366  C0A0  F08E         	movff	_fround$1340+2,___ftmul@f1+2
  7765  00136A  0E00               	movlw	0
  7766  00136C  0100               	movlb	0	; () banked
  7767  00136E  6F8F               	movwf	___ftmul@f2& (0+255),b
  7768  001370  0E00               	movlw	0
  7769  001372  0100               	movlb	0	; () banked
  7770  001374  6F90               	movwf	(___ftmul@f2+1)& (0+255),b
  7771  001376  0E3F               	movlw	63
  7772  001378  0100               	movlb	0	; () banked
  7773  00137A  6F91               	movwf	(___ftmul@f2+2)& (0+255),b
  7774  00137C  ECE8  F00B         	call	___ftmul	;wreg free
  7775  001380  C08C  F09B         	movff	?___ftmul,?_fround
  7776  001384  C08D  F09C         	movff	?___ftmul+1,?_fround+1
  7777  001388  C08E  F09D         	movff	?___ftmul+2,?_fround+2
  7778  00138C  0012               	return	
  7779  00138E                     l5297:
  7780                           
  7781                           ;doprnt.c: 415: else if(prec > 10)
  7782  00138E  0E0A               	movlw	10
  7783  001390  0100               	movlb	0	; () banked
  7784  001392  65A4               	cpfsgt	fround@prec& (0+255),b
  7785  001394  D060               	goto	l5305
  7786                           
  7787                           ; BSR set to: 0
  7788                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7789  001396  0E00               	movlw	0
  7790  001398  6E35               	movwf	___wmul@multiplicand+1,c
  7791  00139A  0E03               	movlw	3
  7792  00139C  6E34               	movwf	___wmul@multiplicand,c
  7793  00139E  0E00               	movlw	0
  7794  0013A0  6E27               	movwf	___awmod@divisor+1,c
  7795  0013A2  0E0A               	movlw	10
  7796  0013A4  6E26               	movwf	___awmod@divisor,c
  7797  0013A6  C0A4  F024         	movff	fround@prec,___awmod@dividend
  7798  0013AA  6A25               	clrf	___awmod@dividend+1,c
  7799  0013AC  ECC4  F013         	call	___awmod	;wreg free
  7800  0013B0  C024  F032         	movff	?___awmod,___wmul@multiplier
  7801  0013B4  C025  F033         	movff	?___awmod+1,___wmul@multiplier+1
  7802  0013B8  ECA3  F016         	call	___wmul	;wreg free
  7803  0013BC  0EFB               	movlw	low __npowers_
  7804  0013BE  2432               	addwf	?___wmul,w,c
  7805  0013C0  6EF6               	movwf	tblptrl,c
  7806  0013C2  0EFD               	movlw	high __npowers_
  7807  0013C4  2033               	addwfc	?___wmul+1,w,c
  7808  0013C6  6EF7               	movwf	tblptrh,c
  7809  0013C8                     	if	0	;There are less than 3 active tblptr bytes
  7810  0013C8                     	endif
  7811  0013C8  0009               	tblrd		*+
  7812  0013CA  CFF5 F08F          	movff	tablat,___ftmul@f2
  7813  0013CE  0009               	tblrd		*+
  7814  0013D0  CFF5 F090          	movff	tablat,___ftmul@f2+1
  7815  0013D4  000A               	tblrd		*-
  7816  0013D6  CFF5 F091          	movff	tablat,___ftmul@f2+2
  7817  0013DA  0E00               	movlw	0
  7818  0013DC  6E2D               	movwf	___awdiv@divisor+1,c
  7819  0013DE  0E0A               	movlw	10
  7820  0013E0  6E2C               	movwf	___awdiv@divisor,c
  7821  0013E2  C0A4  F02A         	movff	fround@prec,___awdiv@dividend
  7822  0013E6  6A2B               	clrf	___awdiv@dividend+1,c
  7823  0013E8  ECC8  F012         	call	___awdiv	;wreg free
  7824  0013EC  0E09               	movlw	9
  7825  0013EE  242A               	addwf	?___awdiv,w,c
  7826  0013F0  6E32               	movwf	___wmul@multiplier,c
  7827  0013F2  0E00               	movlw	0
  7828  0013F4  202B               	addwfc	?___awdiv+1,w,c
  7829  0013F6  6E33               	movwf	___wmul@multiplier+1,c
  7830  0013F8  0E00               	movlw	0
  7831  0013FA  6E35               	movwf	___wmul@multiplicand+1,c
  7832  0013FC  0E03               	movlw	3
  7833  0013FE  6E34               	movwf	___wmul@multiplicand,c
  7834  001400  ECA3  F016         	call	___wmul	;wreg free
  7835  001404  0EFB               	movlw	low __npowers_
  7836  001406  2432               	addwf	?___wmul,w,c
  7837  001408  6EF6               	movwf	tblptrl,c
  7838  00140A  0EFD               	movlw	high __npowers_
  7839  00140C  2033               	addwfc	?___wmul+1,w,c
  7840  00140E  6EF7               	movwf	tblptrh,c
  7841  001410                     	if	0	;There are less than 3 active tblptr bytes
  7842  001410                     	endif
  7843  001410  0009               	tblrd		*+
  7844  001412  CFF5 F08C          	movff	tablat,___ftmul@f1
  7845  001416  0009               	tblrd		*+
  7846  001418  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7847  00141C  000A               	tblrd		*-
  7848  00141E  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7849  001422  ECE8  F00B         	call	___ftmul	;wreg free
  7850  001426  C08C  F0A1         	movff	?___ftmul,_fround$1339
  7851  00142A  C08D  F0A2         	movff	?___ftmul+1,_fround$1339+1
  7852  00142E  C08E  F0A3         	movff	?___ftmul+2,_fround$1339+2
  7853                           
  7854                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  7855  001432  C0A1  F08C         	movff	_fround$1339,___ftmul@f1
  7856  001436  C0A2  F08D         	movff	_fround$1339+1,___ftmul@f1+1
  7857  00143A  C0A3  F08E         	movff	_fround$1339+2,___ftmul@f1+2
  7858  00143E  0E00               	movlw	0
  7859  001440  0100               	movlb	0	; () banked
  7860  001442  6F8F               	movwf	___ftmul@f2& (0+255),b
  7861  001444  0E00               	movlw	0
  7862  001446  0100               	movlb	0	; () banked
  7863  001448  6F90               	movwf	(___ftmul@f2+1)& (0+255),b
  7864  00144A  0E3F               	movlw	63
  7865  00144C  0100               	movlb	0	; () banked
  7866  00144E  6F91               	movwf	(___ftmul@f2+2)& (0+255),b
  7867  001450  ECE8  F00B         	call	___ftmul	;wreg free
  7868  001454  D795               	goto	L4
  7869  001456                     l5305:
  7870                           
  7871                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  7872  001456  0100               	movlb	0	; () banked
  7873  001458  51A4               	movf	fround@prec& (0+255),w,b
  7874  00145A  0D03               	mullw	3
  7875  00145C  0EFB               	movlw	low __npowers_
  7876  00145E  24F3               	addwf	prodl,w,c
  7877  001460  6EF6               	movwf	tblptrl,c
  7878  001462  0EFD               	movlw	high __npowers_
  7879  001464  20F4               	addwfc	prodh,w,c
  7880  001466  6EF7               	movwf	tblptrh,c
  7881  001468                     	if	0	;There are less than 3 active tblptr bytes
  7882  001468                     	endif
  7883  001468  0009               	tblrd		*+
  7884  00146A  CFF5 F08C          	movff	tablat,___ftmul@f1
  7885  00146E  0009               	tblrd		*+
  7886  001470  CFF5 F08D          	movff	tablat,___ftmul@f1+1
  7887  001474  000A               	tblrd		*-
  7888  001476  CFF5 F08E          	movff	tablat,___ftmul@f1+2
  7889  00147A  0E00               	movlw	0
  7890  00147C  0100               	movlb	0	; () banked
  7891  00147E  6F8F               	movwf	___ftmul@f2& (0+255),b
  7892  001480  0E00               	movlw	0
  7893  001482  0100               	movlb	0	; () banked
  7894  001484  6F90               	movwf	(___ftmul@f2+1)& (0+255),b
  7895  001486  0E3F               	movlw	63
  7896  001488  0100               	movlb	0	; () banked
  7897  00148A  6F91               	movwf	(___ftmul@f2+2)& (0+255),b
  7898  00148C  ECE8  F00B         	call	___ftmul	;wreg free
  7899  001490  C08C  F09B         	movff	?___ftmul,?_fround
  7900  001494  C08D  F09C         	movff	?___ftmul+1,?_fround+1
  7901  001498  C08E  F09D         	movff	?___ftmul+2,?_fround+2
  7902  00149C  0012               	return	
  7903  00149E                     __end_of_fround:
  7904                           	opt stack 0
  7905                           tblptru	equ	0xFF8
  7906                           tblptrh	equ	0xFF7
  7907                           tblptrl	equ	0xFF6
  7908                           tablat	equ	0xFF5
  7909                           prodh	equ	0xFF4
  7910                           prodl	equ	0xFF3
  7911                           intcon	equ	0xFF2
  7912                           postinc0	equ	0xFEE
  7913                           wreg	equ	0xFE8
  7914                           postdec1	equ	0xFE5
  7915                           plusw1	equ	0xFE3
  7916                           fsr1l	equ	0xFE1
  7917                           indf2	equ	0xFDF
  7918                           postinc2	equ	0xFDE
  7919                           postdec2	equ	0xFDD
  7920                           plusw2	equ	0xFDB
  7921                           fsr2h	equ	0xFDA
  7922                           fsr2l	equ	0xFD9
  7923                           status	equ	0xFD8
  7924                           
  7925 ;; *************** function ___wmul *****************
  7926 ;; Defined at:
  7927 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\Umul16.c"
  7928 ;; Parameters:    Size  Location     Type
  7929 ;;  multiplier      2   49[COMRAM] unsigned int 
  7930 ;;  multiplicand    2   51[COMRAM] unsigned int 
  7931 ;; Auto vars:     Size  Location     Type
  7932 ;;  product         2   53[COMRAM] unsigned int 
  7933 ;; Return value:  Size  Location     Type
  7934 ;;                  2   49[COMRAM] unsigned int 
  7935 ;; Registers used:
  7936 ;;		wreg, status,2, status,0, prodl, prodh
  7937 ;; Tracked objects:
  7938 ;;		On entry : 0/0
  7939 ;;		On exit  : 0/0
  7940 ;;		Unchanged: 0/0
  7941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  7942 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7943 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7944 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7945 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  7946 ;;Total ram usage:        6 bytes
  7947 ;; Hardware stack levels used:    1
  7948 ;; Hardware stack levels required when called:    3
  7949 ;; This function calls:
  7950 ;;		Nothing
  7951 ;; This function is called by:
  7952 ;;		_fround
  7953 ;;		_scale
  7954 ;;		_printf
  7955 ;; This function uses a non-reentrant model
  7956 ;;
  7957                           
  7958                           	psect	text35
  7959  002D46                     __ptext35:
  7960                           	opt stack 0
  7961  002D46                     ___wmul:
  7962                           	opt stack 24
  7963                           
  7964                           ;incstack = 0
  7965  002D46  5032               	movf	___wmul@multiplier,w,c
  7966  002D48  0234               	mulwf	___wmul@multiplicand,c
  7967  002D4A  CFF3 F036          	movff	prodl,___wmul@product
  7968  002D4E  CFF4 F037          	movff	prodh,___wmul@product+1
  7969  002D52  5032               	movf	___wmul@multiplier,w,c
  7970  002D54  0235               	mulwf	___wmul@multiplicand+1,c
  7971  002D56  50F3               	movf	prodl,w,c
  7972  002D58  2637               	addwf	___wmul@product+1,f,c
  7973  002D5A  5033               	movf	___wmul@multiplier+1,w,c
  7974  002D5C  0234               	mulwf	___wmul@multiplicand,c
  7975  002D5E  50F3               	movf	prodl,w,c
  7976  002D60  2637               	addwf	___wmul@product+1,f,c
  7977  002D62  C036  F032         	movff	___wmul@product,?___wmul
  7978  002D66  C037  F033         	movff	___wmul@product+1,?___wmul+1
  7979  002D6A  0012               	return	
  7980  002D6C                     __end_of___wmul:
  7981                           	opt stack 0
  7982                           tblptru	equ	0xFF8
  7983                           tblptrh	equ	0xFF7
  7984                           tblptrl	equ	0xFF6
  7985                           tablat	equ	0xFF5
  7986                           prodh	equ	0xFF4
  7987                           prodl	equ	0xFF3
  7988                           intcon	equ	0xFF2
  7989                           postinc0	equ	0xFEE
  7990                           wreg	equ	0xFE8
  7991                           postdec1	equ	0xFE5
  7992                           plusw1	equ	0xFE3
  7993                           fsr1l	equ	0xFE1
  7994                           indf2	equ	0xFDF
  7995                           postinc2	equ	0xFDE
  7996                           postdec2	equ	0xFDD
  7997                           plusw2	equ	0xFDB
  7998                           fsr2h	equ	0xFDA
  7999                           fsr2l	equ	0xFD9
  8000                           status	equ	0xFD8
  8001                           
  8002 ;; *************** function ___ftmul *****************
  8003 ;; Defined at:
  8004 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftmul.c"
  8005 ;; Parameters:    Size  Location     Type
  8006 ;;  f1              3   12[BANK0 ] float 
  8007 ;;  f2              3   15[BANK0 ] float 
  8008 ;; Auto vars:     Size  Location     Type
  8009 ;;  f3_as_produc    3   22[BANK0 ] unsigned um
  8010 ;;  sign            1   26[BANK0 ] unsigned char 
  8011 ;;  cntr            1   25[BANK0 ] unsigned char 
  8012 ;;  exp             1   21[BANK0 ] unsigned char 
  8013 ;; Return value:  Size  Location     Type
  8014 ;;                  3   12[BANK0 ] float 
  8015 ;; Registers used:
  8016 ;;		wreg, status,2, status,0, cstack
  8017 ;; Tracked objects:
  8018 ;;		On entry : 0/0
  8019 ;;		On exit  : 0/0
  8020 ;;		Unchanged: 0/0
  8021 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8022 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8023 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8024 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8025 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8026 ;;Total ram usage:       15 bytes
  8027 ;; Hardware stack levels used:    1
  8028 ;; Hardware stack levels required when called:    4
  8029 ;; This function calls:
  8030 ;;		___ftpack
  8031 ;; This function is called by:
  8032 ;;		_sortBattery
  8033 ;;		_angleToPulse
  8034 ;;		_fround
  8035 ;;		_scale
  8036 ;;		_printf
  8037 ;; This function uses a non-reentrant model
  8038 ;;
  8039                           
  8040                           	psect	text36
  8041  0017D0                     __ptext36:
  8042                           	opt stack 0
  8043  0017D0                     ___ftmul:
  8044                           	opt stack 23
  8045                           
  8046                           ;incstack = 0
  8047  0017D0  C08E  F092         	movff	___ftmul@f1+2,??___ftmul
  8048  0017D4  0100               	movlb	0	; () banked
  8049  0017D6  6B93               	clrf	(??___ftmul+1)& (0+255),b
  8050  0017D8  6B94               	clrf	(??___ftmul+2)& (0+255),b
  8051  0017DA  0100               	movlb	0	; () banked
  8052  0017DC  358D               	rlcf	(___ftmul@f1+1)& (0+255),w,b
  8053  0017DE  0100               	movlb	0	; () banked
  8054  0017E0  3792               	rlcf	??___ftmul& (0+255),f,b
  8055  0017E2  E301               	bnc	u4601
  8056  0017E4  8193               	bsf	(??___ftmul+1)& (0+255),0,b
  8057  0017E6                     u4601:
  8058  0017E6  0100               	movlb	0	; () banked
  8059  0017E8  5192               	movf	??___ftmul& (0+255),w,b
  8060  0017EA  0100               	movlb	0	; () banked
  8061  0017EC  6F95               	movwf	___ftmul@exp& (0+255),b
  8062  0017EE  0100               	movlb	0	; () banked
  8063  0017F0  5195               	movf	___ftmul@exp& (0+255),w,b
  8064  0017F2  A4D8               	btfss	status,2,c
  8065  0017F4  D00A               	goto	l5091
  8066                           
  8067                           ; BSR set to: 0
  8068  0017F6  0E00               	movlw	0
  8069  0017F8  0100               	movlb	0	; () banked
  8070  0017FA  6F8C               	movwf	?___ftmul& (0+255),b
  8071  0017FC  0E00               	movlw	0
  8072  0017FE  0100               	movlb	0	; () banked
  8073  001800  6F8D               	movwf	(?___ftmul+1)& (0+255),b
  8074  001802  0E00               	movlw	0
  8075  001804  0100               	movlb	0	; () banked
  8076  001806  6F8E               	movwf	(?___ftmul+2)& (0+255),b
  8077                           
  8078                           ; BSR set to: 0
  8079  001808  0012               	return	
  8080  00180A                     l5091:
  8081                           
  8082                           ; BSR set to: 0
  8083  00180A  C091  F092         	movff	___ftmul@f2+2,??___ftmul
  8084  00180E  0100               	movlb	0	; () banked
  8085  001810  6B93               	clrf	(??___ftmul+1)& (0+255),b
  8086  001812  6B94               	clrf	(??___ftmul+2)& (0+255),b
  8087  001814  0100               	movlb	0	; () banked
  8088  001816  3590               	rlcf	(___ftmul@f2+1)& (0+255),w,b
  8089  001818  0100               	movlb	0	; () banked
  8090  00181A  3792               	rlcf	??___ftmul& (0+255),f,b
  8091  00181C  E301               	bnc	u4621
  8092  00181E  8193               	bsf	(??___ftmul+1)& (0+255),0,b
  8093  001820                     u4621:
  8094  001820  0100               	movlb	0	; () banked
  8095  001822  5192               	movf	??___ftmul& (0+255),w,b
  8096  001824  0100               	movlb	0	; () banked
  8097  001826  6F9A               	movwf	___ftmul@sign& (0+255),b
  8098  001828  0100               	movlb	0	; () banked
  8099  00182A  519A               	movf	___ftmul@sign& (0+255),w,b
  8100  00182C  A4D8               	btfss	status,2,c
  8101  00182E  D00A               	goto	l5097
  8102                           
  8103                           ; BSR set to: 0
  8104  001830  0E00               	movlw	0
  8105  001832  0100               	movlb	0	; () banked
  8106  001834  6F8C               	movwf	?___ftmul& (0+255),b
  8107  001836  0E00               	movlw	0
  8108  001838  0100               	movlb	0	; () banked
  8109  00183A  6F8D               	movwf	(?___ftmul+1)& (0+255),b
  8110  00183C  0E00               	movlw	0
  8111  00183E  0100               	movlb	0	; () banked
  8112  001840  6F8E               	movwf	(?___ftmul+2)& (0+255),b
  8113                           
  8114                           ; BSR set to: 0
  8115  001842  0012               	return	
  8116  001844                     l5097:
  8117                           
  8118                           ; BSR set to: 0
  8119  001844  0100               	movlb	0	; () banked
  8120  001846  519A               	movf	___ftmul@sign& (0+255),w,b
  8121  001848  0F7B               	addlw	123
  8122  00184A  0100               	movlb	0	; () banked
  8123  00184C  2795               	addwf	___ftmul@exp& (0+255),f,b
  8124                           
  8125                           ; BSR set to: 0
  8126  00184E  C08E  F09A         	movff	___ftmul@f1+2,___ftmul@sign
  8127  001852  0100               	movlb	0	; () banked
  8128  001854  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  8129  001856  0100               	movlb	0	; () banked
  8130  001858  1B9A               	xorwf	___ftmul@sign& (0+255),f,b
  8131  00185A  0E80               	movlw	128
  8132  00185C  0100               	movlb	0	; () banked
  8133  00185E  179A               	andwf	___ftmul@sign& (0+255),f,b
  8134                           
  8135                           ; BSR set to: 0
  8136  001860  0100               	movlb	0	; () banked
  8137  001862  8F8D               	bsf	(___ftmul@f1+1)& (0+255),7,b
  8138                           
  8139                           ; BSR set to: 0
  8140  001864  0100               	movlb	0	; () banked
  8141  001866  8F90               	bsf	(___ftmul@f2+1)& (0+255),7,b
  8142                           
  8143                           ; BSR set to: 0
  8144  001868  0EFF               	movlw	255
  8145  00186A  0100               	movlb	0	; () banked
  8146  00186C  178F               	andwf	___ftmul@f2& (0+255),f,b
  8147  00186E  0EFF               	movlw	255
  8148  001870  0100               	movlb	0	; () banked
  8149  001872  1790               	andwf	(___ftmul@f2+1)& (0+255),f,b
  8150  001874  0E00               	movlw	0
  8151  001876  0100               	movlb	0	; () banked
  8152  001878  1791               	andwf	(___ftmul@f2+2)& (0+255),f,b
  8153                           
  8154                           ; BSR set to: 0
  8155  00187A  0E00               	movlw	0
  8156  00187C  0100               	movlb	0	; () banked
  8157  00187E  6F96               	movwf	___ftmul@f3_as_product& (0+255),b
  8158  001880  0E00               	movlw	0
  8159  001882  0100               	movlb	0	; () banked
  8160  001884  6F97               	movwf	(___ftmul@f3_as_product+1)& (0+255),b
  8161  001886  0E00               	movlw	0
  8162  001888  0100               	movlb	0	; () banked
  8163  00188A  6F98               	movwf	(___ftmul@f3_as_product+2)& (0+255),b
  8164                           
  8165                           ; BSR set to: 0
  8166  00188C  0E07               	movlw	7
  8167  00188E  0100               	movlb	0	; () banked
  8168  001890  6F99               	movwf	___ftmul@cntr& (0+255),b
  8169  001892                     l5111:
  8170                           
  8171                           ; BSR set to: 0
  8172  001892  0100               	movlb	0	; () banked
  8173  001894  A18C               	btfss	___ftmul@f1& (0+255),0,b
  8174  001896  D00C               	goto	l5115
  8175                           
  8176                           ; BSR set to: 0
  8177  001898  0100               	movlb	0	; () banked
  8178  00189A  518F               	movf	___ftmul@f2& (0+255),w,b
  8179  00189C  0100               	movlb	0	; () banked
  8180  00189E  2796               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8181  0018A0  0100               	movlb	0	; () banked
  8182  0018A2  5190               	movf	(___ftmul@f2+1)& (0+255),w,b
  8183  0018A4  0100               	movlb	0	; () banked
  8184  0018A6  2397               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8185  0018A8  0100               	movlb	0	; () banked
  8186  0018AA  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  8187  0018AC  0100               	movlb	0	; () banked
  8188  0018AE  2398               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8189  0018B0                     l5115:
  8190                           
  8191                           ; BSR set to: 0
  8192  0018B0  0100               	movlb	0	; () banked
  8193  0018B2  90D8               	bcf	status,0,c
  8194  0018B4  338E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8195  0018B6  338D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8196  0018B8  338C               	rrcf	___ftmul@f1& (0+255),f,b
  8197  0018BA  0100               	movlb	0	; () banked
  8198  0018BC  90D8               	bcf	status,0,c
  8199  0018BE  378F               	rlcf	___ftmul@f2& (0+255),f,b
  8200  0018C0  3790               	rlcf	(___ftmul@f2+1)& (0+255),f,b
  8201  0018C2  3791               	rlcf	(___ftmul@f2+2)& (0+255),f,b
  8202                           
  8203                           ; BSR set to: 0
  8204  0018C4  0100               	movlb	0	; () banked
  8205  0018C6  2F99               	decfsz	___ftmul@cntr& (0+255),f,b
  8206  0018C8  D7E4               	goto	l5111
  8207                           
  8208                           ; BSR set to: 0
  8209                           
  8210                           ; BSR set to: 0
  8211  0018CA  0E09               	movlw	9
  8212  0018CC  0100               	movlb	0	; () banked
  8213  0018CE  6F99               	movwf	___ftmul@cntr& (0+255),b
  8214  0018D0                     l5121:
  8215                           
  8216                           ; BSR set to: 0
  8217  0018D0  0100               	movlb	0	; () banked
  8218  0018D2  A18C               	btfss	___ftmul@f1& (0+255),0,b
  8219  0018D4  D00C               	goto	l5125
  8220                           
  8221                           ; BSR set to: 0
  8222  0018D6  0100               	movlb	0	; () banked
  8223  0018D8  518F               	movf	___ftmul@f2& (0+255),w,b
  8224  0018DA  0100               	movlb	0	; () banked
  8225  0018DC  2796               	addwf	___ftmul@f3_as_product& (0+255),f,b
  8226  0018DE  0100               	movlb	0	; () banked
  8227  0018E0  5190               	movf	(___ftmul@f2+1)& (0+255),w,b
  8228  0018E2  0100               	movlb	0	; () banked
  8229  0018E4  2397               	addwfc	(___ftmul@f3_as_product+1)& (0+255),f,b
  8230  0018E6  0100               	movlb	0	; () banked
  8231  0018E8  5191               	movf	(___ftmul@f2+2)& (0+255),w,b
  8232  0018EA  0100               	movlb	0	; () banked
  8233  0018EC  2398               	addwfc	(___ftmul@f3_as_product+2)& (0+255),f,b
  8234  0018EE                     l5125:
  8235                           
  8236                           ; BSR set to: 0
  8237  0018EE  0100               	movlb	0	; () banked
  8238  0018F0  90D8               	bcf	status,0,c
  8239  0018F2  338E               	rrcf	(___ftmul@f1+2)& (0+255),f,b
  8240  0018F4  338D               	rrcf	(___ftmul@f1+1)& (0+255),f,b
  8241  0018F6  338C               	rrcf	___ftmul@f1& (0+255),f,b
  8242  0018F8  0100               	movlb	0	; () banked
  8243  0018FA  90D8               	bcf	status,0,c
  8244  0018FC  3398               	rrcf	(___ftmul@f3_as_product+2)& (0+255),f,b
  8245  0018FE  3397               	rrcf	(___ftmul@f3_as_product+1)& (0+255),f,b
  8246  001900  3396               	rrcf	___ftmul@f3_as_product& (0+255),f,b
  8247                           
  8248                           ; BSR set to: 0
  8249  001902  0100               	movlb	0	; () banked
  8250  001904  2F99               	decfsz	___ftmul@cntr& (0+255),f,b
  8251  001906  D7E4               	goto	l5121
  8252                           
  8253                           ; BSR set to: 0
  8254                           
  8255                           ; BSR set to: 0
  8256  001908  C096  F024         	movff	___ftmul@f3_as_product,___ftpack@arg
  8257  00190C  C097  F025         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  8258  001910  C098  F026         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  8259  001914  C095  F027         	movff	___ftmul@exp,___ftpack@exp
  8260  001918  C09A  F028         	movff	___ftmul@sign,___ftpack@sign
  8261  00191C  ECA3  F010         	call	___ftpack	;wreg free
  8262  001920  C024  F08C         	movff	?___ftpack,?___ftmul
  8263  001924  C025  F08D         	movff	?___ftpack+1,?___ftmul+1
  8264  001928  C026  F08E         	movff	?___ftpack+2,?___ftmul+2
  8265  00192C  0012               	return	
  8266  00192E                     __end_of___ftmul:
  8267                           	opt stack 0
  8268                           tblptru	equ	0xFF8
  8269                           tblptrh	equ	0xFF7
  8270                           tblptrl	equ	0xFF6
  8271                           tablat	equ	0xFF5
  8272                           prodh	equ	0xFF4
  8273                           prodl	equ	0xFF3
  8274                           intcon	equ	0xFF2
  8275                           postinc0	equ	0xFEE
  8276                           wreg	equ	0xFE8
  8277                           postdec1	equ	0xFE5
  8278                           plusw1	equ	0xFE3
  8279                           fsr1l	equ	0xFE1
  8280                           indf2	equ	0xFDF
  8281                           postinc2	equ	0xFDE
  8282                           postdec2	equ	0xFDD
  8283                           plusw2	equ	0xFDB
  8284                           fsr2h	equ	0xFDA
  8285                           fsr2l	equ	0xFD9
  8286                           status	equ	0xFD8
  8287                           
  8288 ;; *************** function ___awmod *****************
  8289 ;; Defined at:
  8290 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awmod.c"
  8291 ;; Parameters:    Size  Location     Type
  8292 ;;  dividend        2   35[COMRAM] int 
  8293 ;;  divisor         2   37[COMRAM] int 
  8294 ;; Auto vars:     Size  Location     Type
  8295 ;;  sign            1   40[COMRAM] unsigned char 
  8296 ;;  counter         1   39[COMRAM] unsigned char 
  8297 ;; Return value:  Size  Location     Type
  8298 ;;                  2   35[COMRAM] int 
  8299 ;; Registers used:
  8300 ;;		wreg, status,2, status,0
  8301 ;; Tracked objects:
  8302 ;;		On entry : 0/0
  8303 ;;		On exit  : 0/0
  8304 ;;		Unchanged: 0/0
  8305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8306 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8307 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8308 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8309 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8310 ;;Total ram usage:        6 bytes
  8311 ;; Hardware stack levels used:    1
  8312 ;; Hardware stack levels required when called:    3
  8313 ;; This function calls:
  8314 ;;		Nothing
  8315 ;; This function is called by:
  8316 ;;		_fround
  8317 ;;		_scale
  8318 ;; This function uses a non-reentrant model
  8319 ;;
  8320                           
  8321                           	psect	text37
  8322  002788                     __ptext37:
  8323                           	opt stack 0
  8324  002788                     ___awmod:
  8325                           	opt stack 24
  8326                           
  8327                           ;incstack = 0
  8328  002788  0E00               	movlw	0
  8329  00278A  6E29               	movwf	___awmod@sign,c
  8330  00278C  AE25               	btfss	___awmod@dividend+1,7,c
  8331  00278E  D006               	goto	l5185
  8332  002790  6C24               	negf	___awmod@dividend,c
  8333  002792  1E25               	comf	___awmod@dividend+1,f,c
  8334  002794  B0D8               	btfsc	status,0,c
  8335  002796  2A25               	incf	___awmod@dividend+1,f,c
  8336  002798  0E01               	movlw	1
  8337  00279A  6E29               	movwf	___awmod@sign,c
  8338  00279C                     l5185:
  8339  00279C  AE27               	btfss	___awmod@divisor+1,7,c
  8340  00279E  D004               	goto	l5189
  8341  0027A0  6C26               	negf	___awmod@divisor,c
  8342  0027A2  1E27               	comf	___awmod@divisor+1,f,c
  8343  0027A4  B0D8               	btfsc	status,0,c
  8344  0027A6  2A27               	incf	___awmod@divisor+1,f,c
  8345  0027A8                     l5189:
  8346  0027A8  5026               	movf	___awmod@divisor,w,c
  8347  0027AA  1027               	iorwf	___awmod@divisor+1,w,c
  8348  0027AC  B4D8               	btfsc	status,2,c
  8349  0027AE  D018               	goto	l5205
  8350  0027B0  0E01               	movlw	1
  8351  0027B2  6E28               	movwf	___awmod@counter,c
  8352  0027B4  D004               	goto	l5195
  8353  0027B6                     l5193:
  8354  0027B6  90D8               	bcf	status,0,c
  8355  0027B8  3626               	rlcf	___awmod@divisor,f,c
  8356  0027BA  3627               	rlcf	___awmod@divisor+1,f,c
  8357  0027BC  2A28               	incf	___awmod@counter,f,c
  8358  0027BE                     l5195:
  8359  0027BE  AE27               	btfss	___awmod@divisor+1,7,c
  8360  0027C0  D7FA               	goto	l5193
  8361  0027C2                     l5197:
  8362  0027C2  5026               	movf	___awmod@divisor,w,c
  8363  0027C4  5C24               	subwf	___awmod@dividend,w,c
  8364  0027C6  5027               	movf	___awmod@divisor+1,w,c
  8365  0027C8  5825               	subwfb	___awmod@dividend+1,w,c
  8366  0027CA  A0D8               	btfss	status,0,c
  8367  0027CC  D004               	goto	l5201
  8368  0027CE  5026               	movf	___awmod@divisor,w,c
  8369  0027D0  5E24               	subwf	___awmod@dividend,f,c
  8370  0027D2  5027               	movf	___awmod@divisor+1,w,c
  8371  0027D4  5A25               	subwfb	___awmod@dividend+1,f,c
  8372  0027D6                     l5201:
  8373  0027D6  90D8               	bcf	status,0,c
  8374  0027D8  3227               	rrcf	___awmod@divisor+1,f,c
  8375  0027DA  3226               	rrcf	___awmod@divisor,f,c
  8376  0027DC  2E28               	decfsz	___awmod@counter,f,c
  8377  0027DE  D7F1               	goto	l5197
  8378  0027E0                     l5205:
  8379  0027E0  5029               	movf	___awmod@sign,w,c
  8380  0027E2  B4D8               	btfsc	status,2,c
  8381  0027E4  D004               	goto	l5209
  8382  0027E6  6C24               	negf	___awmod@dividend,c
  8383  0027E8  1E25               	comf	___awmod@dividend+1,f,c
  8384  0027EA  B0D8               	btfsc	status,0,c
  8385  0027EC  2A25               	incf	___awmod@dividend+1,f,c
  8386  0027EE                     l5209:
  8387  0027EE  C024  F024         	movff	___awmod@dividend,?___awmod
  8388  0027F2  C025  F025         	movff	___awmod@dividend+1,?___awmod+1
  8389  0027F6  0012               	return	
  8390  0027F8                     __end_of___awmod:
  8391                           	opt stack 0
  8392                           tblptru	equ	0xFF8
  8393                           tblptrh	equ	0xFF7
  8394                           tblptrl	equ	0xFF6
  8395                           tablat	equ	0xFF5
  8396                           prodh	equ	0xFF4
  8397                           prodl	equ	0xFF3
  8398                           intcon	equ	0xFF2
  8399                           postinc0	equ	0xFEE
  8400                           wreg	equ	0xFE8
  8401                           postdec1	equ	0xFE5
  8402                           plusw1	equ	0xFE3
  8403                           fsr1l	equ	0xFE1
  8404                           indf2	equ	0xFDF
  8405                           postinc2	equ	0xFDE
  8406                           postdec2	equ	0xFDD
  8407                           plusw2	equ	0xFDB
  8408                           fsr2h	equ	0xFDA
  8409                           fsr2l	equ	0xFD9
  8410                           status	equ	0xFD8
  8411                           
  8412 ;; *************** function ___awdiv *****************
  8413 ;; Defined at:
  8414 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\awdiv.c"
  8415 ;; Parameters:    Size  Location     Type
  8416 ;;  dividend        2   41[COMRAM] int 
  8417 ;;  divisor         2   43[COMRAM] int 
  8418 ;; Auto vars:     Size  Location     Type
  8419 ;;  quotient        2   47[COMRAM] int 
  8420 ;;  sign            1   46[COMRAM] unsigned char 
  8421 ;;  counter         1   45[COMRAM] unsigned char 
  8422 ;; Return value:  Size  Location     Type
  8423 ;;                  2   41[COMRAM] int 
  8424 ;; Registers used:
  8425 ;;		wreg, status,2, status,0
  8426 ;; Tracked objects:
  8427 ;;		On entry : 0/0
  8428 ;;		On exit  : 0/0
  8429 ;;		Unchanged: 0/0
  8430 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8431 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8432 ;;      Locals:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8433 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8434 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8435 ;;Total ram usage:        8 bytes
  8436 ;; Hardware stack levels used:    1
  8437 ;; Hardware stack levels required when called:    3
  8438 ;; This function calls:
  8439 ;;		Nothing
  8440 ;; This function is called by:
  8441 ;;		_fround
  8442 ;;		_scale
  8443 ;;		_printf
  8444 ;; This function uses a non-reentrant model
  8445 ;;
  8446                           
  8447                           	psect	text38
  8448  002590                     __ptext38:
  8449                           	opt stack 0
  8450  002590                     ___awdiv:
  8451                           	opt stack 24
  8452                           
  8453                           ;incstack = 0
  8454  002590  0E00               	movlw	0
  8455  002592  6E2F               	movwf	___awdiv@sign,c
  8456  002594  AE2D               	btfss	___awdiv@divisor+1,7,c
  8457  002596  D006               	goto	l5141
  8458  002598  6C2C               	negf	___awdiv@divisor,c
  8459  00259A  1E2D               	comf	___awdiv@divisor+1,f,c
  8460  00259C  B0D8               	btfsc	status,0,c
  8461  00259E  2A2D               	incf	___awdiv@divisor+1,f,c
  8462  0025A0  0E01               	movlw	1
  8463  0025A2  6E2F               	movwf	___awdiv@sign,c
  8464  0025A4                     l5141:
  8465  0025A4  AE2B               	btfss	___awdiv@dividend+1,7,c
  8466  0025A6  D006               	goto	l5147
  8467  0025A8  6C2A               	negf	___awdiv@dividend,c
  8468  0025AA  1E2B               	comf	___awdiv@dividend+1,f,c
  8469  0025AC  B0D8               	btfsc	status,0,c
  8470  0025AE  2A2B               	incf	___awdiv@dividend+1,f,c
  8471  0025B0  0E01               	movlw	1
  8472  0025B2  1A2F               	xorwf	___awdiv@sign,f,c
  8473  0025B4                     l5147:
  8474  0025B4  0E00               	movlw	0
  8475  0025B6  6E31               	movwf	___awdiv@quotient+1,c
  8476  0025B8  0E00               	movlw	0
  8477  0025BA  6E30               	movwf	___awdiv@quotient,c
  8478  0025BC  502C               	movf	___awdiv@divisor,w,c
  8479  0025BE  102D               	iorwf	___awdiv@divisor+1,w,c
  8480  0025C0  B4D8               	btfsc	status,2,c
  8481  0025C2  D01C               	goto	l5169
  8482  0025C4  0E01               	movlw	1
  8483  0025C6  6E2E               	movwf	___awdiv@counter,c
  8484  0025C8  D004               	goto	l5155
  8485  0025CA                     l5153:
  8486  0025CA  90D8               	bcf	status,0,c
  8487  0025CC  362C               	rlcf	___awdiv@divisor,f,c
  8488  0025CE  362D               	rlcf	___awdiv@divisor+1,f,c
  8489  0025D0  2A2E               	incf	___awdiv@counter,f,c
  8490  0025D2                     l5155:
  8491  0025D2  AE2D               	btfss	___awdiv@divisor+1,7,c
  8492  0025D4  D7FA               	goto	l5153
  8493  0025D6                     l5157:
  8494  0025D6  90D8               	bcf	status,0,c
  8495  0025D8  3630               	rlcf	___awdiv@quotient,f,c
  8496  0025DA  3631               	rlcf	___awdiv@quotient+1,f,c
  8497  0025DC  502C               	movf	___awdiv@divisor,w,c
  8498  0025DE  5C2A               	subwf	___awdiv@dividend,w,c
  8499  0025E0  502D               	movf	___awdiv@divisor+1,w,c
  8500  0025E2  582B               	subwfb	___awdiv@dividend+1,w,c
  8501  0025E4  A0D8               	btfss	status,0,c
  8502  0025E6  D005               	goto	l5165
  8503  0025E8  502C               	movf	___awdiv@divisor,w,c
  8504  0025EA  5E2A               	subwf	___awdiv@dividend,f,c
  8505  0025EC  502D               	movf	___awdiv@divisor+1,w,c
  8506  0025EE  5A2B               	subwfb	___awdiv@dividend+1,f,c
  8507  0025F0  8030               	bsf	___awdiv@quotient,0,c
  8508  0025F2                     l5165:
  8509  0025F2  90D8               	bcf	status,0,c
  8510  0025F4  322D               	rrcf	___awdiv@divisor+1,f,c
  8511  0025F6  322C               	rrcf	___awdiv@divisor,f,c
  8512  0025F8  2E2E               	decfsz	___awdiv@counter,f,c
  8513  0025FA  D7ED               	goto	l5157
  8514  0025FC                     l5169:
  8515  0025FC  502F               	movf	___awdiv@sign,w,c
  8516  0025FE  B4D8               	btfsc	status,2,c
  8517  002600  D004               	goto	l5173
  8518  002602  6C30               	negf	___awdiv@quotient,c
  8519  002604  1E31               	comf	___awdiv@quotient+1,f,c
  8520  002606  B0D8               	btfsc	status,0,c
  8521  002608  2A31               	incf	___awdiv@quotient+1,f,c
  8522  00260A                     l5173:
  8523  00260A  C030  F02A         	movff	___awdiv@quotient,?___awdiv
  8524  00260E  C031  F02B         	movff	___awdiv@quotient+1,?___awdiv+1
  8525  002612  0012               	return	
  8526  002614                     __end_of___awdiv:
  8527                           	opt stack 0
  8528                           tblptru	equ	0xFF8
  8529                           tblptrh	equ	0xFF7
  8530                           tblptrl	equ	0xFF6
  8531                           tablat	equ	0xFF5
  8532                           prodh	equ	0xFF4
  8533                           prodl	equ	0xFF3
  8534                           intcon	equ	0xFF2
  8535                           postinc0	equ	0xFEE
  8536                           wreg	equ	0xFE8
  8537                           postdec1	equ	0xFE5
  8538                           plusw1	equ	0xFE3
  8539                           fsr1l	equ	0xFE1
  8540                           indf2	equ	0xFDF
  8541                           postinc2	equ	0xFDE
  8542                           postdec2	equ	0xFDD
  8543                           plusw2	equ	0xFDB
  8544                           fsr2h	equ	0xFDA
  8545                           fsr2l	equ	0xFD9
  8546                           status	equ	0xFD8
  8547                           
  8548 ;; *************** function __tdiv_to_l_ *****************
  8549 ;; Defined at:
  8550 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftdivl.c"
  8551 ;; Parameters:    Size  Location     Type
  8552 ;;  f1              3   35[COMRAM] float 
  8553 ;;  f2              3   38[COMRAM] float 
  8554 ;; Auto vars:     Size  Location     Type
  8555 ;;  quot            4   44[COMRAM] unsigned long 
  8556 ;;  exp1            1   49[COMRAM] unsigned char 
  8557 ;;  cntr            1   48[COMRAM] unsigned char 
  8558 ;; Return value:  Size  Location     Type
  8559 ;;                  4   35[COMRAM] unsigned long 
  8560 ;; Registers used:
  8561 ;;		wreg, status,2, status,0
  8562 ;; Tracked objects:
  8563 ;;		On entry : 0/0
  8564 ;;		On exit  : 0/0
  8565 ;;		Unchanged: 0/0
  8566 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8567 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8568 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8569 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8570 ;;      Totals:        15       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8571 ;;Total ram usage:       15 bytes
  8572 ;; Hardware stack levels used:    1
  8573 ;; Hardware stack levels required when called:    3
  8574 ;; This function calls:
  8575 ;;		Nothing
  8576 ;; This function is called by:
  8577 ;;		_printf
  8578 ;; This function uses a non-reentrant model
  8579 ;;
  8580                           
  8581                           	psect	text39
  8582  001BB2                     __ptext39:
  8583                           	opt stack 0
  8584  001BB2                     __tdiv_to_l_:
  8585                           	opt stack 25
  8586                           
  8587                           ;incstack = 0
  8588  001BB2  C026  F02A         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  8589  001BB6  6A2B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8590  001BB8  6A2C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8591  001BBA  3425               	rlcf	__tdiv_to_l_@f1+1,w,c
  8592  001BBC  362A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8593  001BBE  E301               	bnc	u4951
  8594  001BC0  802B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8595  001BC2                     u4951:
  8596  001BC2  502A               	movf	??__tdiv_to_l_,w,c
  8597  001BC4  6E32               	movwf	__tdiv_to_l_@exp1,c
  8598  001BC6  5032               	movf	__tdiv_to_l_@exp1,w,c
  8599  001BC8  A4D8               	btfss	status,2,c
  8600  001BCA  D009               	goto	l5353
  8601  001BCC  0E00               	movlw	0
  8602  001BCE  6E24               	movwf	?__tdiv_to_l_,c
  8603  001BD0  0E00               	movlw	0
  8604  001BD2  6E25               	movwf	?__tdiv_to_l_+1,c
  8605  001BD4  0E00               	movlw	0
  8606  001BD6  6E26               	movwf	?__tdiv_to_l_+2,c
  8607  001BD8  0E00               	movlw	0
  8608  001BDA  6E27               	movwf	?__tdiv_to_l_+3,c
  8609  001BDC  0012               	return	
  8610  001BDE                     l5353:
  8611  001BDE  C029  F02A         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  8612  001BE2  6A2B               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  8613  001BE4  6A2C               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  8614  001BE6  3428               	rlcf	__tdiv_to_l_@f2+1,w,c
  8615  001BE8  362A               	rlcf	??__tdiv_to_l_& (0+255),f,c
  8616  001BEA  E301               	bnc	u4971
  8617  001BEC  802B               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  8618  001BEE                     u4971:
  8619  001BEE  502A               	movf	??__tdiv_to_l_,w,c
  8620  001BF0  6E31               	movwf	__tdiv_to_l_@cntr,c
  8621  001BF2  5031               	movf	__tdiv_to_l_@cntr,w,c
  8622  001BF4  A4D8               	btfss	status,2,c
  8623  001BF6  D009               	goto	l5359
  8624  001BF8  0E00               	movlw	0
  8625  001BFA  6E24               	movwf	?__tdiv_to_l_,c
  8626  001BFC  0E00               	movlw	0
  8627  001BFE  6E25               	movwf	?__tdiv_to_l_+1,c
  8628  001C00  0E00               	movlw	0
  8629  001C02  6E26               	movwf	?__tdiv_to_l_+2,c
  8630  001C04  0E00               	movlw	0
  8631  001C06  6E27               	movwf	?__tdiv_to_l_+3,c
  8632  001C08  0012               	return	
  8633  001C0A                     l5359:
  8634  001C0A  8E25               	bsf	__tdiv_to_l_@f1+1,7,c
  8635  001C0C  0EFF               	movlw	255
  8636  001C0E  1624               	andwf	__tdiv_to_l_@f1,f,c
  8637  001C10  0EFF               	movlw	255
  8638  001C12  1625               	andwf	__tdiv_to_l_@f1+1,f,c
  8639  001C14  0E00               	movlw	0
  8640  001C16  1626               	andwf	__tdiv_to_l_@f1+2,f,c
  8641  001C18  8E28               	bsf	__tdiv_to_l_@f2+1,7,c
  8642  001C1A  0EFF               	movlw	255
  8643  001C1C  1627               	andwf	__tdiv_to_l_@f2,f,c
  8644  001C1E  0EFF               	movlw	255
  8645  001C20  1628               	andwf	__tdiv_to_l_@f2+1,f,c
  8646  001C22  0E00               	movlw	0
  8647  001C24  1629               	andwf	__tdiv_to_l_@f2+2,f,c
  8648  001C26  0E00               	movlw	0
  8649  001C28  6E2D               	movwf	__tdiv_to_l_@quot,c
  8650  001C2A  0E00               	movlw	0
  8651  001C2C  6E2E               	movwf	__tdiv_to_l_@quot+1,c
  8652  001C2E  0E00               	movlw	0
  8653  001C30  6E2F               	movwf	__tdiv_to_l_@quot+2,c
  8654  001C32  0E00               	movlw	0
  8655  001C34  6E30               	movwf	__tdiv_to_l_@quot+3,c
  8656  001C36  0E7F               	movlw	127
  8657  001C38  5E32               	subwf	__tdiv_to_l_@exp1,f,c
  8658  001C3A  5031               	movf	__tdiv_to_l_@cntr,w,c
  8659  001C3C  0F98               	addlw	152
  8660  001C3E  5E32               	subwf	__tdiv_to_l_@exp1,f,c
  8661  001C40  0E18               	movlw	24
  8662  001C42  6E31               	movwf	__tdiv_to_l_@cntr,c
  8663  001C44                     l1048:
  8664  001C44  90D8               	bcf	status,0,c
  8665  001C46  362D               	rlcf	__tdiv_to_l_@quot,f,c
  8666  001C48  362E               	rlcf	__tdiv_to_l_@quot+1,f,c
  8667  001C4A  362F               	rlcf	__tdiv_to_l_@quot+2,f,c
  8668  001C4C  3630               	rlcf	__tdiv_to_l_@quot+3,f,c
  8669  001C4E  5027               	movf	__tdiv_to_l_@f2,w,c
  8670  001C50  5C24               	subwf	__tdiv_to_l_@f1,w,c
  8671  001C52  5028               	movf	__tdiv_to_l_@f2+1,w,c
  8672  001C54  5825               	subwfb	__tdiv_to_l_@f1+1,w,c
  8673  001C56  5029               	movf	__tdiv_to_l_@f2+2,w,c
  8674  001C58  5826               	subwfb	__tdiv_to_l_@f1+2,w,c
  8675  001C5A  A0D8               	btfss	status,0,c
  8676  001C5C  D007               	goto	l1049
  8677  001C5E  5027               	movf	__tdiv_to_l_@f2,w,c
  8678  001C60  5E24               	subwf	__tdiv_to_l_@f1,f,c
  8679  001C62  5028               	movf	__tdiv_to_l_@f2+1,w,c
  8680  001C64  5A25               	subwfb	__tdiv_to_l_@f1+1,f,c
  8681  001C66  5029               	movf	__tdiv_to_l_@f2+2,w,c
  8682  001C68  5A26               	subwfb	__tdiv_to_l_@f1+2,f,c
  8683  001C6A  802D               	bsf	__tdiv_to_l_@quot,0,c
  8684  001C6C                     l1049:
  8685  001C6C  90D8               	bcf	status,0,c
  8686  001C6E  3624               	rlcf	__tdiv_to_l_@f1,f,c
  8687  001C70  3625               	rlcf	__tdiv_to_l_@f1+1,f,c
  8688  001C72  3626               	rlcf	__tdiv_to_l_@f1+2,f,c
  8689  001C74  2E31               	decfsz	__tdiv_to_l_@cntr,f,c
  8690  001C76  D7E6               	goto	l1048
  8691  001C78  AE32               	btfss	__tdiv_to_l_@exp1,7,c
  8692  001C7A  D016               	goto	l5393
  8693  001C7C  5032               	movf	__tdiv_to_l_@exp1,w,c
  8694  001C7E  0A80               	xorlw	128
  8695  001C80  0F97               	addlw	151
  8696  001C82  B0D8               	btfsc	status,0,c
  8697  001C84  D009               	goto	l5389
  8698  001C86  0E00               	movlw	0
  8699  001C88  6E24               	movwf	?__tdiv_to_l_,c
  8700  001C8A  0E00               	movlw	0
  8701  001C8C  6E25               	movwf	?__tdiv_to_l_+1,c
  8702  001C8E  0E00               	movlw	0
  8703  001C90  6E26               	movwf	?__tdiv_to_l_+2,c
  8704  001C92  0E00               	movlw	0
  8705  001C94  6E27               	movwf	?__tdiv_to_l_+3,c
  8706  001C96  0012               	return	
  8707  001C98                     l5389:
  8708  001C98  90D8               	bcf	status,0,c
  8709  001C9A  3230               	rrcf	__tdiv_to_l_@quot+3,f,c
  8710  001C9C  322F               	rrcf	__tdiv_to_l_@quot+2,f,c
  8711  001C9E  322E               	rrcf	__tdiv_to_l_@quot+1,f,c
  8712  001CA0  322D               	rrcf	__tdiv_to_l_@quot,f,c
  8713  001CA2  3E32               	incfsz	__tdiv_to_l_@exp1,f,c
  8714  001CA4  D7F9               	goto	l5389
  8715  001CA6  D015               	goto	l1055
  8716  001CA8                     l5393:
  8717  001CA8  0E17               	movlw	23
  8718  001CAA  6432               	cpfsgt	__tdiv_to_l_@exp1,c
  8719  001CAC  D00F               	goto	l5401
  8720  001CAE  0E00               	movlw	0
  8721  001CB0  6E24               	movwf	?__tdiv_to_l_,c
  8722  001CB2  0E00               	movlw	0
  8723  001CB4  6E25               	movwf	?__tdiv_to_l_+1,c
  8724  001CB6  0E00               	movlw	0
  8725  001CB8  6E26               	movwf	?__tdiv_to_l_+2,c
  8726  001CBA  0E00               	movlw	0
  8727  001CBC  6E27               	movwf	?__tdiv_to_l_+3,c
  8728  001CBE  0012               	return	
  8729  001CC0                     l5399:
  8730  001CC0  90D8               	bcf	status,0,c
  8731  001CC2  362D               	rlcf	__tdiv_to_l_@quot,f,c
  8732  001CC4  362E               	rlcf	__tdiv_to_l_@quot+1,f,c
  8733  001CC6  362F               	rlcf	__tdiv_to_l_@quot+2,f,c
  8734  001CC8  3630               	rlcf	__tdiv_to_l_@quot+3,f,c
  8735  001CCA  0632               	decf	__tdiv_to_l_@exp1,f,c
  8736  001CCC                     l5401:
  8737  001CCC  5032               	movf	__tdiv_to_l_@exp1,w,c
  8738  001CCE  A4D8               	btfss	status,2,c
  8739  001CD0  D7F7               	goto	l5399
  8740  001CD2                     l1055:
  8741  001CD2  C02D  F024         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  8742  001CD6  C02E  F025         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  8743  001CDA  C02F  F026         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  8744  001CDE  C030  F027         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  8745  001CE2  0012               	return		;funcret
  8746  001CE4                     __end_of__tdiv_to_l_:
  8747                           	opt stack 0
  8748                           tblptru	equ	0xFF8
  8749                           tblptrh	equ	0xFF7
  8750                           tblptrl	equ	0xFF6
  8751                           tablat	equ	0xFF5
  8752                           prodh	equ	0xFF4
  8753                           prodl	equ	0xFF3
  8754                           intcon	equ	0xFF2
  8755                           postinc0	equ	0xFEE
  8756                           wreg	equ	0xFE8
  8757                           postdec1	equ	0xFE5
  8758                           plusw1	equ	0xFE3
  8759                           fsr1l	equ	0xFE1
  8760                           indf2	equ	0xFDF
  8761                           postinc2	equ	0xFDE
  8762                           postdec2	equ	0xFDD
  8763                           plusw2	equ	0xFDB
  8764                           fsr2h	equ	0xFDA
  8765                           fsr2l	equ	0xFD9
  8766                           status	equ	0xFD8
  8767                           
  8768 ;; *************** function __div_to_l_ *****************
  8769 ;; Defined at:
  8770 ;;		line 60 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fldivl.c"
  8771 ;; Parameters:    Size  Location     Type
  8772 ;;  f1              3   35[COMRAM] unsigned long 
  8773 ;;  f2              3   38[COMRAM] unsigned long 
  8774 ;; Auto vars:     Size  Location     Type
  8775 ;;  quot            4   41[COMRAM] unsigned long 
  8776 ;;  exp1            1   46[COMRAM] unsigned char 
  8777 ;;  cntr            1   45[COMRAM] unsigned char 
  8778 ;; Return value:  Size  Location     Type
  8779 ;;                  4   35[COMRAM] unsigned long 
  8780 ;; Registers used:
  8781 ;;		wreg, status,2, status,0
  8782 ;; Tracked objects:
  8783 ;;		On entry : 0/0
  8784 ;;		On exit  : 0/0
  8785 ;;		Unchanged: 0/0
  8786 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8787 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8788 ;;      Locals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8789 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8790 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  8791 ;;Total ram usage:       12 bytes
  8792 ;; Hardware stack levels used:    1
  8793 ;; Hardware stack levels required when called:    3
  8794 ;; This function calls:
  8795 ;;		Nothing
  8796 ;; This function is called by:
  8797 ;;		_printf
  8798 ;; This function uses a non-reentrant model
  8799 ;;
  8800                           
  8801                           	psect	text40
  8802  001CE4                     __ptext40:
  8803                           	opt stack 0
  8804  001CE4                     __div_to_l_:
  8805                           	opt stack 25
  8806                           
  8807                           ;incstack = 0
  8808  001CE4  3426               	rlcf	__div_to_l_@f1+2,w,c
  8809  001CE6  3427               	rlcf	__div_to_l_@f1+3,w,c
  8810  001CE8  6E2F               	movwf	__div_to_l_@exp1,c
  8811  001CEA  502F               	movf	__div_to_l_@exp1,w,c
  8812  001CEC  A4D8               	btfss	status,2,c
  8813  001CEE  D009               	goto	l5409
  8814  001CF0  0E00               	movlw	0
  8815  001CF2  6E24               	movwf	?__div_to_l_,c
  8816  001CF4  0E00               	movlw	0
  8817  001CF6  6E25               	movwf	?__div_to_l_+1,c
  8818  001CF8  0E00               	movlw	0
  8819  001CFA  6E26               	movwf	?__div_to_l_+2,c
  8820  001CFC  0E00               	movlw	0
  8821  001CFE  6E27               	movwf	?__div_to_l_+3,c
  8822  001D00  0012               	return	
  8823  001D02                     l5409:
  8824  001D02  3429               	rlcf	__div_to_l_@f2+2,w,c
  8825  001D04  342A               	rlcf	__div_to_l_@f2+3,w,c
  8826  001D06  6E2E               	movwf	__div_to_l_@cntr,c
  8827  001D08  502E               	movf	__div_to_l_@cntr,w,c
  8828  001D0A  A4D8               	btfss	status,2,c
  8829  001D0C  D009               	goto	l5415
  8830  001D0E  0E00               	movlw	0
  8831  001D10  6E24               	movwf	?__div_to_l_,c
  8832  001D12  0E00               	movlw	0
  8833  001D14  6E25               	movwf	?__div_to_l_+1,c
  8834  001D16  0E00               	movlw	0
  8835  001D18  6E26               	movwf	?__div_to_l_+2,c
  8836  001D1A  0E00               	movlw	0
  8837  001D1C  6E27               	movwf	?__div_to_l_+3,c
  8838  001D1E  0012               	return	
  8839  001D20                     l5415:
  8840  001D20  8E26               	bsf	__div_to_l_@f1+2,7,c
  8841  001D22  0EFF               	movlw	255
  8842  001D24  1624               	andwf	__div_to_l_@f1,f,c
  8843  001D26  0EFF               	movlw	255
  8844  001D28  1625               	andwf	__div_to_l_@f1+1,f,c
  8845  001D2A  0EFF               	movlw	255
  8846  001D2C  1626               	andwf	__div_to_l_@f1+2,f,c
  8847  001D2E  0E00               	movlw	0
  8848  001D30  1627               	andwf	__div_to_l_@f1+3,f,c
  8849  001D32  8E29               	bsf	__div_to_l_@f2+2,7,c
  8850  001D34  0EFF               	movlw	255
  8851  001D36  1627               	andwf	__div_to_l_@f2,f,c
  8852  001D38  0EFF               	movlw	255
  8853  001D3A  1628               	andwf	__div_to_l_@f2+1,f,c
  8854  001D3C  0EFF               	movlw	255
  8855  001D3E  1629               	andwf	__div_to_l_@f2+2,f,c
  8856  001D40  0E00               	movlw	0
  8857  001D42  162A               	andwf	__div_to_l_@f2+3,f,c
  8858  001D44  0E00               	movlw	0
  8859  001D46  6E2A               	movwf	__div_to_l_@quot,c
  8860  001D48  0E00               	movlw	0
  8861  001D4A  6E2B               	movwf	__div_to_l_@quot+1,c
  8862  001D4C  0E00               	movlw	0
  8863  001D4E  6E2C               	movwf	__div_to_l_@quot+2,c
  8864  001D50  0E00               	movlw	0
  8865  001D52  6E2D               	movwf	__div_to_l_@quot+3,c
  8866  001D54  0E7F               	movlw	127
  8867  001D56  5E2F               	subwf	__div_to_l_@exp1,f,c
  8868  001D58  502E               	movf	__div_to_l_@cntr,w,c
  8869  001D5A  0FA0               	addlw	160
  8870  001D5C  5E2F               	subwf	__div_to_l_@exp1,f,c
  8871  001D5E  0E20               	movlw	32
  8872  001D60  6E2E               	movwf	__div_to_l_@cntr,c
  8873  001D62                     l5429:
  8874  001D62  90D8               	bcf	status,0,c
  8875  001D64  362A               	rlcf	__div_to_l_@quot,f,c
  8876  001D66  362B               	rlcf	__div_to_l_@quot+1,f,c
  8877  001D68  362C               	rlcf	__div_to_l_@quot+2,f,c
  8878  001D6A  362D               	rlcf	__div_to_l_@quot+3,f,c
  8879  001D6C  5027               	movf	__div_to_l_@f2,w,c
  8880  001D6E  5C24               	subwf	__div_to_l_@f1,w,c
  8881  001D70  5028               	movf	__div_to_l_@f2+1,w,c
  8882  001D72  5825               	subwfb	__div_to_l_@f1+1,w,c
  8883  001D74  5029               	movf	__div_to_l_@f2+2,w,c
  8884  001D76  5826               	subwfb	__div_to_l_@f1+2,w,c
  8885  001D78  502A               	movf	__div_to_l_@f2+3,w,c
  8886  001D7A  5827               	subwfb	__div_to_l_@f1+3,w,c
  8887  001D7C  A0D8               	btfss	status,0,c
  8888  001D7E  D009               	goto	l5437
  8889  001D80  5027               	movf	__div_to_l_@f2,w,c
  8890  001D82  5E24               	subwf	__div_to_l_@f1,f,c
  8891  001D84  5028               	movf	__div_to_l_@f2+1,w,c
  8892  001D86  5A25               	subwfb	__div_to_l_@f1+1,f,c
  8893  001D88  5029               	movf	__div_to_l_@f2+2,w,c
  8894  001D8A  5A26               	subwfb	__div_to_l_@f1+2,f,c
  8895  001D8C  502A               	movf	__div_to_l_@f2+3,w,c
  8896  001D8E  5A27               	subwfb	__div_to_l_@f1+3,f,c
  8897  001D90  802A               	bsf	__div_to_l_@quot,0,c
  8898  001D92                     l5437:
  8899  001D92  90D8               	bcf	status,0,c
  8900  001D94  3624               	rlcf	__div_to_l_@f1,f,c
  8901  001D96  3625               	rlcf	__div_to_l_@f1+1,f,c
  8902  001D98  3626               	rlcf	__div_to_l_@f1+2,f,c
  8903  001D9A  3627               	rlcf	__div_to_l_@f1+3,f,c
  8904  001D9C  2E2E               	decfsz	__div_to_l_@cntr,f,c
  8905  001D9E  D7E1               	goto	l5429
  8906  001DA0  AE2F               	btfss	__div_to_l_@exp1,7,c
  8907  001DA2  D016               	goto	l5453
  8908  001DA4  502F               	movf	__div_to_l_@exp1,w,c
  8909  001DA6  0A80               	xorlw	128
  8910  001DA8  0F9F               	addlw	159
  8911  001DAA  B0D8               	btfsc	status,0,c
  8912  001DAC  D009               	goto	l5449
  8913  001DAE  0E00               	movlw	0
  8914  001DB0  6E24               	movwf	?__div_to_l_,c
  8915  001DB2  0E00               	movlw	0
  8916  001DB4  6E25               	movwf	?__div_to_l_+1,c
  8917  001DB6  0E00               	movlw	0
  8918  001DB8  6E26               	movwf	?__div_to_l_+2,c
  8919  001DBA  0E00               	movlw	0
  8920  001DBC  6E27               	movwf	?__div_to_l_+3,c
  8921  001DBE  0012               	return	
  8922  001DC0                     l5449:
  8923  001DC0  90D8               	bcf	status,0,c
  8924  001DC2  322D               	rrcf	__div_to_l_@quot+3,f,c
  8925  001DC4  322C               	rrcf	__div_to_l_@quot+2,f,c
  8926  001DC6  322B               	rrcf	__div_to_l_@quot+1,f,c
  8927  001DC8  322A               	rrcf	__div_to_l_@quot,f,c
  8928  001DCA  3E2F               	incfsz	__div_to_l_@exp1,f,c
  8929  001DCC  D7F9               	goto	l5449
  8930  001DCE  D015               	goto	l951
  8931  001DD0                     l5453:
  8932  001DD0  0E1F               	movlw	31
  8933  001DD2  642F               	cpfsgt	__div_to_l_@exp1,c
  8934  001DD4  D00F               	goto	l5461
  8935  001DD6  0E00               	movlw	0
  8936  001DD8  6E24               	movwf	?__div_to_l_,c
  8937  001DDA  0E00               	movlw	0
  8938  001DDC  6E25               	movwf	?__div_to_l_+1,c
  8939  001DDE  0E00               	movlw	0
  8940  001DE0  6E26               	movwf	?__div_to_l_+2,c
  8941  001DE2  0E00               	movlw	0
  8942  001DE4  6E27               	movwf	?__div_to_l_+3,c
  8943  001DE6  0012               	return	
  8944  001DE8                     l5459:
  8945  001DE8  90D8               	bcf	status,0,c
  8946  001DEA  362A               	rlcf	__div_to_l_@quot,f,c
  8947  001DEC  362B               	rlcf	__div_to_l_@quot+1,f,c
  8948  001DEE  362C               	rlcf	__div_to_l_@quot+2,f,c
  8949  001DF0  362D               	rlcf	__div_to_l_@quot+3,f,c
  8950  001DF2  062F               	decf	__div_to_l_@exp1,f,c
  8951  001DF4                     l5461:
  8952  001DF4  502F               	movf	__div_to_l_@exp1,w,c
  8953  001DF6  A4D8               	btfss	status,2,c
  8954  001DF8  D7F7               	goto	l5459
  8955  001DFA                     l951:
  8956  001DFA  C02A  F024         	movff	__div_to_l_@quot,?__div_to_l_
  8957  001DFE  C02B  F025         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  8958  001E02  C02C  F026         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  8959  001E06  C02D  F027         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  8960  001E0A  0012               	return		;funcret
  8961  001E0C                     __end_of__div_to_l_:
  8962                           	opt stack 0
  8963                           tblptru	equ	0xFF8
  8964                           tblptrh	equ	0xFF7
  8965                           tblptrl	equ	0xFF6
  8966                           tablat	equ	0xFF5
  8967                           prodh	equ	0xFF4
  8968                           prodl	equ	0xFF3
  8969                           intcon	equ	0xFF2
  8970                           postinc0	equ	0xFEE
  8971                           wreg	equ	0xFE8
  8972                           postdec1	equ	0xFE5
  8973                           plusw1	equ	0xFE3
  8974                           fsr1l	equ	0xFE1
  8975                           indf2	equ	0xFDF
  8976                           postinc2	equ	0xFDE
  8977                           postdec2	equ	0xFDD
  8978                           plusw2	equ	0xFDB
  8979                           fsr2h	equ	0xFDA
  8980                           fsr2l	equ	0xFD9
  8981                           status	equ	0xFD8
  8982                           
  8983 ;; *************** function ___lltoft *****************
  8984 ;; Defined at:
  8985 ;;		line 35 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lltoft.c"
  8986 ;; Parameters:    Size  Location     Type
  8987 ;;  c               4   43[COMRAM] unsigned long 
  8988 ;; Auto vars:     Size  Location     Type
  8989 ;;  exp             1   51[COMRAM] unsigned char 
  8990 ;; Return value:  Size  Location     Type
  8991 ;;                  3   43[COMRAM] float 
  8992 ;; Registers used:
  8993 ;;		wreg, status,2, status,0, cstack
  8994 ;; Tracked objects:
  8995 ;;		On entry : 0/0
  8996 ;;		On exit  : 0/0
  8997 ;;		Unchanged: 0/0
  8998 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  8999 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9000 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9001 ;;      Temps:          4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9002 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9003 ;;Total ram usage:        9 bytes
  9004 ;; Hardware stack levels used:    1
  9005 ;; Hardware stack levels required when called:    4
  9006 ;; This function calls:
  9007 ;;		___ftpack
  9008 ;; This function is called by:
  9009 ;;		_printf
  9010 ;; This function uses a non-reentrant model
  9011 ;;
  9012                           
  9013                           	psect	text41
  9014  0028C4                     __ptext41:
  9015                           	opt stack 0
  9016  0028C4                     ___lltoft:
  9017                           	opt stack 24
  9018                           
  9019                           ;incstack = 0
  9020  0028C4  0E8E               	movlw	142
  9021  0028C6  6E34               	movwf	___lltoft@exp,c
  9022  0028C8  D006               	goto	l5535
  9023  0028CA                     l5533:
  9024  0028CA  90D8               	bcf	status,0,c
  9025  0028CC  322F               	rrcf	___lltoft@c+3,f,c
  9026  0028CE  322E               	rrcf	___lltoft@c+2,f,c
  9027  0028D0  322D               	rrcf	___lltoft@c+1,f,c
  9028  0028D2  322C               	rrcf	___lltoft@c,f,c
  9029  0028D4  2A34               	incf	___lltoft@exp,f,c
  9030  0028D6                     l5535:
  9031  0028D6  0E00               	movlw	0
  9032  0028D8  142C               	andwf	___lltoft@c,w,c
  9033  0028DA  6E30               	movwf	??___lltoft& (0+255),c
  9034  0028DC  0E00               	movlw	0
  9035  0028DE  142D               	andwf	___lltoft@c+1,w,c
  9036  0028E0  6E31               	movwf	(??___lltoft+1)& (0+255),c
  9037  0028E2  0E00               	movlw	0
  9038  0028E4  142E               	andwf	___lltoft@c+2,w,c
  9039  0028E6  6E32               	movwf	(??___lltoft+2)& (0+255),c
  9040  0028E8  0EFF               	movlw	255
  9041  0028EA  142F               	andwf	___lltoft@c+3,w,c
  9042  0028EC  6E33               	movwf	(??___lltoft+3)& (0+255),c
  9043  0028EE  5030               	movf	??___lltoft,w,c
  9044  0028F0  1031               	iorwf	??___lltoft+1,w,c
  9045  0028F2  1032               	iorwf	??___lltoft+2,w,c
  9046  0028F4  1033               	iorwf	??___lltoft+3,w,c
  9047  0028F6  A4D8               	btfss	status,2,c
  9048  0028F8  D7E8               	goto	l5533
  9049  0028FA  C02C  F024         	movff	___lltoft@c,___ftpack@arg
  9050  0028FE  C02D  F025         	movff	___lltoft@c+1,___ftpack@arg+1
  9051  002902  C02E  F026         	movff	___lltoft@c+2,___ftpack@arg+2
  9052  002906  C034  F027         	movff	___lltoft@exp,___ftpack@exp
  9053  00290A  0E00               	movlw	0
  9054  00290C  6E28               	movwf	___ftpack@sign,c
  9055  00290E  ECA3  F010         	call	___ftpack	;wreg free
  9056  002912  C024  F02C         	movff	?___ftpack,?___lltoft
  9057  002916  C025  F02D         	movff	?___ftpack+1,?___lltoft+1
  9058  00291A  C026  F02E         	movff	?___ftpack+2,?___lltoft+2
  9059  00291E  0012               	return	
  9060  002920                     __end_of___lltoft:
  9061                           	opt stack 0
  9062                           tblptru	equ	0xFF8
  9063                           tblptrh	equ	0xFF7
  9064                           tblptrl	equ	0xFF6
  9065                           tablat	equ	0xFF5
  9066                           prodh	equ	0xFF4
  9067                           prodl	equ	0xFF3
  9068                           intcon	equ	0xFF2
  9069                           postinc0	equ	0xFEE
  9070                           wreg	equ	0xFE8
  9071                           postdec1	equ	0xFE5
  9072                           plusw1	equ	0xFE3
  9073                           fsr1l	equ	0xFE1
  9074                           indf2	equ	0xFDF
  9075                           postinc2	equ	0xFDE
  9076                           postdec2	equ	0xFDD
  9077                           plusw2	equ	0xFDB
  9078                           fsr2h	equ	0xFDA
  9079                           fsr2l	equ	0xFD9
  9080                           status	equ	0xFD8
  9081                           
  9082 ;; *************** function ___llmod *****************
  9083 ;; Defined at:
  9084 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\llmod.c"
  9085 ;; Parameters:    Size  Location     Type
  9086 ;;  dividend        4   48[COMRAM] unsigned long 
  9087 ;;  divisor         4   52[COMRAM] unsigned long 
  9088 ;; Auto vars:     Size  Location     Type
  9089 ;;  counter         1   56[COMRAM] unsigned char 
  9090 ;; Return value:  Size  Location     Type
  9091 ;;                  4   48[COMRAM] unsigned long 
  9092 ;; Registers used:
  9093 ;;		wreg, status,2, status,0
  9094 ;; Tracked objects:
  9095 ;;		On entry : 0/0
  9096 ;;		On exit  : 0/0
  9097 ;;		Unchanged: 0/0
  9098 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9099 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9100 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9101 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9102 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9103 ;;Total ram usage:        9 bytes
  9104 ;; Hardware stack levels used:    1
  9105 ;; Hardware stack levels required when called:    3
  9106 ;; This function calls:
  9107 ;;		Nothing
  9108 ;; This function is called by:
  9109 ;;		_printf
  9110 ;; This function uses a non-reentrant model
  9111 ;;
  9112                           
  9113                           	psect	text42
  9114  0027F8                     __ptext42:
  9115                           	opt stack 0
  9116  0027F8                     ___llmod:
  9117                           	opt stack 25
  9118                           
  9119                           ;incstack = 0
  9120  0027F8  5035               	movf	___llmod@divisor,w,c
  9121  0027FA  1036               	iorwf	___llmod@divisor+1,w,c
  9122  0027FC  1037               	iorwf	___llmod@divisor+2,w,c
  9123  0027FE  1038               	iorwf	___llmod@divisor+3,w,c
  9124  002800  B4D8               	btfsc	status,2,c
  9125  002802  D024               	goto	l1135
  9126  002804  0E01               	movlw	1
  9127  002806  6E39               	movwf	___llmod@counter,c
  9128  002808  D006               	goto	l5521
  9129  00280A                     l5519:
  9130  00280A  90D8               	bcf	status,0,c
  9131  00280C  3635               	rlcf	___llmod@divisor,f,c
  9132  00280E  3636               	rlcf	___llmod@divisor+1,f,c
  9133  002810  3637               	rlcf	___llmod@divisor+2,f,c
  9134  002812  3638               	rlcf	___llmod@divisor+3,f,c
  9135  002814  2A39               	incf	___llmod@counter,f,c
  9136  002816                     l5521:
  9137  002816  AE38               	btfss	___llmod@divisor+3,7,c
  9138  002818  D7F8               	goto	l5519
  9139  00281A                     l5523:
  9140  00281A  5035               	movf	___llmod@divisor,w,c
  9141  00281C  5C31               	subwf	___llmod@dividend,w,c
  9142  00281E  5036               	movf	___llmod@divisor+1,w,c
  9143  002820  5832               	subwfb	___llmod@dividend+1,w,c
  9144  002822  5037               	movf	___llmod@divisor+2,w,c
  9145  002824  5833               	subwfb	___llmod@dividend+2,w,c
  9146  002826  5038               	movf	___llmod@divisor+3,w,c
  9147  002828  5834               	subwfb	___llmod@dividend+3,w,c
  9148  00282A  A0D8               	btfss	status,0,c
  9149  00282C  D008               	goto	l5527
  9150  00282E  5035               	movf	___llmod@divisor,w,c
  9151  002830  5E31               	subwf	___llmod@dividend,f,c
  9152  002832  5036               	movf	___llmod@divisor+1,w,c
  9153  002834  5A32               	subwfb	___llmod@dividend+1,f,c
  9154  002836  5037               	movf	___llmod@divisor+2,w,c
  9155  002838  5A33               	subwfb	___llmod@dividend+2,f,c
  9156  00283A  5038               	movf	___llmod@divisor+3,w,c
  9157  00283C  5A34               	subwfb	___llmod@dividend+3,f,c
  9158  00283E                     l5527:
  9159  00283E  90D8               	bcf	status,0,c
  9160  002840  3238               	rrcf	___llmod@divisor+3,f,c
  9161  002842  3237               	rrcf	___llmod@divisor+2,f,c
  9162  002844  3236               	rrcf	___llmod@divisor+1,f,c
  9163  002846  3235               	rrcf	___llmod@divisor,f,c
  9164  002848  2E39               	decfsz	___llmod@counter,f,c
  9165  00284A  D7E7               	goto	l5523
  9166  00284C                     l1135:
  9167  00284C  C031  F031         	movff	___llmod@dividend,?___llmod
  9168  002850  C032  F032         	movff	___llmod@dividend+1,?___llmod+1
  9169  002854  C033  F033         	movff	___llmod@dividend+2,?___llmod+2
  9170  002858  C034  F034         	movff	___llmod@dividend+3,?___llmod+3
  9171  00285C  0012               	return		;funcret
  9172  00285E                     __end_of___llmod:
  9173                           	opt stack 0
  9174                           tblptru	equ	0xFF8
  9175                           tblptrh	equ	0xFF7
  9176                           tblptrl	equ	0xFF6
  9177                           tablat	equ	0xFF5
  9178                           prodh	equ	0xFF4
  9179                           prodl	equ	0xFF3
  9180                           intcon	equ	0xFF2
  9181                           postinc0	equ	0xFEE
  9182                           wreg	equ	0xFE8
  9183                           postdec1	equ	0xFE5
  9184                           plusw1	equ	0xFE3
  9185                           fsr1l	equ	0xFE1
  9186                           indf2	equ	0xFDF
  9187                           postinc2	equ	0xFDE
  9188                           postdec2	equ	0xFDD
  9189                           plusw2	equ	0xFDB
  9190                           fsr2h	equ	0xFDA
  9191                           fsr2l	equ	0xFD9
  9192                           status	equ	0xFD8
  9193                           
  9194 ;; *************** function ___lldiv *****************
  9195 ;; Defined at:
  9196 ;;		line 8 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\lldiv.c"
  9197 ;; Parameters:    Size  Location     Type
  9198 ;;  dividend        4   35[COMRAM] unsigned long 
  9199 ;;  divisor         4   39[COMRAM] unsigned long 
  9200 ;; Auto vars:     Size  Location     Type
  9201 ;;  quotient        4   43[COMRAM] unsigned long 
  9202 ;;  counter         1   47[COMRAM] unsigned char 
  9203 ;; Return value:  Size  Location     Type
  9204 ;;                  4   35[COMRAM] unsigned long 
  9205 ;; Registers used:
  9206 ;;		wreg, status,2, status,0
  9207 ;; Tracked objects:
  9208 ;;		On entry : 0/0
  9209 ;;		On exit  : 0/0
  9210 ;;		Unchanged: 0/0
  9211 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9212 ;;      Params:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9213 ;;      Locals:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9214 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9215 ;;      Totals:        13       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9216 ;;Total ram usage:       13 bytes
  9217 ;; Hardware stack levels used:    1
  9218 ;; Hardware stack levels required when called:    3
  9219 ;; This function calls:
  9220 ;;		Nothing
  9221 ;; This function is called by:
  9222 ;;		_I2C_Master_Init
  9223 ;;		_printf
  9224 ;; This function uses a non-reentrant model
  9225 ;;
  9226                           
  9227                           	psect	text43
  9228  002614                     __ptext43:
  9229                           	opt stack 0
  9230  002614                     ___lldiv:
  9231                           	opt stack 25
  9232                           
  9233                           ;incstack = 0
  9234  002614  0E00               	movlw	0
  9235  002616  6E2C               	movwf	___lldiv@quotient,c
  9236  002618  0E00               	movlw	0
  9237  00261A  6E2D               	movwf	___lldiv@quotient+1,c
  9238  00261C  0E00               	movlw	0
  9239  00261E  6E2E               	movwf	___lldiv@quotient+2,c
  9240  002620  0E00               	movlw	0
  9241  002622  6E2F               	movwf	___lldiv@quotient+3,c
  9242  002624  5028               	movf	___lldiv@divisor,w,c
  9243  002626  1029               	iorwf	___lldiv@divisor+1,w,c
  9244  002628  102A               	iorwf	___lldiv@divisor+2,w,c
  9245  00262A  102B               	iorwf	___lldiv@divisor+3,w,c
  9246  00262C  B4D8               	btfsc	status,2,c
  9247  00262E  D02A               	goto	l1125
  9248  002630  0E01               	movlw	1
  9249  002632  6E30               	movwf	___lldiv@counter,c
  9250  002634  D006               	goto	l5501
  9251  002636                     l5499:
  9252  002636  90D8               	bcf	status,0,c
  9253  002638  3628               	rlcf	___lldiv@divisor,f,c
  9254  00263A  3629               	rlcf	___lldiv@divisor+1,f,c
  9255  00263C  362A               	rlcf	___lldiv@divisor+2,f,c
  9256  00263E  362B               	rlcf	___lldiv@divisor+3,f,c
  9257  002640  2A30               	incf	___lldiv@counter,f,c
  9258  002642                     l5501:
  9259  002642  AE2B               	btfss	___lldiv@divisor+3,7,c
  9260  002644  D7F8               	goto	l5499
  9261  002646                     l5503:
  9262  002646  90D8               	bcf	status,0,c
  9263  002648  362C               	rlcf	___lldiv@quotient,f,c
  9264  00264A  362D               	rlcf	___lldiv@quotient+1,f,c
  9265  00264C  362E               	rlcf	___lldiv@quotient+2,f,c
  9266  00264E  362F               	rlcf	___lldiv@quotient+3,f,c
  9267  002650  5028               	movf	___lldiv@divisor,w,c
  9268  002652  5C24               	subwf	___lldiv@dividend,w,c
  9269  002654  5029               	movf	___lldiv@divisor+1,w,c
  9270  002656  5825               	subwfb	___lldiv@dividend+1,w,c
  9271  002658  502A               	movf	___lldiv@divisor+2,w,c
  9272  00265A  5826               	subwfb	___lldiv@dividend+2,w,c
  9273  00265C  502B               	movf	___lldiv@divisor+3,w,c
  9274  00265E  5827               	subwfb	___lldiv@dividend+3,w,c
  9275  002660  A0D8               	btfss	status,0,c
  9276  002662  D009               	goto	l5511
  9277  002664  5028               	movf	___lldiv@divisor,w,c
  9278  002666  5E24               	subwf	___lldiv@dividend,f,c
  9279  002668  5029               	movf	___lldiv@divisor+1,w,c
  9280  00266A  5A25               	subwfb	___lldiv@dividend+1,f,c
  9281  00266C  502A               	movf	___lldiv@divisor+2,w,c
  9282  00266E  5A26               	subwfb	___lldiv@dividend+2,f,c
  9283  002670  502B               	movf	___lldiv@divisor+3,w,c
  9284  002672  5A27               	subwfb	___lldiv@dividend+3,f,c
  9285  002674  802C               	bsf	___lldiv@quotient,0,c
  9286  002676                     l5511:
  9287  002676  90D8               	bcf	status,0,c
  9288  002678  322B               	rrcf	___lldiv@divisor+3,f,c
  9289  00267A  322A               	rrcf	___lldiv@divisor+2,f,c
  9290  00267C  3229               	rrcf	___lldiv@divisor+1,f,c
  9291  00267E  3228               	rrcf	___lldiv@divisor,f,c
  9292  002680  2E30               	decfsz	___lldiv@counter,f,c
  9293  002682  D7E1               	goto	l5503
  9294  002684                     l1125:
  9295  002684  C02C  F024         	movff	___lldiv@quotient,?___lldiv
  9296  002688  C02D  F025         	movff	___lldiv@quotient+1,?___lldiv+1
  9297  00268C  C02E  F026         	movff	___lldiv@quotient+2,?___lldiv+2
  9298  002690  C02F  F027         	movff	___lldiv@quotient+3,?___lldiv+3
  9299  002694  0012               	return		;funcret
  9300  002696                     __end_of___lldiv:
  9301                           	opt stack 0
  9302                           tblptru	equ	0xFF8
  9303                           tblptrh	equ	0xFF7
  9304                           tblptrl	equ	0xFF6
  9305                           tablat	equ	0xFF5
  9306                           prodh	equ	0xFF4
  9307                           prodl	equ	0xFF3
  9308                           intcon	equ	0xFF2
  9309                           postinc0	equ	0xFEE
  9310                           wreg	equ	0xFE8
  9311                           postdec1	equ	0xFE5
  9312                           plusw1	equ	0xFE3
  9313                           fsr1l	equ	0xFE1
  9314                           indf2	equ	0xFDF
  9315                           postinc2	equ	0xFDE
  9316                           postdec2	equ	0xFDD
  9317                           plusw2	equ	0xFDB
  9318                           fsr2h	equ	0xFDA
  9319                           fsr2l	equ	0xFD9
  9320                           status	equ	0xFD8
  9321                           
  9322 ;; *************** function ___fttol *****************
  9323 ;; Defined at:
  9324 ;;		line 44 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\fttol.c"
  9325 ;; Parameters:    Size  Location     Type
  9326 ;;  f1              3   49[BANK0 ] float 
  9327 ;; Auto vars:     Size  Location     Type
  9328 ;;  lval            4   59[BANK0 ] unsigned long 
  9329 ;;  exp1            1   63[BANK0 ] unsigned char 
  9330 ;;  sign1           1   58[BANK0 ] unsigned char 
  9331 ;; Return value:  Size  Location     Type
  9332 ;;                  4   49[BANK0 ] long 
  9333 ;; Registers used:
  9334 ;;		wreg, status,2, status,0
  9335 ;; Tracked objects:
  9336 ;;		On entry : 0/0
  9337 ;;		On exit  : 0/0
  9338 ;;		Unchanged: 0/0
  9339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9340 ;;      Params:         0       4       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9341 ;;      Locals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9342 ;;      Temps:          0       5       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9343 ;;      Totals:         0      15       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9344 ;;Total ram usage:       15 bytes
  9345 ;; Hardware stack levels used:    1
  9346 ;; Hardware stack levels required when called:    3
  9347 ;; This function calls:
  9348 ;;		Nothing
  9349 ;; This function is called by:
  9350 ;;		_angleToPulse
  9351 ;;		_printf
  9352 ;; This function uses a non-reentrant model
  9353 ;;
  9354                           
  9355                           	psect	text44
  9356  00192E                     __ptext44:
  9357                           	opt stack 0
  9358  00192E                     ___fttol:
  9359                           	opt stack 24
  9360                           
  9361                           ;incstack = 0
  9362  00192E  C0B3  F0B5         	movff	___fttol@f1+2,??___fttol
  9363  001932  0100               	movlb	0	; () banked
  9364  001934  6BB6               	clrf	(??___fttol+1)& (0+255),b
  9365  001936  6BB7               	clrf	(??___fttol+2)& (0+255),b
  9366  001938  0100               	movlb	0	; () banked
  9367  00193A  35B2               	rlcf	(___fttol@f1+1)& (0+255),w,b
  9368  00193C  0100               	movlb	0	; () banked
  9369  00193E  37B5               	rlcf	??___fttol& (0+255),f,b
  9370  001940  E301               	bnc	u4791
  9371  001942  81B6               	bsf	(??___fttol+1)& (0+255),0,b
  9372  001944                     u4791:
  9373  001944  0100               	movlb	0	; () banked
  9374  001946  51B5               	movf	??___fttol& (0+255),w,b
  9375  001948  0100               	movlb	0	; () banked
  9376  00194A  6FBF               	movwf	___fttol@exp1& (0+255),b
  9377  00194C  0100               	movlb	0	; () banked
  9378  00194E  51BF               	movf	___fttol@exp1& (0+255),w,b
  9379  001950  A4D8               	btfss	status,2,c
  9380  001952  D00A               	goto	l5231
  9381                           
  9382                           ; BSR set to: 0
  9383  001954  0E00               	movlw	0
  9384  001956  0100               	movlb	0	; () banked
  9385  001958  6FB1               	movwf	?___fttol& (0+255),b
  9386  00195A  0E00               	movlw	0
  9387  00195C  6FB2               	movwf	(?___fttol+1)& (0+255),b
  9388  00195E  0E00               	movlw	0
  9389  001960  6FB3               	movwf	(?___fttol+2)& (0+255),b
  9390  001962  0E00               	movlw	0
  9391  001964  6FB4               	movwf	(?___fttol+3)& (0+255),b
  9392                           
  9393                           ; BSR set to: 0
  9394  001966  0012               	return	
  9395  001968                     l5231:
  9396                           
  9397                           ; BSR set to: 0
  9398  001968  0E17               	movlw	23
  9399  00196A  0100               	movlb	0	; () banked
  9400  00196C  6FB5               	movwf	??___fttol& (0+255),b
  9401  00196E  C0B1  F0B6         	movff	___fttol@f1,??___fttol+1
  9402  001972  C0B2  F0B7         	movff	___fttol@f1+1,??___fttol+2
  9403  001976  C0B3  F0B8         	movff	___fttol@f1+2,??___fttol+3
  9404  00197A  0100               	movlb	0	; () banked
  9405  00197C  29B5               	incf	??___fttol& (0+255),w,b
  9406  00197E  0100               	movlb	0	; () banked
  9407  001980  6FB9               	movwf	(??___fttol+4)& (0+255),b
  9408  001982  D005               	goto	u4810
  9409  001984                     u4815:
  9410  001984  0100               	movlb	0	; () banked
  9411  001986  90D8               	bcf	status,0,c
  9412  001988  33B8               	rrcf	(??___fttol+3)& (0+255),f,b
  9413  00198A  33B7               	rrcf	(??___fttol+2)& (0+255),f,b
  9414  00198C  33B6               	rrcf	(??___fttol+1)& (0+255),f,b
  9415  00198E                     u4810:
  9416  00198E  0100               	movlb	0	; () banked
  9417  001990  2FB9               	decfsz	(??___fttol+4)& (0+255),f,b
  9418  001992  D7F8               	goto	u4815
  9419  001994  0100               	movlb	0	; () banked
  9420  001996  51B6               	movf	(??___fttol+1)& (0+255),w,b
  9421  001998  0100               	movlb	0	; () banked
  9422  00199A  6FBA               	movwf	___fttol@sign1& (0+255),b
  9423                           
  9424                           ; BSR set to: 0
  9425  00199C  0100               	movlb	0	; () banked
  9426  00199E  8FB2               	bsf	(___fttol@f1+1)& (0+255),7,b
  9427                           
  9428                           ; BSR set to: 0
  9429  0019A0  0EFF               	movlw	255
  9430  0019A2  0100               	movlb	0	; () banked
  9431  0019A4  17B1               	andwf	___fttol@f1& (0+255),f,b
  9432  0019A6  0EFF               	movlw	255
  9433  0019A8  0100               	movlb	0	; () banked
  9434  0019AA  17B2               	andwf	(___fttol@f1+1)& (0+255),f,b
  9435  0019AC  0E00               	movlw	0
  9436  0019AE  0100               	movlb	0	; () banked
  9437  0019B0  17B3               	andwf	(___fttol@f1+2)& (0+255),f,b
  9438                           
  9439                           ; BSR set to: 0
  9440  0019B2  0100               	movlb	0	; () banked
  9441  0019B4  51B1               	movf	___fttol@f1& (0+255),w,b
  9442  0019B6  0100               	movlb	0	; () banked
  9443  0019B8  6FBB               	movwf	___fttol@lval& (0+255),b
  9444  0019BA  0100               	movlb	0	; () banked
  9445  0019BC  51B2               	movf	(___fttol@f1+1)& (0+255),w,b
  9446  0019BE  0100               	movlb	0	; () banked
  9447  0019C0  6FBC               	movwf	(___fttol@lval+1)& (0+255),b
  9448  0019C2  0100               	movlb	0	; () banked
  9449  0019C4  51B3               	movf	(___fttol@f1+2)& (0+255),w,b
  9450  0019C6  0100               	movlb	0	; () banked
  9451  0019C8  6FBD               	movwf	(___fttol@lval+2)& (0+255),b
  9452  0019CA  0100               	movlb	0	; () banked
  9453  0019CC  6BBE               	clrf	(___fttol@lval+3)& (0+255),b
  9454                           
  9455                           ; BSR set to: 0
  9456  0019CE  0E8E               	movlw	142
  9457  0019D0  0100               	movlb	0	; () banked
  9458  0019D2  5FBF               	subwf	___fttol@exp1& (0+255),f,b
  9459                           
  9460                           ; BSR set to: 0
  9461  0019D4  0100               	movlb	0	; () banked
  9462  0019D6  AFBF               	btfss	___fttol@exp1& (0+255),7,b
  9463  0019D8  D01A               	goto	l5253
  9464                           
  9465                           ; BSR set to: 0
  9466  0019DA  0100               	movlb	0	; () banked
  9467  0019DC  51BF               	movf	___fttol@exp1& (0+255),w,b
  9468  0019DE  0A80               	xorlw	128
  9469  0019E0  0F8F               	addlw	143
  9470  0019E2  B0D8               	btfsc	status,0,c
  9471  0019E4  D00A               	goto	l5249
  9472                           
  9473                           ; BSR set to: 0
  9474  0019E6  0E00               	movlw	0
  9475  0019E8  0100               	movlb	0	; () banked
  9476  0019EA  6FB1               	movwf	?___fttol& (0+255),b
  9477  0019EC  0E00               	movlw	0
  9478  0019EE  6FB2               	movwf	(?___fttol+1)& (0+255),b
  9479  0019F0  0E00               	movlw	0
  9480  0019F2  6FB3               	movwf	(?___fttol+2)& (0+255),b
  9481  0019F4  0E00               	movlw	0
  9482  0019F6  6FB4               	movwf	(?___fttol+3)& (0+255),b
  9483                           
  9484                           ; BSR set to: 0
  9485  0019F8  0012               	return	
  9486  0019FA                     l5249:
  9487                           
  9488                           ; BSR set to: 0
  9489  0019FA  0100               	movlb	0	; () banked
  9490  0019FC  90D8               	bcf	status,0,c
  9491  0019FE  33BE               	rrcf	(___fttol@lval+3)& (0+255),f,b
  9492  001A00  33BD               	rrcf	(___fttol@lval+2)& (0+255),f,b
  9493  001A02  33BC               	rrcf	(___fttol@lval+1)& (0+255),f,b
  9494  001A04  33BB               	rrcf	___fttol@lval& (0+255),f,b
  9495                           
  9496                           ; BSR set to: 0
  9497  001A06  0100               	movlb	0	; () banked
  9498  001A08  3FBF               	incfsz	___fttol@exp1& (0+255),f,b
  9499  001A0A  D7F7               	goto	l5249
  9500                           
  9501                           ; BSR set to: 0
  9502  001A0C  D01B               	goto	l5263
  9503  001A0E                     l5253:
  9504                           
  9505                           ; BSR set to: 0
  9506  001A0E  0E17               	movlw	23
  9507  001A10  0100               	movlb	0	; () banked
  9508  001A12  65BF               	cpfsgt	___fttol@exp1& (0+255),b
  9509  001A14  D012               	goto	l5261
  9510                           
  9511                           ; BSR set to: 0
  9512  001A16  0E00               	movlw	0
  9513  001A18  0100               	movlb	0	; () banked
  9514  001A1A  6FB1               	movwf	?___fttol& (0+255),b
  9515  001A1C  0E00               	movlw	0
  9516  001A1E  6FB2               	movwf	(?___fttol+1)& (0+255),b
  9517  001A20  0E00               	movlw	0
  9518  001A22  6FB3               	movwf	(?___fttol+2)& (0+255),b
  9519  001A24  0E00               	movlw	0
  9520  001A26  6FB4               	movwf	(?___fttol+3)& (0+255),b
  9521                           
  9522                           ; BSR set to: 0
  9523  001A28  0012               	return	
  9524  001A2A                     l5259:
  9525                           
  9526                           ; BSR set to: 0
  9527  001A2A  0100               	movlb	0	; () banked
  9528  001A2C  90D8               	bcf	status,0,c
  9529  001A2E  37BB               	rlcf	___fttol@lval& (0+255),f,b
  9530  001A30  37BC               	rlcf	(___fttol@lval+1)& (0+255),f,b
  9531  001A32  37BD               	rlcf	(___fttol@lval+2)& (0+255),f,b
  9532  001A34  37BE               	rlcf	(___fttol@lval+3)& (0+255),f,b
  9533  001A36  0100               	movlb	0	; () banked
  9534  001A38  07BF               	decf	___fttol@exp1& (0+255),f,b
  9535  001A3A                     l5261:
  9536                           
  9537                           ; BSR set to: 0
  9538  001A3A  0100               	movlb	0	; () banked
  9539  001A3C  51BF               	movf	___fttol@exp1& (0+255),w,b
  9540  001A3E  0100               	movlb	0	; () banked
  9541  001A40  A4D8               	btfss	status,2,c
  9542  001A42  D7F3               	goto	l5259
  9543  001A44                     l5263:
  9544                           
  9545                           ; BSR set to: 0
  9546  001A44  0100               	movlb	0	; () banked
  9547  001A46  51BA               	movf	___fttol@sign1& (0+255),w,b
  9548  001A48  0100               	movlb	0	; () banked
  9549  001A4A  B4D8               	btfsc	status,2,c
  9550  001A4C  D009               	goto	l5267
  9551                           
  9552                           ; BSR set to: 0
  9553  001A4E  0100               	movlb	0	; () banked
  9554  001A50  1FBE               	comf	(___fttol@lval+3)& (0+255),f,b
  9555  001A52  1FBD               	comf	(___fttol@lval+2)& (0+255),f,b
  9556  001A54  1FBC               	comf	(___fttol@lval+1)& (0+255),f,b
  9557  001A56  6DBB               	negf	___fttol@lval& (0+255),b
  9558  001A58  0E00               	movlw	0
  9559  001A5A  23BC               	addwfc	(___fttol@lval+1)& (0+255),f,b
  9560  001A5C  23BD               	addwfc	(___fttol@lval+2)& (0+255),f,b
  9561  001A5E  23BE               	addwfc	(___fttol@lval+3)& (0+255),f,b
  9562  001A60                     l5267:
  9563                           
  9564                           ; BSR set to: 0
  9565  001A60  C0BB  F0B1         	movff	___fttol@lval,?___fttol
  9566  001A64  C0BC  F0B2         	movff	___fttol@lval+1,?___fttol+1
  9567  001A68  C0BD  F0B3         	movff	___fttol@lval+2,?___fttol+2
  9568  001A6C  C0BE  F0B4         	movff	___fttol@lval+3,?___fttol+3
  9569  001A70  0012               	return	
  9570  001A72                     __end_of___fttol:
  9571                           	opt stack 0
  9572                           tblptru	equ	0xFF8
  9573                           tblptrh	equ	0xFF7
  9574                           tblptrl	equ	0xFF6
  9575                           tablat	equ	0xFF5
  9576                           prodh	equ	0xFF4
  9577                           prodl	equ	0xFF3
  9578                           intcon	equ	0xFF2
  9579                           postinc0	equ	0xFEE
  9580                           wreg	equ	0xFE8
  9581                           postdec1	equ	0xFE5
  9582                           plusw1	equ	0xFE3
  9583                           fsr1l	equ	0xFE1
  9584                           indf2	equ	0xFDF
  9585                           postinc2	equ	0xFDE
  9586                           postdec2	equ	0xFDD
  9587                           plusw2	equ	0xFDB
  9588                           fsr2h	equ	0xFDA
  9589                           fsr2l	equ	0xFD9
  9590                           status	equ	0xFD8
  9591                           
  9592 ;; *************** function ___ftsub *****************
  9593 ;; Defined at:
  9594 ;;		line 20 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftsub.c"
  9595 ;; Parameters:    Size  Location     Type
  9596 ;;  f1              3   49[BANK0 ] float 
  9597 ;;  f2              3   52[BANK0 ] float 
  9598 ;; Auto vars:     Size  Location     Type
  9599 ;;		None
  9600 ;; Return value:  Size  Location     Type
  9601 ;;                  3   49[BANK0 ] float 
  9602 ;; Registers used:
  9603 ;;		wreg, status,2, status,0, cstack
  9604 ;; Tracked objects:
  9605 ;;		On entry : 0/0
  9606 ;;		On exit  : 0/0
  9607 ;;		Unchanged: 0/0
  9608 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9609 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9610 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9611 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9612 ;;      Totals:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9613 ;;Total ram usage:        6 bytes
  9614 ;; Hardware stack levels used:    1
  9615 ;; Hardware stack levels required when called:    5
  9616 ;; This function calls:
  9617 ;;		___ftadd
  9618 ;; This function is called by:
  9619 ;;		_printf
  9620 ;; This function uses a non-reentrant model
  9621 ;;
  9622                           
  9623                           	psect	text45
  9624  002A18                     __ptext45:
  9625                           	opt stack 0
  9626  002A18                     ___ftsub:
  9627                           	opt stack 23
  9628                           
  9629                           ; BSR set to: 0
  9630                           ;incstack = 0
  9631  002A18  0100               	movlb	0	; () banked
  9632  002A1A  51B4               	movf	___ftsub@f2& (0+255),w,b
  9633  002A1C  0100               	movlb	0	; () banked
  9634  002A1E  11B5               	iorwf	(___ftsub@f2+1)& (0+255),w,b
  9635  002A20  0100               	movlb	0	; () banked
  9636  002A22  11B6               	iorwf	(___ftsub@f2+2)& (0+255),w,b
  9637  002A24  B4D8               	btfsc	status,2,c
  9638  002A26  D009               	goto	l5467
  9639                           
  9640                           ; BSR set to: 0
  9641  002A28  0E00               	movlw	0
  9642  002A2A  0100               	movlb	0	; () banked
  9643  002A2C  1BB4               	xorwf	___ftsub@f2& (0+255),f,b
  9644  002A2E  0E00               	movlw	0
  9645  002A30  0100               	movlb	0	; () banked
  9646  002A32  1BB5               	xorwf	(___ftsub@f2+1)& (0+255),f,b
  9647  002A34  0E80               	movlw	128
  9648  002A36  0100               	movlb	0	; () banked
  9649  002A38  1BB6               	xorwf	(___ftsub@f2+2)& (0+255),f,b
  9650  002A3A                     l5467:
  9651                           
  9652                           ; BSR set to: 0
  9653  002A3A  C0B1  F0A5         	movff	___ftsub@f1,___ftadd@f1
  9654  002A3E  C0B2  F0A6         	movff	___ftsub@f1+1,___ftadd@f1+1
  9655  002A42  C0B3  F0A7         	movff	___ftsub@f1+2,___ftadd@f1+2
  9656  002A46  C0B4  F0A8         	movff	___ftsub@f2,___ftadd@f2
  9657  002A4A  C0B5  F0A9         	movff	___ftsub@f2+1,___ftadd@f2+1
  9658  002A4E  C0B6  F0AA         	movff	___ftsub@f2+2,___ftadd@f2+2
  9659  002A52  ECEB  F007         	call	___ftadd	;wreg free
  9660  002A56  C0A5  F0B1         	movff	?___ftadd,?___ftsub
  9661  002A5A  C0A6  F0B2         	movff	?___ftadd+1,?___ftsub+1
  9662  002A5E  C0A7  F0B3         	movff	?___ftadd+2,?___ftsub+2
  9663  002A62  0012               	return	
  9664  002A64                     __end_of___ftsub:
  9665                           	opt stack 0
  9666                           tblptru	equ	0xFF8
  9667                           tblptrh	equ	0xFF7
  9668                           tblptrl	equ	0xFF6
  9669                           tablat	equ	0xFF5
  9670                           prodh	equ	0xFF4
  9671                           prodl	equ	0xFF3
  9672                           intcon	equ	0xFF2
  9673                           postinc0	equ	0xFEE
  9674                           wreg	equ	0xFE8
  9675                           postdec1	equ	0xFE5
  9676                           plusw1	equ	0xFE3
  9677                           fsr1l	equ	0xFE1
  9678                           indf2	equ	0xFDF
  9679                           postinc2	equ	0xFDE
  9680                           postdec2	equ	0xFDD
  9681                           plusw2	equ	0xFDB
  9682                           fsr2h	equ	0xFDA
  9683                           fsr2l	equ	0xFD9
  9684                           status	equ	0xFD8
  9685                           
  9686 ;; *************** function ___ftadd *****************
  9687 ;; Defined at:
  9688 ;;		line 86 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftadd.c"
  9689 ;; Parameters:    Size  Location     Type
  9690 ;;  f1              3   37[BANK0 ] float 
  9691 ;;  f2              3   40[BANK0 ] float 
  9692 ;; Auto vars:     Size  Location     Type
  9693 ;;  exp1            1   48[BANK0 ] unsigned char 
  9694 ;;  exp2            1   47[BANK0 ] unsigned char 
  9695 ;;  sign            1   46[BANK0 ] unsigned char 
  9696 ;; Return value:  Size  Location     Type
  9697 ;;                  3   37[BANK0 ] float 
  9698 ;; Registers used:
  9699 ;;		wreg, status,2, status,0, cstack
  9700 ;; Tracked objects:
  9701 ;;		On entry : 0/0
  9702 ;;		On exit  : 0/0
  9703 ;;		Unchanged: 0/0
  9704 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
  9705 ;;      Params:         0       6       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9706 ;;      Locals:         0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9707 ;;      Temps:          0       3       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9708 ;;      Totals:         0      12       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
  9709 ;;Total ram usage:       12 bytes
  9710 ;; Hardware stack levels used:    1
  9711 ;; Hardware stack levels required when called:    4
  9712 ;; This function calls:
  9713 ;;		___ftpack
  9714 ;; This function is called by:
  9715 ;;		_angleToPulse
  9716 ;;		_printf
  9717 ;;		___ftsub
  9718 ;; This function uses a non-reentrant model
  9719 ;;
  9720                           
  9721                           	psect	text46
  9722  000FD6                     __ptext46:
  9723                           	opt stack 0
  9724  000FD6                     ___ftadd:
  9725                           	opt stack 23
  9726                           
  9727                           ;incstack = 0
  9728  000FD6  C0A7  F0AB         	movff	___ftadd@f1+2,??___ftadd
  9729  000FDA  0100               	movlb	0	; () banked
  9730  000FDC  6BAC               	clrf	(??___ftadd+1)& (0+255),b
  9731  000FDE  6BAD               	clrf	(??___ftadd+2)& (0+255),b
  9732  000FE0  0100               	movlb	0	; () banked
  9733  000FE2  35A6               	rlcf	(___ftadd@f1+1)& (0+255),w,b
  9734  000FE4  0100               	movlb	0	; () banked
  9735  000FE6  37AB               	rlcf	??___ftadd& (0+255),f,b
  9736  000FE8  E301               	bnc	u4341
  9737  000FEA  81AC               	bsf	(??___ftadd+1)& (0+255),0,b
  9738  000FEC                     u4341:
  9739  000FEC  0100               	movlb	0	; () banked
  9740  000FEE  51AB               	movf	??___ftadd& (0+255),w,b
  9741  000FF0  0100               	movlb	0	; () banked
  9742  000FF2  6FB0               	movwf	___ftadd@exp1& (0+255),b
  9743  000FF4  C0AA  F0AB         	movff	___ftadd@f2+2,??___ftadd
  9744  000FF8  0100               	movlb	0	; () banked
  9745  000FFA  6BAC               	clrf	(??___ftadd+1)& (0+255),b
  9746  000FFC  6BAD               	clrf	(??___ftadd+2)& (0+255),b
  9747  000FFE  0100               	movlb	0	; () banked
  9748  001000  35A9               	rlcf	(___ftadd@f2+1)& (0+255),w,b
  9749  001002  0100               	movlb	0	; () banked
  9750  001004  37AB               	rlcf	??___ftadd& (0+255),f,b
  9751  001006  E301               	bnc	u4351
  9752  001008  81AC               	bsf	(??___ftadd+1)& (0+255),0,b
  9753  00100A                     u4351:
  9754  00100A  0100               	movlb	0	; () banked
  9755  00100C  51AB               	movf	??___ftadd& (0+255),w,b
  9756  00100E  0100               	movlb	0	; () banked
  9757  001010  6FAF               	movwf	___ftadd@exp2& (0+255),b
  9758                           
  9759                           ; BSR set to: 0
  9760  001012  0100               	movlb	0	; () banked
  9761  001014  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9762  001016  0100               	movlb	0	; () banked
  9763  001018  B4D8               	btfsc	status,2,c
  9764  00101A  D011               	goto	l1006
  9765                           
  9766                           ; BSR set to: 0
  9767  00101C  0100               	movlb	0	; () banked
  9768  00101E  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9769  001020  0100               	movlb	0	; () banked
  9770  001022  5DB0               	subwf	___ftadd@exp1& (0+255),w,b
  9771  001024  B0D8               	btfsc	status,0,c
  9772  001026  D012               	goto	l4977
  9773                           
  9774                           ; BSR set to: 0
  9775  001028  0100               	movlb	0	; () banked
  9776  00102A  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9777  00102C  0800               	sublw	0
  9778  00102E  0100               	movlb	0	; () banked
  9779  001030  25AF               	addwf	___ftadd@exp2& (0+255),w,b
  9780  001032  0100               	movlb	0	; () banked
  9781  001034  6FAB               	movwf	??___ftadd& (0+255),b
  9782  001036  0E18               	movlw	24
  9783  001038  0100               	movlb	0	; () banked
  9784  00103A  65AB               	cpfsgt	??___ftadd& (0+255),b
  9785  00103C  D007               	goto	l4977
  9786  00103E                     l1006:
  9787                           
  9788                           ; BSR set to: 0
  9789  00103E  C0A8  F0A5         	movff	___ftadd@f2,?___ftadd
  9790  001042  C0A9  F0A6         	movff	___ftadd@f2+1,?___ftadd+1
  9791  001046  C0AA  F0A7         	movff	___ftadd@f2+2,?___ftadd+2
  9792  00104A  0012               	return	
  9793  00104C                     l4977:
  9794                           
  9795                           ; BSR set to: 0
  9796  00104C  0100               	movlb	0	; () banked
  9797  00104E  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9798  001050  0100               	movlb	0	; () banked
  9799  001052  B4D8               	btfsc	status,2,c
  9800  001054  D011               	goto	l1010
  9801                           
  9802                           ; BSR set to: 0
  9803  001056  0100               	movlb	0	; () banked
  9804  001058  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9805  00105A  0100               	movlb	0	; () banked
  9806  00105C  5DAF               	subwf	___ftadd@exp2& (0+255),w,b
  9807  00105E  B0D8               	btfsc	status,0,c
  9808  001060  D012               	goto	l4983
  9809                           
  9810                           ; BSR set to: 0
  9811  001062  0100               	movlb	0	; () banked
  9812  001064  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9813  001066  0800               	sublw	0
  9814  001068  0100               	movlb	0	; () banked
  9815  00106A  25B0               	addwf	___ftadd@exp1& (0+255),w,b
  9816  00106C  0100               	movlb	0	; () banked
  9817  00106E  6FAB               	movwf	??___ftadd& (0+255),b
  9818  001070  0E18               	movlw	24
  9819  001072  0100               	movlb	0	; () banked
  9820  001074  65AB               	cpfsgt	??___ftadd& (0+255),b
  9821  001076  D007               	goto	l4983
  9822  001078                     l1010:
  9823                           
  9824                           ; BSR set to: 0
  9825  001078  C0A5  F0A5         	movff	___ftadd@f1,?___ftadd
  9826  00107C  C0A6  F0A6         	movff	___ftadd@f1+1,?___ftadd+1
  9827  001080  C0A7  F0A7         	movff	___ftadd@f1+2,?___ftadd+2
  9828  001084  0012               	return	
  9829  001086                     l4983:
  9830                           
  9831                           ; BSR set to: 0
  9832  001086  0E06               	movlw	6
  9833  001088  0100               	movlb	0	; () banked
  9834  00108A  6FAE               	movwf	___ftadd@sign& (0+255),b
  9835                           
  9836                           ; BSR set to: 0
  9837  00108C  0100               	movlb	0	; () banked
  9838  00108E  AFA7               	btfss	(___ftadd@f1+2)& (0+255),7,b
  9839  001090  D002               	goto	l4989
  9840                           
  9841                           ; BSR set to: 0
  9842  001092  0100               	movlb	0	; () banked
  9843  001094  8FAE               	bsf	___ftadd@sign& (0+255),7,b
  9844  001096                     l4989:
  9845                           
  9846                           ; BSR set to: 0
  9847  001096  0100               	movlb	0	; () banked
  9848  001098  AFAA               	btfss	(___ftadd@f2+2)& (0+255),7,b
  9849  00109A  D002               	goto	l1012
  9850                           
  9851                           ; BSR set to: 0
  9852  00109C  0100               	movlb	0	; () banked
  9853  00109E  8DAE               	bsf	___ftadd@sign& (0+255),6,b
  9854  0010A0                     l1012:
  9855                           
  9856                           ; BSR set to: 0
  9857  0010A0  0100               	movlb	0	; () banked
  9858  0010A2  8FA6               	bsf	(___ftadd@f1+1)& (0+255),7,b
  9859                           
  9860                           ; BSR set to: 0
  9861  0010A4  0EFF               	movlw	255
  9862  0010A6  0100               	movlb	0	; () banked
  9863  0010A8  17A5               	andwf	___ftadd@f1& (0+255),f,b
  9864  0010AA  0EFF               	movlw	255
  9865  0010AC  0100               	movlb	0	; () banked
  9866  0010AE  17A6               	andwf	(___ftadd@f1+1)& (0+255),f,b
  9867  0010B0  0E00               	movlw	0
  9868  0010B2  0100               	movlb	0	; () banked
  9869  0010B4  17A7               	andwf	(___ftadd@f1+2)& (0+255),f,b
  9870  0010B6  0100               	movlb	0	; () banked
  9871  0010B8  8FA9               	bsf	(___ftadd@f2+1)& (0+255),7,b
  9872                           
  9873                           ; BSR set to: 0
  9874  0010BA  0EFF               	movlw	255
  9875  0010BC  0100               	movlb	0	; () banked
  9876  0010BE  17A8               	andwf	___ftadd@f2& (0+255),f,b
  9877  0010C0  0EFF               	movlw	255
  9878  0010C2  0100               	movlb	0	; () banked
  9879  0010C4  17A9               	andwf	(___ftadd@f2+1)& (0+255),f,b
  9880  0010C6  0E00               	movlw	0
  9881  0010C8  0100               	movlb	0	; () banked
  9882  0010CA  17AA               	andwf	(___ftadd@f2+2)& (0+255),f,b
  9883                           
  9884                           ; BSR set to: 0
  9885  0010CC  0100               	movlb	0	; () banked
  9886  0010CE  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9887  0010D0  0100               	movlb	0	; () banked
  9888  0010D2  5DB0               	subwf	___ftadd@exp1& (0+255),w,b
  9889  0010D4  B0D8               	btfsc	status,0,c
  9890  0010D6  D025               	goto	l5009
  9891  0010D8                     l4999:
  9892                           
  9893                           ; BSR set to: 0
  9894  0010D8  0100               	movlb	0	; () banked
  9895  0010DA  90D8               	bcf	status,0,c
  9896  0010DC  37A8               	rlcf	___ftadd@f2& (0+255),f,b
  9897  0010DE  37A9               	rlcf	(___ftadd@f2+1)& (0+255),f,b
  9898  0010E0  37AA               	rlcf	(___ftadd@f2+2)& (0+255),f,b
  9899  0010E2  0100               	movlb	0	; () banked
  9900  0010E4  07AF               	decf	___ftadd@exp2& (0+255),f,b
  9901                           
  9902                           ; BSR set to: 0
  9903  0010E6  0100               	movlb	0	; () banked
  9904  0010E8  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9905  0010EA  0100               	movlb	0	; () banked
  9906  0010EC  19AF               	xorwf	___ftadd@exp2& (0+255),w,b
  9907  0010EE  B4D8               	btfsc	status,2,c
  9908  0010F0  D011               	goto	l5007
  9909                           
  9910                           ; BSR set to: 0
  9911  0010F2  0100               	movlb	0	; () banked
  9912  0010F4  07AE               	decf	___ftadd@sign& (0+255),f,b
  9913  0010F6  C0AE  F0AB         	movff	___ftadd@sign,??___ftadd
  9914  0010FA  0E07               	movlw	7
  9915  0010FC  0100               	movlb	0	; () banked
  9916  0010FE  17AB               	andwf	??___ftadd& (0+255),f,b
  9917  001100  B4D8               	btfsc	status,2,c
  9918  001102  D008               	goto	l5007
  9919  001104  D7E9               	goto	l4999
  9920  001106                     l5005:
  9921                           
  9922                           ; BSR set to: 0
  9923  001106  0100               	movlb	0	; () banked
  9924  001108  90D8               	bcf	status,0,c
  9925  00110A  33A7               	rrcf	(___ftadd@f1+2)& (0+255),f,b
  9926  00110C  33A6               	rrcf	(___ftadd@f1+1)& (0+255),f,b
  9927  00110E  33A5               	rrcf	___ftadd@f1& (0+255),f,b
  9928  001110  0100               	movlb	0	; () banked
  9929  001112  2BB0               	incf	___ftadd@exp1& (0+255),f,b
  9930  001114                     l5007:
  9931                           
  9932                           ; BSR set to: 0
  9933  001114  0100               	movlb	0	; () banked
  9934  001116  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9935  001118  0100               	movlb	0	; () banked
  9936  00111A  19B0               	xorwf	___ftadd@exp1& (0+255),w,b
  9937  00111C  B4D8               	btfsc	status,2,c
  9938  00111E  D02B               	goto	l1021
  9939  001120  D7F2               	goto	l5005
  9940  001122                     l5009:
  9941                           
  9942                           ; BSR set to: 0
  9943  001122  0100               	movlb	0	; () banked
  9944  001124  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9945  001126  0100               	movlb	0	; () banked
  9946  001128  5DAF               	subwf	___ftadd@exp2& (0+255),w,b
  9947  00112A  B0D8               	btfsc	status,0,c
  9948  00112C  D024               	goto	l1021
  9949  00112E                     l5011:
  9950                           
  9951                           ; BSR set to: 0
  9952  00112E  0100               	movlb	0	; () banked
  9953  001130  90D8               	bcf	status,0,c
  9954  001132  37A5               	rlcf	___ftadd@f1& (0+255),f,b
  9955  001134  37A6               	rlcf	(___ftadd@f1+1)& (0+255),f,b
  9956  001136  37A7               	rlcf	(___ftadd@f1+2)& (0+255),f,b
  9957  001138  0100               	movlb	0	; () banked
  9958  00113A  07B0               	decf	___ftadd@exp1& (0+255),f,b
  9959                           
  9960                           ; BSR set to: 0
  9961  00113C  0100               	movlb	0	; () banked
  9962  00113E  51B0               	movf	___ftadd@exp1& (0+255),w,b
  9963  001140  0100               	movlb	0	; () banked
  9964  001142  19AF               	xorwf	___ftadd@exp2& (0+255),w,b
  9965  001144  B4D8               	btfsc	status,2,c
  9966  001146  D011               	goto	l5019
  9967                           
  9968                           ; BSR set to: 0
  9969  001148  0100               	movlb	0	; () banked
  9970  00114A  07AE               	decf	___ftadd@sign& (0+255),f,b
  9971  00114C  C0AE  F0AB         	movff	___ftadd@sign,??___ftadd
  9972  001150  0E07               	movlw	7
  9973  001152  0100               	movlb	0	; () banked
  9974  001154  17AB               	andwf	??___ftadd& (0+255),f,b
  9975  001156  B4D8               	btfsc	status,2,c
  9976  001158  D008               	goto	l5019
  9977  00115A  D7E9               	goto	l5011
  9978  00115C                     l5017:
  9979                           
  9980                           ; BSR set to: 0
  9981  00115C  0100               	movlb	0	; () banked
  9982  00115E  90D8               	bcf	status,0,c
  9983  001160  33AA               	rrcf	(___ftadd@f2+2)& (0+255),f,b
  9984  001162  33A9               	rrcf	(___ftadd@f2+1)& (0+255),f,b
  9985  001164  33A8               	rrcf	___ftadd@f2& (0+255),f,b
  9986  001166  0100               	movlb	0	; () banked
  9987  001168  2BAF               	incf	___ftadd@exp2& (0+255),f,b
  9988  00116A                     l5019:
  9989                           
  9990                           ; BSR set to: 0
  9991  00116A  0100               	movlb	0	; () banked
  9992  00116C  51AF               	movf	___ftadd@exp2& (0+255),w,b
  9993  00116E  0100               	movlb	0	; () banked
  9994  001170  19B0               	xorwf	___ftadd@exp1& (0+255),w,b
  9995  001172  A4D8               	btfss	status,2,c
  9996  001174  D7F3               	goto	l5017
  9997  001176                     l1021:
  9998                           
  9999                           ; BSR set to: 0
 10000  001176  0100               	movlb	0	; () banked
 10001  001178  AFAE               	btfss	___ftadd@sign& (0+255),7,b
 10002  00117A  D012               	goto	l1030
 10003                           
 10004                           ; BSR set to: 0
 10005  00117C  0EFF               	movlw	255
 10006  00117E  0100               	movlb	0	; () banked
 10007  001180  1BA5               	xorwf	___ftadd@f1& (0+255),f,b
 10008  001182  0EFF               	movlw	255
 10009  001184  0100               	movlb	0	; () banked
 10010  001186  1BA6               	xorwf	(___ftadd@f1+1)& (0+255),f,b
 10011  001188  0EFF               	movlw	255
 10012  00118A  0100               	movlb	0	; () banked
 10013  00118C  1BA7               	xorwf	(___ftadd@f1+2)& (0+255),f,b
 10014  00118E  0E01               	movlw	1
 10015  001190  0100               	movlb	0	; () banked
 10016  001192  27A5               	addwf	___ftadd@f1& (0+255),f,b
 10017  001194  0E00               	movlw	0
 10018  001196  0100               	movlb	0	; () banked
 10019  001198  23A6               	addwfc	(___ftadd@f1+1)& (0+255),f,b
 10020  00119A  0E00               	movlw	0
 10021  00119C  0100               	movlb	0	; () banked
 10022  00119E  23A7               	addwfc	(___ftadd@f1+2)& (0+255),f,b
 10023  0011A0                     l1030:
 10024                           
 10025                           ; BSR set to: 0
 10026  0011A0  0100               	movlb	0	; () banked
 10027  0011A2  ADAE               	btfss	___ftadd@sign& (0+255),6,b
 10028  0011A4  D012               	goto	l5025
 10029                           
 10030                           ; BSR set to: 0
 10031  0011A6  0EFF               	movlw	255
 10032  0011A8  0100               	movlb	0	; () banked
 10033  0011AA  1BA8               	xorwf	___ftadd@f2& (0+255),f,b
 10034  0011AC  0EFF               	movlw	255
 10035  0011AE  0100               	movlb	0	; () banked
 10036  0011B0  1BA9               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10037  0011B2  0EFF               	movlw	255
 10038  0011B4  0100               	movlb	0	; () banked
 10039  0011B6  1BAA               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10040  0011B8  0E01               	movlw	1
 10041  0011BA  0100               	movlb	0	; () banked
 10042  0011BC  27A8               	addwf	___ftadd@f2& (0+255),f,b
 10043  0011BE  0E00               	movlw	0
 10044  0011C0  0100               	movlb	0	; () banked
 10045  0011C2  23A9               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10046  0011C4  0E00               	movlw	0
 10047  0011C6  0100               	movlb	0	; () banked
 10048  0011C8  23AA               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10049  0011CA                     l5025:
 10050                           
 10051                           ; BSR set to: 0
 10052  0011CA  0E00               	movlw	0
 10053  0011CC  0100               	movlb	0	; () banked
 10054  0011CE  6FAE               	movwf	___ftadd@sign& (0+255),b
 10055                           
 10056                           ; BSR set to: 0
 10057  0011D0  0100               	movlb	0	; () banked
 10058  0011D2  51A5               	movf	___ftadd@f1& (0+255),w,b
 10059  0011D4  0100               	movlb	0	; () banked
 10060  0011D6  27A8               	addwf	___ftadd@f2& (0+255),f,b
 10061  0011D8  0100               	movlb	0	; () banked
 10062  0011DA  51A6               	movf	(___ftadd@f1+1)& (0+255),w,b
 10063  0011DC  0100               	movlb	0	; () banked
 10064  0011DE  23A9               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10065  0011E0  0100               	movlb	0	; () banked
 10066  0011E2  51A7               	movf	(___ftadd@f1+2)& (0+255),w,b
 10067  0011E4  0100               	movlb	0	; () banked
 10068  0011E6  23AA               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10069                           
 10070                           ; BSR set to: 0
 10071  0011E8  0100               	movlb	0	; () banked
 10072  0011EA  AFAA               	btfss	(___ftadd@f2+2)& (0+255),7,b
 10073  0011EC  D015               	goto	l5035
 10074                           
 10075                           ; BSR set to: 0
 10076  0011EE  0EFF               	movlw	255
 10077  0011F0  0100               	movlb	0	; () banked
 10078  0011F2  1BA8               	xorwf	___ftadd@f2& (0+255),f,b
 10079  0011F4  0EFF               	movlw	255
 10080  0011F6  0100               	movlb	0	; () banked
 10081  0011F8  1BA9               	xorwf	(___ftadd@f2+1)& (0+255),f,b
 10082  0011FA  0EFF               	movlw	255
 10083  0011FC  0100               	movlb	0	; () banked
 10084  0011FE  1BAA               	xorwf	(___ftadd@f2+2)& (0+255),f,b
 10085  001200  0E01               	movlw	1
 10086  001202  0100               	movlb	0	; () banked
 10087  001204  27A8               	addwf	___ftadd@f2& (0+255),f,b
 10088  001206  0E00               	movlw	0
 10089  001208  0100               	movlb	0	; () banked
 10090  00120A  23A9               	addwfc	(___ftadd@f2+1)& (0+255),f,b
 10091  00120C  0E00               	movlw	0
 10092  00120E  0100               	movlb	0	; () banked
 10093  001210  23AA               	addwfc	(___ftadd@f2+2)& (0+255),f,b
 10094                           
 10095                           ; BSR set to: 0
 10096  001212  0E01               	movlw	1
 10097  001214  0100               	movlb	0	; () banked
 10098  001216  6FAE               	movwf	___ftadd@sign& (0+255),b
 10099  001218                     l5035:
 10100                           
 10101                           ; BSR set to: 0
 10102  001218  C0A8  F024         	movff	___ftadd@f2,___ftpack@arg
 10103  00121C  C0A9  F025         	movff	___ftadd@f2+1,___ftpack@arg+1
 10104  001220  C0AA  F026         	movff	___ftadd@f2+2,___ftpack@arg+2
 10105  001224  C0B0  F027         	movff	___ftadd@exp1,___ftpack@exp
 10106  001228  C0AE  F028         	movff	___ftadd@sign,___ftpack@sign
 10107  00122C  ECA3  F010         	call	___ftpack	;wreg free
 10108  001230  C024  F0A5         	movff	?___ftpack,?___ftadd
 10109  001234  C025  F0A6         	movff	?___ftpack+1,?___ftadd+1
 10110  001238  C026  F0A7         	movff	?___ftpack+2,?___ftadd+2
 10111  00123C  0012               	return	
 10112  00123E                     __end_of___ftadd:
 10113                           	opt stack 0
 10114                           tblptru	equ	0xFF8
 10115                           tblptrh	equ	0xFF7
 10116                           tblptrl	equ	0xFF6
 10117                           tablat	equ	0xFF5
 10118                           prodh	equ	0xFF4
 10119                           prodl	equ	0xFF3
 10120                           intcon	equ	0xFF2
 10121                           postinc0	equ	0xFEE
 10122                           wreg	equ	0xFE8
 10123                           postdec1	equ	0xFE5
 10124                           plusw1	equ	0xFE3
 10125                           fsr1l	equ	0xFE1
 10126                           indf2	equ	0xFDF
 10127                           postinc2	equ	0xFDE
 10128                           postdec2	equ	0xFDD
 10129                           plusw2	equ	0xFDB
 10130                           fsr2h	equ	0xFDA
 10131                           fsr2l	equ	0xFD9
 10132                           status	equ	0xFD8
 10133                           
 10134 ;; *************** function ___ftpack *****************
 10135 ;; Defined at:
 10136 ;;		line 62 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\float.c"
 10137 ;; Parameters:    Size  Location     Type
 10138 ;;  arg             3   35[COMRAM] unsigned um
 10139 ;;  exp             1   38[COMRAM] unsigned char 
 10140 ;;  sign            1   39[COMRAM] unsigned char 
 10141 ;; Auto vars:     Size  Location     Type
 10142 ;;		None
 10143 ;; Return value:  Size  Location     Type
 10144 ;;                  3   35[COMRAM] float 
 10145 ;; Registers used:
 10146 ;;		wreg, status,2, status,0
 10147 ;; Tracked objects:
 10148 ;;		On entry : 0/0
 10149 ;;		On exit  : 0/0
 10150 ;;		Unchanged: 0/0
 10151 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10152 ;;      Params:         5       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10153 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10154 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10155 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10156 ;;Total ram usage:        8 bytes
 10157 ;; Hardware stack levels used:    1
 10158 ;; Hardware stack levels required when called:    3
 10159 ;; This function calls:
 10160 ;;		Nothing
 10161 ;; This function is called by:
 10162 ;;		___altoft
 10163 ;;		___awtoft
 10164 ;;		___ftadd
 10165 ;;		___ftdiv
 10166 ;;		___ftmul
 10167 ;;		___lltoft
 10168 ;; This function uses a non-reentrant model
 10169 ;;
 10170                           
 10171                           	psect	text47
 10172  002146                     __ptext47:
 10173                           	opt stack 0
 10174  002146                     ___ftpack:
 10175                           	opt stack 23
 10176                           
 10177                           ;incstack = 0
 10178  002146  5027               	movf	___ftpack@exp,w,c
 10179  002148  B4D8               	btfsc	status,2,c
 10180  00214A  D005               	goto	l4913
 10181  00214C  5024               	movf	___ftpack@arg,w,c
 10182  00214E  1025               	iorwf	___ftpack@arg+1,w,c
 10183  002150  1026               	iorwf	___ftpack@arg+2,w,c
 10184  002152  A4D8               	btfss	status,2,c
 10185  002154  D00C               	goto	l4919
 10186  002156                     l4913:
 10187  002156  0E00               	movlw	0
 10188  002158  6E24               	movwf	?___ftpack,c
 10189  00215A  0E00               	movlw	0
 10190  00215C  6E25               	movwf	?___ftpack+1,c
 10191  00215E  0E00               	movlw	0
 10192  002160  6E26               	movwf	?___ftpack+2,c
 10193  002162  0012               	return	
 10194  002164                     l4917:
 10195  002164  2A27               	incf	___ftpack@exp,f,c
 10196  002166  90D8               	bcf	status,0,c
 10197  002168  3226               	rrcf	___ftpack@arg+2,f,c
 10198  00216A  3225               	rrcf	___ftpack@arg+1,f,c
 10199  00216C  3224               	rrcf	___ftpack@arg,f,c
 10200  00216E                     l4919:
 10201  00216E  0E00               	movlw	0
 10202  002170  1424               	andwf	___ftpack@arg,w,c
 10203  002172  6E29               	movwf	??___ftpack& (0+255),c
 10204  002174  0E00               	movlw	0
 10205  002176  1425               	andwf	___ftpack@arg+1,w,c
 10206  002178  6E2A               	movwf	(??___ftpack+1)& (0+255),c
 10207  00217A  0EFE               	movlw	254
 10208  00217C  1426               	andwf	___ftpack@arg+2,w,c
 10209  00217E  6E2B               	movwf	(??___ftpack+2)& (0+255),c
 10210  002180  5029               	movf	??___ftpack,w,c
 10211  002182  102A               	iorwf	??___ftpack+1,w,c
 10212  002184  102B               	iorwf	??___ftpack+2,w,c
 10213  002186  B4D8               	btfsc	status,2,c
 10214  002188  D00C               	goto	l4925
 10215  00218A  D7EC               	goto	l4917
 10216  00218C                     l4921:
 10217  00218C  2A27               	incf	___ftpack@exp,f,c
 10218  00218E  0E01               	movlw	1
 10219  002190  2624               	addwf	___ftpack@arg,f,c
 10220  002192  0E00               	movlw	0
 10221  002194  2225               	addwfc	___ftpack@arg+1,f,c
 10222  002196  0E00               	movlw	0
 10223  002198  2226               	addwfc	___ftpack@arg+2,f,c
 10224  00219A  90D8               	bcf	status,0,c
 10225  00219C  3226               	rrcf	___ftpack@arg+2,f,c
 10226  00219E  3225               	rrcf	___ftpack@arg+1,f,c
 10227  0021A0  3224               	rrcf	___ftpack@arg,f,c
 10228  0021A2                     l4925:
 10229  0021A2  0E00               	movlw	0
 10230  0021A4  1424               	andwf	___ftpack@arg,w,c
 10231  0021A6  6E29               	movwf	??___ftpack& (0+255),c
 10232  0021A8  0E00               	movlw	0
 10233  0021AA  1425               	andwf	___ftpack@arg+1,w,c
 10234  0021AC  6E2A               	movwf	(??___ftpack+1)& (0+255),c
 10235  0021AE  0EFF               	movlw	255
 10236  0021B0  1426               	andwf	___ftpack@arg+2,w,c
 10237  0021B2  6E2B               	movwf	(??___ftpack+2)& (0+255),c
 10238  0021B4  5029               	movf	??___ftpack,w,c
 10239  0021B6  102A               	iorwf	??___ftpack+1,w,c
 10240  0021B8  102B               	iorwf	??___ftpack+2,w,c
 10241  0021BA  B4D8               	btfsc	status,2,c
 10242  0021BC  D006               	goto	l4929
 10243  0021BE  D7E6               	goto	l4921
 10244  0021C0                     l4927:
 10245  0021C0  0627               	decf	___ftpack@exp,f,c
 10246  0021C2  90D8               	bcf	status,0,c
 10247  0021C4  3624               	rlcf	___ftpack@arg,f,c
 10248  0021C6  3625               	rlcf	___ftpack@arg+1,f,c
 10249  0021C8  3626               	rlcf	___ftpack@arg+2,f,c
 10250  0021CA                     l4929:
 10251  0021CA  BE25               	btfsc	___ftpack@arg+1,7,c
 10252  0021CC  D003               	goto	l983
 10253  0021CE  0E02               	movlw	2
 10254  0021D0  6027               	cpfslt	___ftpack@exp,c
 10255  0021D2  D7F6               	goto	l4927
 10256  0021D4                     l983:
 10257  0021D4  A027               	btfss	___ftpack@exp,0,c
 10258  0021D6  9E25               	bcf	___ftpack@arg+1,7,c
 10259  0021D8  90D8               	bcf	status,0,c
 10260  0021DA  3227               	rrcf	___ftpack@exp,f,c
 10261  0021DC  5027               	movf	___ftpack@exp,w,c
 10262  0021DE  1226               	iorwf	___ftpack@arg+2,f,c
 10263  0021E0  5028               	movf	___ftpack@sign,w,c
 10264  0021E2  A4D8               	btfss	status,2,c
 10265  0021E4  8E26               	bsf	___ftpack@arg+2,7,c
 10266  0021E6  C024  F024         	movff	___ftpack@arg,?___ftpack
 10267  0021EA  C025  F025         	movff	___ftpack@arg+1,?___ftpack+1
 10268  0021EE  C026  F026         	movff	___ftpack@arg+2,?___ftpack+2
 10269  0021F2  0012               	return	
 10270  0021F4                     __end_of___ftpack:
 10271                           	opt stack 0
 10272                           tblptru	equ	0xFF8
 10273                           tblptrh	equ	0xFF7
 10274                           tblptrl	equ	0xFF6
 10275                           tablat	equ	0xFF5
 10276                           prodh	equ	0xFF4
 10277                           prodl	equ	0xFF3
 10278                           intcon	equ	0xFF2
 10279                           postinc0	equ	0xFEE
 10280                           wreg	equ	0xFE8
 10281                           postdec1	equ	0xFE5
 10282                           plusw1	equ	0xFE3
 10283                           fsr1l	equ	0xFE1
 10284                           indf2	equ	0xFDF
 10285                           postinc2	equ	0xFDE
 10286                           postdec2	equ	0xFDD
 10287                           plusw2	equ	0xFDB
 10288                           fsr2h	equ	0xFDA
 10289                           fsr2l	equ	0xFD9
 10290                           status	equ	0xFD8
 10291                           
 10292 ;; *************** function ___ftneg *****************
 10293 ;; Defined at:
 10294 ;;		line 15 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftneg.c"
 10295 ;; Parameters:    Size  Location     Type
 10296 ;;  f1              3   35[COMRAM] float 
 10297 ;; Auto vars:     Size  Location     Type
 10298 ;;		None
 10299 ;; Return value:  Size  Location     Type
 10300 ;;                  3   35[COMRAM] float 
 10301 ;; Registers used:
 10302 ;;		wreg, status,2, status,0
 10303 ;; Tracked objects:
 10304 ;;		On entry : 0/0
 10305 ;;		On exit  : 0/0
 10306 ;;		Unchanged: 0/0
 10307 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10308 ;;      Params:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10309 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10310 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10311 ;;      Totals:         3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10312 ;;Total ram usage:        3 bytes
 10313 ;; Hardware stack levels used:    1
 10314 ;; Hardware stack levels required when called:    3
 10315 ;; This function calls:
 10316 ;;		Nothing
 10317 ;; This function is called by:
 10318 ;;		_printf
 10319 ;; This function uses a non-reentrant model
 10320 ;;
 10321                           
 10322                           	psect	text48
 10323  002D6C                     __ptext48:
 10324                           	opt stack 0
 10325  002D6C                     ___ftneg:
 10326                           	opt stack 25
 10327                           
 10328                           ;incstack = 0
 10329  002D6C  5024               	movf	___ftneg@f1,w,c
 10330  002D6E  1025               	iorwf	___ftneg@f1+1,w,c
 10331  002D70  1026               	iorwf	___ftneg@f1+2,w,c
 10332  002D72  B4D8               	btfsc	status,2,c
 10333  002D74  D006               	goto	l1080
 10334  002D76  0E00               	movlw	0
 10335  002D78  1A24               	xorwf	___ftneg@f1,f,c
 10336  002D7A  0E00               	movlw	0
 10337  002D7C  1A25               	xorwf	___ftneg@f1+1,f,c
 10338  002D7E  0E80               	movlw	128
 10339  002D80  1A26               	xorwf	___ftneg@f1+2,f,c
 10340  002D82                     l1080:
 10341  002D82  C024  F024         	movff	___ftneg@f1,?___ftneg
 10342  002D86  C025  F025         	movff	___ftneg@f1+1,?___ftneg+1
 10343  002D8A  C026  F026         	movff	___ftneg@f1+2,?___ftneg+2
 10344  002D8E  0012               	return		;funcret
 10345  002D90                     __end_of___ftneg:
 10346                           	opt stack 0
 10347                           tblptru	equ	0xFF8
 10348                           tblptrh	equ	0xFF7
 10349                           tblptrl	equ	0xFF6
 10350                           tablat	equ	0xFF5
 10351                           prodh	equ	0xFF4
 10352                           prodl	equ	0xFF3
 10353                           intcon	equ	0xFF2
 10354                           postinc0	equ	0xFEE
 10355                           wreg	equ	0xFE8
 10356                           postdec1	equ	0xFE5
 10357                           plusw1	equ	0xFE3
 10358                           fsr1l	equ	0xFE1
 10359                           indf2	equ	0xFDF
 10360                           postinc2	equ	0xFDE
 10361                           postdec2	equ	0xFDD
 10362                           plusw2	equ	0xFDB
 10363                           fsr2h	equ	0xFDA
 10364                           fsr2l	equ	0xFD9
 10365                           status	equ	0xFD8
 10366                           
 10367 ;; *************** function ___ftge *****************
 10368 ;; Defined at:
 10369 ;;		line 4 in file "C:\Program Files (x86)\Microchip\xc8\v1.40\sources\common\ftge.c"
 10370 ;; Parameters:    Size  Location     Type
 10371 ;;  ff1             3   35[COMRAM] float 
 10372 ;;  ff2             3   38[COMRAM] float 
 10373 ;; Auto vars:     Size  Location     Type
 10374 ;;		None
 10375 ;; Return value:  Size  Location     Type
 10376 ;;		None               void
 10377 ;; Registers used:
 10378 ;;		wreg, status,2, status,0
 10379 ;; Tracked objects:
 10380 ;;		On entry : 0/0
 10381 ;;		On exit  : 0/0
 10382 ;;		Unchanged: 0/0
 10383 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10384 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10385 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10386 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10387 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10388 ;;Total ram usage:        9 bytes
 10389 ;; Hardware stack levels used:    1
 10390 ;; Hardware stack levels required when called:    3
 10391 ;; This function calls:
 10392 ;;		Nothing
 10393 ;; This function is called by:
 10394 ;;		_printf
 10395 ;; This function uses a non-reentrant model
 10396 ;;
 10397                           
 10398                           	psect	text49
 10399  002474                     __ptext49:
 10400                           	opt stack 0
 10401  002474                     ___ftge:
 10402                           	opt stack 25
 10403                           
 10404                           ;incstack = 0
 10405  002474  AE26               	btfss	___ftge@ff1+2,7,c
 10406  002476  D016               	goto	l5475
 10407  002478  C024  F02A         	movff	___ftge@ff1,??___ftge
 10408  00247C  C025  F02B         	movff	___ftge@ff1+1,??___ftge+1
 10409  002480  C026  F02C         	movff	___ftge@ff1+2,??___ftge+2
 10410  002484  1E2A               	comf	??___ftge,f,c
 10411  002486  1E2B               	comf	??___ftge+1,f,c
 10412  002488  1E2C               	comf	??___ftge+2,f,c
 10413  00248A  2A2A               	incf	??___ftge,f,c
 10414  00248C  0E00               	movlw	0
 10415  00248E  222B               	addwfc	??___ftge+1,f,c
 10416  002490  222C               	addwfc	??___ftge+2,f,c
 10417  002492  0E00               	movlw	0
 10418  002494  242A               	addwf	??___ftge,w,c
 10419  002496  6E24               	movwf	___ftge@ff1,c
 10420  002498  0E00               	movlw	0
 10421  00249A  202B               	addwfc	??___ftge+1,w,c
 10422  00249C  6E25               	movwf	___ftge@ff1+1,c
 10423  00249E  0E80               	movlw	128
 10424  0024A0  202C               	addwfc	??___ftge+2,w,c
 10425  0024A2  6E26               	movwf	___ftge@ff1+2,c
 10426  0024A4                     l5475:
 10427  0024A4  AE29               	btfss	___ftge@ff2+2,7,c
 10428  0024A6  D016               	goto	l5479
 10429  0024A8  C027  F02A         	movff	___ftge@ff2,??___ftge
 10430  0024AC  C028  F02B         	movff	___ftge@ff2+1,??___ftge+1
 10431  0024B0  C029  F02C         	movff	___ftge@ff2+2,??___ftge+2
 10432  0024B4  1E2A               	comf	??___ftge,f,c
 10433  0024B6  1E2B               	comf	??___ftge+1,f,c
 10434  0024B8  1E2C               	comf	??___ftge+2,f,c
 10435  0024BA  2A2A               	incf	??___ftge,f,c
 10436  0024BC  0E00               	movlw	0
 10437  0024BE  222B               	addwfc	??___ftge+1,f,c
 10438  0024C0  222C               	addwfc	??___ftge+2,f,c
 10439  0024C2  0E00               	movlw	0
 10440  0024C4  242A               	addwf	??___ftge,w,c
 10441  0024C6  6E27               	movwf	___ftge@ff2,c
 10442  0024C8  0E00               	movlw	0
 10443  0024CA  202B               	addwfc	??___ftge+1,w,c
 10444  0024CC  6E28               	movwf	___ftge@ff2+1,c
 10445  0024CE  0E80               	movlw	128
 10446  0024D0  202C               	addwfc	??___ftge+2,w,c
 10447  0024D2  6E29               	movwf	___ftge@ff2+2,c
 10448  0024D4                     l5479:
 10449  0024D4  0E00               	movlw	0
 10450  0024D6  1A24               	xorwf	___ftge@ff1,f,c
 10451  0024D8  0E00               	movlw	0
 10452  0024DA  1A25               	xorwf	___ftge@ff1+1,f,c
 10453  0024DC  0E80               	movlw	128
 10454  0024DE  1A26               	xorwf	___ftge@ff1+2,f,c
 10455  0024E0  0E00               	movlw	0
 10456  0024E2  1A27               	xorwf	___ftge@ff2,f,c
 10457  0024E4  0E00               	movlw	0
 10458  0024E6  1A28               	xorwf	___ftge@ff2+1,f,c
 10459  0024E8  0E80               	movlw	128
 10460  0024EA  1A29               	xorwf	___ftge@ff2+2,f,c
 10461  0024EC  5027               	movf	___ftge@ff2,w,c
 10462  0024EE  5C24               	subwf	___ftge@ff1,w,c
 10463  0024F0  5028               	movf	___ftge@ff2+1,w,c
 10464  0024F2  5825               	subwfb	___ftge@ff1+1,w,c
 10465  0024F4  5029               	movf	___ftge@ff2+2,w,c
 10466  0024F6  5826               	subwfb	___ftge@ff1+2,w,c
 10467  0024F8  B0D8               	btfsc	status,0,c
 10468  0024FA  D002               	goto	l5485
 10469  0024FC  90D8               	bcf	status,0,c
 10470  0024FE  0012               	return	
 10471  002500                     l5485:
 10472  002500  80D8               	bsf	status,0,c
 10473  002502  0012               	return	
 10474  002504                     __end_of___ftge:
 10475                           	opt stack 0
 10476                           tblptru	equ	0xFF8
 10477                           tblptrh	equ	0xFF7
 10478                           tblptrl	equ	0xFF6
 10479                           tablat	equ	0xFF5
 10480                           prodh	equ	0xFF4
 10481                           prodl	equ	0xFF3
 10482                           intcon	equ	0xFF2
 10483                           postinc0	equ	0xFEE
 10484                           wreg	equ	0xFE8
 10485                           postdec1	equ	0xFE5
 10486                           plusw1	equ	0xFE3
 10487                           fsr1l	equ	0xFE1
 10488                           indf2	equ	0xFDF
 10489                           postinc2	equ	0xFDE
 10490                           postdec2	equ	0xFDD
 10491                           plusw2	equ	0xFDB
 10492                           fsr2h	equ	0xFDA
 10493                           fsr2l	equ	0xFD9
 10494                           status	equ	0xFD8
 10495                           
 10496 ;; *************** function _lcdClear *****************
 10497 ;; Defined at:
 10498 ;;		line 74 in file "lcd.c"
 10499 ;; Parameters:    Size  Location     Type
 10500 ;;		None
 10501 ;; Auto vars:     Size  Location     Type
 10502 ;;		None
 10503 ;; Return value:  Size  Location     Type
 10504 ;;                  1    wreg      void 
 10505 ;; Registers used:
 10506 ;;		wreg, status,2, status,0, cstack
 10507 ;; Tracked objects:
 10508 ;;		On entry : 0/0
 10509 ;;		On exit  : 0/0
 10510 ;;		Unchanged: 0/0
 10511 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10512 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10513 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10514 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10515 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10516 ;;Total ram usage:        0 bytes
 10517 ;; Hardware stack levels used:    1
 10518 ;; Hardware stack levels required when called:    5
 10519 ;; This function calls:
 10520 ;;		_lcdInst
 10521 ;; This function is called by:
 10522 ;;		_main
 10523 ;;		_sortBattery
 10524 ;;		_pause
 10525 ;;		_dateTime
 10526 ;;		_mainMenu
 10527 ;;		_runSelect
 10528 ;;		_runMenu
 10529 ;;		_runTime
 10530 ;;		_runStats
 10531 ;; This function uses a non-reentrant model
 10532 ;;
 10533                           
 10534                           	psect	text50
 10535  002E8C                     __ptext50:
 10536                           	opt stack 0
 10537  002E8C                     _lcdClear:
 10538                           	opt stack 23
 10539                           
 10540                           ;lcd.c: 75: lcdInst(0b00000001);
 10541                           
 10542                           ;incstack = 0
 10543  002E8C  0E01               	movlw	1
 10544  002E8E  ECD9  F016         	call	_lcdInst
 10545  002E92  0012               	return		;funcret
 10546  002E94                     __end_of_lcdClear:
 10547                           	opt stack 0
 10548                           tblptru	equ	0xFF8
 10549                           tblptrh	equ	0xFF7
 10550                           tblptrl	equ	0xFF6
 10551                           tablat	equ	0xFF5
 10552                           prodh	equ	0xFF4
 10553                           prodl	equ	0xFF3
 10554                           intcon	equ	0xFF2
 10555                           postinc0	equ	0xFEE
 10556                           wreg	equ	0xFE8
 10557                           postdec1	equ	0xFE5
 10558                           plusw1	equ	0xFE3
 10559                           fsr1l	equ	0xFE1
 10560                           indf2	equ	0xFDF
 10561                           postinc2	equ	0xFDE
 10562                           postdec2	equ	0xFDD
 10563                           plusw2	equ	0xFDB
 10564                           fsr2h	equ	0xFDA
 10565                           fsr2l	equ	0xFD9
 10566                           status	equ	0xFD8
 10567                           
 10568 ;; *************** function _pinSetup *****************
 10569 ;; Defined at:
 10570 ;;		line 169 in file "main.c"
 10571 ;; Parameters:    Size  Location     Type
 10572 ;;		None
 10573 ;; Auto vars:     Size  Location     Type
 10574 ;;		None
 10575 ;; Return value:  Size  Location     Type
 10576 ;;                  1    wreg      void 
 10577 ;; Registers used:
 10578 ;;		wreg, status,2, status,0
 10579 ;; Tracked objects:
 10580 ;;		On entry : 0/0
 10581 ;;		On exit  : 0/0
 10582 ;;		Unchanged: 0/0
 10583 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10584 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10585 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10586 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10587 ;;      Totals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10588 ;;Total ram usage:        0 bytes
 10589 ;; Hardware stack levels used:    1
 10590 ;; Hardware stack levels required when called:    3
 10591 ;; This function calls:
 10592 ;;		Nothing
 10593 ;; This function is called by:
 10594 ;;		_main
 10595 ;; This function uses a non-reentrant model
 10596 ;;
 10597                           
 10598                           	psect	text51
 10599  002B82                     __ptext51:
 10600                           	opt stack 0
 10601  002B82                     _pinSetup:
 10602                           	opt stack 27
 10603                           
 10604                           ;main.c: 175: TRISA = 0xFF;
 10605                           
 10606                           ;incstack = 0
 10607  002B82  6892               	setf	3986,c	;volatile
 10608                           
 10609                           ;main.c: 176: TRISB = 0xFF;
 10610  002B84  6893               	setf	3987,c	;volatile
 10611                           
 10612                           ;main.c: 177: TRISC = 0x00;
 10613  002B86  0E00               	movlw	0
 10614  002B88  6E94               	movwf	3988,c	;volatile
 10615                           
 10616                           ;main.c: 178: TRISD = 0x00;
 10617  002B8A  0E00               	movlw	0
 10618  002B8C  6E95               	movwf	3989,c	;volatile
 10619                           
 10620                           ;main.c: 179: TRISE = 0x00;
 10621  002B8E  0E00               	movlw	0
 10622  002B90  6E96               	movwf	3990,c	;volatile
 10623                           
 10624                           ;main.c: 181: LATA = 0x00;
 10625  002B92  0E00               	movlw	0
 10626  002B94  6E89               	movwf	3977,c	;volatile
 10627                           
 10628                           ;main.c: 182: LATB = 0x00;
 10629  002B96  0E00               	movlw	0
 10630  002B98  6E8A               	movwf	3978,c	;volatile
 10631                           
 10632                           ;main.c: 183: LATC = 0x00;
 10633  002B9A  0E00               	movlw	0
 10634  002B9C  6E8B               	movwf	3979,c	;volatile
 10635                           
 10636                           ;main.c: 184: LATD = 0x00;
 10637  002B9E  0E00               	movlw	0
 10638  002BA0  6E8C               	movwf	3980,c	;volatile
 10639                           
 10640                           ;main.c: 185: LATE = 0x00;
 10641  002BA2  0E00               	movlw	0
 10642  002BA4  6E8D               	movwf	3981,c	;volatile
 10643                           
 10644                           ;main.c: 187: ADCON0 = 0x00;
 10645  002BA6  0E00               	movlw	0
 10646  002BA8  6EC2               	movwf	4034,c	;volatile
 10647                           
 10648                           ;main.c: 188: ADCON1 |= 0x0E;
 10649  002BAA  0E0E               	movlw	14
 10650  002BAC  12C1               	iorwf	4033,f,c	;volatile
 10651                           
 10652                           ;main.c: 192: ADCON2 = 0;
 10653  002BAE  0E00               	movlw	0
 10654  002BB0  6EC0               	movwf	4032,c	;volatile
 10655                           
 10656                           ;main.c: 193: ADCON2 |= 0b010;
 10657  002BB2  82C0               	bsf	4032,1,c	;volatile
 10658                           
 10659                           ;main.c: 194: ADCON2 |= 0b110<<3;
 10660  002BB4  0E30               	movlw	48
 10661  002BB6  12C0               	iorwf	4032,f,c	;volatile
 10662                           
 10663                           ;main.c: 195: ADCON2 |= 1<<7;
 10664  002BB8  8EC0               	bsf	4032,7,c	;volatile
 10665                           
 10666                           ;main.c: 198: INT1IE = 1;
 10667  002BBA  86F0               	bsf	intcon3,3,c	;volatile
 10668                           
 10669                           ;main.c: 199: INT0IE = 1;
 10670  002BBC  88F2               	bsf	intcon,4,c	;volatile
 10671                           
 10672                           ;main.c: 200: (INTCONbits.GIE = 1);
 10673  002BBE  8EF2               	bsf	intcon,7,c	;volatile
 10674  002BC0  0012               	return		;funcret
 10675  002BC2                     __end_of_pinSetup:
 10676                           	opt stack 0
 10677                           tblptru	equ	0xFF8
 10678                           tblptrh	equ	0xFF7
 10679                           tblptrl	equ	0xFF6
 10680                           tablat	equ	0xFF5
 10681                           prodh	equ	0xFF4
 10682                           prodl	equ	0xFF3
 10683                           intcon	equ	0xFF2
 10684                           intcon3	equ	0xFF0
 10685                           postinc0	equ	0xFEE
 10686                           wreg	equ	0xFE8
 10687                           postdec1	equ	0xFE5
 10688                           plusw1	equ	0xFE3
 10689                           fsr1l	equ	0xFE1
 10690                           indf2	equ	0xFDF
 10691                           postinc2	equ	0xFDE
 10692                           postdec2	equ	0xFDD
 10693                           plusw2	equ	0xFDB
 10694                           fsr2h	equ	0xFDA
 10695                           fsr2l	equ	0xFD9
 10696                           status	equ	0xFD8
 10697                           
 10698 ;; *************** function _initLCD *****************
 10699 ;; Defined at:
 10700 ;;		line 15 in file "lcd.c"
 10701 ;; Parameters:    Size  Location     Type
 10702 ;;		None
 10703 ;; Auto vars:     Size  Location     Type
 10704 ;;		None
 10705 ;; Return value:  Size  Location     Type
 10706 ;;                  1    wreg      void 
 10707 ;; Registers used:
 10708 ;;		wreg, status,2, status,0, cstack
 10709 ;; Tracked objects:
 10710 ;;		On entry : 0/0
 10711 ;;		On exit  : 0/0
 10712 ;;		Unchanged: 0/0
 10713 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10714 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10715 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10716 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10717 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10718 ;;Total ram usage:        1 bytes
 10719 ;; Hardware stack levels used:    1
 10720 ;; Hardware stack levels required when called:    5
 10721 ;; This function calls:
 10722 ;;		_lcdInst
 10723 ;; This function is called by:
 10724 ;;		_main
 10725 ;; This function uses a non-reentrant model
 10726 ;;
 10727                           
 10728                           	psect	text52
 10729  002B3C                     __ptext52:
 10730                           	opt stack 0
 10731  002B3C                     _initLCD:
 10732                           	opt stack 25
 10733                           
 10734                           ;lcd.c: 17: _delay((unsigned long)((15)*(10000000/4000.0)));
 10735                           
 10736                           ;incstack = 0
 10737  002B3C  0E31               	movlw	49
 10738  002B3E  6E28               	movwf	??_initLCD& (0+255),c
 10739  002B40  0EB2               	movlw	178
 10740  002B42                     u5997:
 10741  002B42  2EE8               	decfsz	wreg,f,c
 10742  002B44  D7FE               	bra	u5997
 10743  002B46  2E28               	decfsz	??_initLCD& (0+255),f,c
 10744  002B48  D7FC               	bra	u5997
 10745  002B4A  D000               	nop2	
 10746                           
 10747                           ;lcd.c: 18: lcdInst(0b00110011);
 10748  002B4C  0E33               	movlw	51
 10749  002B4E  ECD9  F016         	call	_lcdInst
 10750                           
 10751                           ;lcd.c: 19: lcdInst(0b00110010);
 10752  002B52  0E32               	movlw	50
 10753  002B54  ECD9  F016         	call	_lcdInst
 10754                           
 10755                           ;lcd.c: 20: lcdInst(0b00101000);
 10756  002B58  0E28               	movlw	40
 10757  002B5A  ECD9  F016         	call	_lcdInst
 10758                           
 10759                           ;lcd.c: 21: lcdInst(0b00001111);
 10760  002B5E  0E0F               	movlw	15
 10761  002B60  ECD9  F016         	call	_lcdInst
 10762                           
 10763                           ;lcd.c: 22: lcdInst(0b00000110);
 10764  002B64  0E06               	movlw	6
 10765  002B66  ECD9  F016         	call	_lcdInst
 10766                           
 10767                           ;lcd.c: 23: lcdInst(0b00000001);
 10768  002B6A  0E01               	movlw	1
 10769  002B6C  ECD9  F016         	call	_lcdInst
 10770                           
 10771                           ;lcd.c: 24: _delay((unsigned long)((15)*(10000000/4000.0)));
 10772  002B70  0E31               	movlw	49
 10773  002B72  6E28               	movwf	??_initLCD& (0+255),c
 10774  002B74  0EB2               	movlw	178
 10775  002B76                     u6007:
 10776  002B76  2EE8               	decfsz	wreg,f,c
 10777  002B78  D7FE               	bra	u6007
 10778  002B7A  2E28               	decfsz	??_initLCD& (0+255),f,c
 10779  002B7C  D7FC               	bra	u6007
 10780  002B7E  D000               	nop2	
 10781  002B80  0012               	return		;funcret
 10782  002B82                     __end_of_initLCD:
 10783                           	opt stack 0
 10784                           tblptru	equ	0xFF8
 10785                           tblptrh	equ	0xFF7
 10786                           tblptrl	equ	0xFF6
 10787                           tablat	equ	0xFF5
 10788                           prodh	equ	0xFF4
 10789                           prodl	equ	0xFF3
 10790                           intcon	equ	0xFF2
 10791                           intcon3	equ	0xFF0
 10792                           postinc0	equ	0xFEE
 10793                           wreg	equ	0xFE8
 10794                           postdec1	equ	0xFE5
 10795                           plusw1	equ	0xFE3
 10796                           fsr1l	equ	0xFE1
 10797                           indf2	equ	0xFDF
 10798                           postinc2	equ	0xFDE
 10799                           postdec2	equ	0xFDD
 10800                           plusw2	equ	0xFDB
 10801                           fsr2h	equ	0xFDA
 10802                           fsr2l	equ	0xFD9
 10803                           status	equ	0xFD8
 10804                           
 10805 ;; *************** function _lcdInst *****************
 10806 ;; Defined at:
 10807 ;;		line 27 in file "lcd.c"
 10808 ;; Parameters:    Size  Location     Type
 10809 ;;  data            1    wreg     unsigned char 
 10810 ;; Auto vars:     Size  Location     Type
 10811 ;;  data            1   38[COMRAM] unsigned char 
 10812 ;; Return value:  Size  Location     Type
 10813 ;;                  1    wreg      void 
 10814 ;; Registers used:
 10815 ;;		wreg, status,2, status,0, cstack
 10816 ;; Tracked objects:
 10817 ;;		On entry : 0/0
 10818 ;;		On exit  : 0/0
 10819 ;;		Unchanged: 0/0
 10820 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10821 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10822 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10823 ;;      Temps:          1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10824 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10825 ;;Total ram usage:        2 bytes
 10826 ;; Hardware stack levels used:    1
 10827 ;; Hardware stack levels required when called:    4
 10828 ;; This function calls:
 10829 ;;		_lcdNibble
 10830 ;; This function is called by:
 10831 ;;		_initLCD
 10832 ;;		_lcdClear
 10833 ;;		_lcdNewline
 10834 ;;		_lcdHome
 10835 ;; This function uses a non-reentrant model
 10836 ;;
 10837                           
 10838                           	psect	text53
 10839  002DB2                     __ptext53:
 10840                           	opt stack 0
 10841  002DB2                     _lcdInst:
 10842                           	opt stack 22
 10843                           
 10844                           ;incstack = 0
 10845                           ;lcdInst@data stored from wreg
 10846  002DB2  6E27               	movwf	lcdInst@data,c
 10847                           
 10848                           ;lcd.c: 28: LATDbits.LATD2 = 0;
 10849  002DB4  948C               	bcf	3980,2,c	;volatile
 10850                           
 10851                           ;lcd.c: 29: _delay((unsigned long)((140)*(10000000/4000000.0)));
 10852  002DB6  0E74               	movlw	116
 10853  002DB8                     u6017:
 10854  002DB8  2EE8               	decfsz	wreg,f,c
 10855  002DBA  D7FE               	bra	u6017
 10856  002DBC  D000               	nop2	
 10857                           
 10858                           ;lcd.c: 30: lcdNibble(data);
 10859  002DBE  5027               	movf	lcdInst@data,w,c
 10860  002DC0  EC2F  F014         	call	_lcdNibble
 10861                           
 10862                           ;lcd.c: 31: _delay((unsigned long)((1000)*(10000000/4000000.0)));
 10863  002DC4  0E04               	movlw	4
 10864  002DC6  6E26               	movwf	??_lcdInst& (0+255),c
 10865  002DC8  0E3E               	movlw	62
 10866  002DCA                     u6027:
 10867  002DCA  2EE8               	decfsz	wreg,f,c
 10868  002DCC  D7FE               	bra	u6027
 10869  002DCE  2E26               	decfsz	??_lcdInst& (0+255),f,c
 10870  002DD0  D7FC               	bra	u6027
 10871  002DD2  0012               	return		;funcret
 10872  002DD4                     __end_of_lcdInst:
 10873                           	opt stack 0
 10874                           tblptru	equ	0xFF8
 10875                           tblptrh	equ	0xFF7
 10876                           tblptrl	equ	0xFF6
 10877                           tablat	equ	0xFF5
 10878                           prodh	equ	0xFF4
 10879                           prodl	equ	0xFF3
 10880                           intcon	equ	0xFF2
 10881                           intcon3	equ	0xFF0
 10882                           postinc0	equ	0xFEE
 10883                           wreg	equ	0xFE8
 10884                           postdec1	equ	0xFE5
 10885                           plusw1	equ	0xFE3
 10886                           fsr1l	equ	0xFE1
 10887                           indf2	equ	0xFDF
 10888                           postinc2	equ	0xFDE
 10889                           postdec2	equ	0xFDD
 10890                           plusw2	equ	0xFDB
 10891                           fsr2h	equ	0xFDA
 10892                           fsr2l	equ	0xFD9
 10893                           status	equ	0xFD8
 10894                           
 10895 ;; *************** function _lcdNibble *****************
 10896 ;; Defined at:
 10897 ;;		line 46 in file "lcd.c"
 10898 ;; Parameters:    Size  Location     Type
 10899 ;;  data            1    wreg     unsigned char 
 10900 ;; Auto vars:     Size  Location     Type
 10901 ;;  data            1   36[COMRAM] unsigned char 
 10902 ;;  temp            1   35[COMRAM] unsigned char 
 10903 ;; Return value:  Size  Location     Type
 10904 ;;                  1    wreg      void 
 10905 ;; Registers used:
 10906 ;;		wreg, status,2, status,0
 10907 ;; Tracked objects:
 10908 ;;		On entry : 0/0
 10909 ;;		On exit  : 0/0
 10910 ;;		Unchanged: 0/0
 10911 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 10912 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10913 ;;      Locals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10914 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10915 ;;      Totals:         2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 10916 ;;Total ram usage:        2 bytes
 10917 ;; Hardware stack levels used:    1
 10918 ;; Hardware stack levels required when called:    3
 10919 ;; This function calls:
 10920 ;;		Nothing
 10921 ;; This function is called by:
 10922 ;;		_lcdInst
 10923 ;;		_putch
 10924 ;; This function uses a non-reentrant model
 10925 ;;
 10926                           
 10927                           	psect	text54
 10928  00285E                     __ptext54:
 10929                           	opt stack 0
 10930  00285E                     _lcdNibble:
 10931                           	opt stack 24
 10932                           
 10933                           ;incstack = 0
 10934                           ;lcdNibble@data stored from wreg
 10935  00285E  6E25               	movwf	lcdNibble@data,c
 10936                           
 10937                           ;lcd.c: 48: char temp = data & 0xF0;
 10938  002860  5025               	movf	lcdNibble@data,w,c
 10939  002862  0BF0               	andlw	240
 10940  002864  6E24               	movwf	lcdNibble@temp,c
 10941                           
 10942                           ;lcd.c: 49: LATD = LATD & 0x0F;
 10943  002866  508C               	movf	3980,w,c	;volatile
 10944  002868  0B0F               	andlw	15
 10945  00286A  6E8C               	movwf	3980,c	;volatile
 10946                           
 10947                           ;lcd.c: 50: LATD = temp | LATD;
 10948  00286C  5024               	movf	lcdNibble@temp,w,c
 10949  00286E  108C               	iorwf	3980,w,c	;volatile
 10950  002870  6E8C               	movwf	3980,c	;volatile
 10951                           
 10952                           ;lcd.c: 52: LATDbits.LATD3 = 0;
 10953  002872  968C               	bcf	3980,3,c	;volatile
 10954                           
 10955                           ;lcd.c: 53: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10956  002874  0ED6               	movlw	214
 10957  002876                     u6037:
 10958  002876  D000               	nop2	
 10959  002878  D000               	nop2	
 10960  00287A  2EE8               	decfsz	wreg,f,c
 10961  00287C  D7FC               	bra	u6037
 10962  00287E  D000               	nop2	
 10963                           
 10964                           ;lcd.c: 54: LATDbits.LATD3 = 1;
 10965  002880  868C               	bsf	3980,3,c	;volatile
 10966                           
 10967                           ;lcd.c: 55: _delay((unsigned long)((600)*(10000000/4000000.0)));
 10968  002882  0ED6               	movlw	214
 10969  002884                     u6047:
 10970  002884  D000               	nop2	
 10971  002886  D000               	nop2	
 10972  002888  2EE8               	decfsz	wreg,f,c
 10973  00288A  D7FC               	bra	u6047
 10974  00288C  D000               	nop2	
 10975                           
 10976                           ;lcd.c: 58: data = data << 4;
 10977  00288E  3825               	swapf	lcdNibble@data,w,c
 10978  002890  0BF0               	andlw	240
 10979  002892  6E25               	movwf	lcdNibble@data,c
 10980                           
 10981                           ;lcd.c: 60: temp = data & 0xF0;
 10982  002894  5025               	movf	lcdNibble@data,w,c
 10983  002896  0BF0               	andlw	240
 10984  002898  6E24               	movwf	lcdNibble@temp,c
 10985                           
 10986                           ;lcd.c: 61: LATD = LATD & 0x0F;
 10987  00289A  508C               	movf	3980,w,c	;volatile
 10988  00289C  0B0F               	andlw	15
 10989  00289E  6E8C               	movwf	3980,c	;volatile
 10990                           
 10991                           ;lcd.c: 62: LATD = temp | LATD;
 10992  0028A0  5024               	movf	lcdNibble@temp,w,c
 10993  0028A2  108C               	iorwf	3980,w,c	;volatile
 10994  0028A4  6E8C               	movwf	3980,c	;volatile
 10995                           
 10996                           ;lcd.c: 64: LATDbits.LATD3 = 0;
 10997  0028A6  968C               	bcf	3980,3,c	;volatile
 10998                           
 10999                           ;lcd.c: 65: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11000  0028A8  0ED6               	movlw	214
 11001  0028AA                     u6057:
 11002  0028AA  D000               	nop2	
 11003  0028AC  D000               	nop2	
 11004  0028AE  2EE8               	decfsz	wreg,f,c
 11005  0028B0  D7FC               	bra	u6057
 11006  0028B2  D000               	nop2	
 11007                           
 11008                           ;lcd.c: 66: LATDbits.LATD3 = 1;
 11009  0028B4  868C               	bsf	3980,3,c	;volatile
 11010                           
 11011                           ;lcd.c: 67: _delay((unsigned long)((600)*(10000000/4000000.0)));
 11012  0028B6  0ED6               	movlw	214
 11013  0028B8                     u6067:
 11014  0028B8  D000               	nop2	
 11015  0028BA  D000               	nop2	
 11016  0028BC  2EE8               	decfsz	wreg,f,c
 11017  0028BE  D7FC               	bra	u6067
 11018  0028C0  D000               	nop2	
 11019  0028C2  0012               	return		;funcret
 11020  0028C4                     __end_of_lcdNibble:
 11021                           	opt stack 0
 11022                           tblptru	equ	0xFF8
 11023                           tblptrh	equ	0xFF7
 11024                           tblptrl	equ	0xFF6
 11025                           tablat	equ	0xFF5
 11026                           prodh	equ	0xFF4
 11027                           prodl	equ	0xFF3
 11028                           intcon	equ	0xFF2
 11029                           intcon3	equ	0xFF0
 11030                           postinc0	equ	0xFEE
 11031                           wreg	equ	0xFE8
 11032                           postdec1	equ	0xFE5
 11033                           plusw1	equ	0xFE3
 11034                           fsr1l	equ	0xFE1
 11035                           indf2	equ	0xFDF
 11036                           postinc2	equ	0xFDE
 11037                           postdec2	equ	0xFDD
 11038                           plusw2	equ	0xFDB
 11039                           fsr2h	equ	0xFDA
 11040                           fsr2l	equ	0xFD9
 11041                           status	equ	0xFD8
 11042                           
 11043 ;; *************** function _service *****************
 11044 ;; Defined at:
 11045 ;;		line 203 in file "main.c"
 11046 ;; Parameters:    Size  Location     Type
 11047 ;;		None
 11048 ;; Auto vars:     Size  Location     Type
 11049 ;;		None
 11050 ;; Return value:  Size  Location     Type
 11051 ;;                  1    wreg      void 
 11052 ;; Registers used:
 11053 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
 11054 ;; Tracked objects:
 11055 ;;		On entry : 0/0
 11056 ;;		On exit  : 0/0
 11057 ;;		Unchanged: 0/0
 11058 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11059 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11060 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11061 ;;      Temps:         14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11062 ;;      Totals:        14       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11063 ;;Total ram usage:       14 bytes
 11064 ;; Hardware stack levels used:    1
 11065 ;; Hardware stack levels required when called:    2
 11066 ;; This function calls:
 11067 ;;		_keyPressedInterruptService
 11068 ;;		_servoInterruptService
 11069 ;; This function is called by:
 11070 ;;		Interrupt level 2
 11071 ;; This function uses a non-reentrant model
 11072 ;;
 11073                           
 11074                           	psect	intcode
 11075  000008                     __pintcode:
 11076                           	opt stack 0
 11077  000008                     _service:
 11078                           	opt stack 21
 11079                           
 11080                           ;incstack = 0
 11081  000008  825C               	bsf	btemp,1,c	;set compiler interrupt flag (level 2)
 11082  00000A  EDF0  F011         	call	int_func,f	;refresh shadow registers
 11083                           tblptru	equ	0xFF8
 11084                           tblptrh	equ	0xFF7
 11085                           tblptrl	equ	0xFF6
 11086                           tablat	equ	0xFF5
 11087                           prodh	equ	0xFF4
 11088                           prodl	equ	0xFF3
 11089                           intcon	equ	0xFF2
 11090                           intcon3	equ	0xFF0
 11091                           postinc0	equ	0xFEE
 11092                           wreg	equ	0xFE8
 11093                           postdec1	equ	0xFE5
 11094                           plusw1	equ	0xFE3
 11095                           fsr1l	equ	0xFE1
 11096                           indf2	equ	0xFDF
 11097                           postinc2	equ	0xFDE
 11098                           postdec2	equ	0xFDD
 11099                           plusw2	equ	0xFDB
 11100                           fsr2h	equ	0xFDA
 11101                           fsr2l	equ	0xFD9
 11102                           status	equ	0xFD8
 11103                           
 11104                           	psect	intcode_body
 11105  0023E0                     __pintcode_body:
 11106                           	opt stack 21
 11107  0023E0                     int_func:
 11108                           	opt stack 21
 11109  0023E0  0006               	pop		; remove dummy address from shadow register refresh
 11110  0023E2  CFFA F016          	movff	pclath,??_service
 11111  0023E6  CFFB F017          	movff	pclatu,??_service+1
 11112  0023EA  CFE9 F018          	movff	fsr0l,??_service+2
 11113  0023EE  CFEA F019          	movff	fsr0h,??_service+3
 11114  0023F2  CFE1 F01A          	movff	fsr1l,??_service+4
 11115  0023F6  CFE2 F01B          	movff	fsr1h,??_service+5
 11116  0023FA  CFD9 F01C          	movff	fsr2l,??_service+6
 11117  0023FE  CFDA F01D          	movff	fsr2h,??_service+7
 11118  002402  CFF3 F01E          	movff	prodl,??_service+8
 11119  002406  CFF4 F01F          	movff	prodh,??_service+9
 11120  00240A  CFF6 F020          	movff	tblptrl,??_service+10
 11121  00240E  CFF7 F021          	movff	tblptrh,??_service+11
 11122  002412  CFF8 F022          	movff	tblptru,??_service+12
 11123  002416  CFF5 F023          	movff	tablat,??_service+13
 11124                           
 11125                           ;main.c: 205: servoInterruptService();
 11126  00241A  EC4F  F00A         	call	_servoInterruptService	;wreg free
 11127                           
 11128                           ;main.c: 208: if(INT0IF){ INT0IF = 0;
 11129  00241E  A2F2               	btfss	intcon,1,c	;volatile
 11130  002420  D006               	goto	i2l4619
 11131  002422  92F2               	bcf	intcon,1,c	;volatile
 11132                           
 11133                           ;main.c: 209: switchFlag = 1;
 11134  002424  0E00               	movlw	0
 11135  002426  0100               	movlb	0	; () banked
 11136  002428  6FFE               	movwf	(_switchFlag+1)& (0+255),b
 11137  00242A  0E01               	movlw	1
 11138  00242C  6FFD               	movwf	_switchFlag& (0+255),b
 11139  00242E                     i2l4619:
 11140                           
 11141                           ;main.c: 210: }
 11142                           ;main.c: 213: if(INT1IF){INT1IF = 0;
 11143  00242E  A0F0               	btfss	intcon3,0,c	;volatile
 11144  002430  D003               	goto	i2l137
 11145  002432  90F0               	bcf	intcon3,0,c	;volatile
 11146                           
 11147                           ;main.c: 214: keyPressedInterruptService();
 11148  002434  ECEA  F016         	call	_keyPressedInterruptService	;wreg free
 11149  002438                     i2l137:
 11150  002438  C023  FFF5         	movff	??_service+13,tablat
 11151  00243C  C022  FFF8         	movff	??_service+12,tblptru
 11152  002440  C021  FFF7         	movff	??_service+11,tblptrh
 11153  002444  C020  FFF6         	movff	??_service+10,tblptrl
 11154  002448  C01F  FFF4         	movff	??_service+9,prodh
 11155  00244C  C01E  FFF3         	movff	??_service+8,prodl
 11156  002450  C01D  FFDA         	movff	??_service+7,fsr2h
 11157  002454  C01C  FFD9         	movff	??_service+6,fsr2l
 11158  002458  C01B  FFE2         	movff	??_service+5,fsr1h
 11159  00245C  C01A  FFE1         	movff	??_service+4,fsr1l
 11160  002460  C019  FFEA         	movff	??_service+3,fsr0h
 11161  002464  C018  FFE9         	movff	??_service+2,fsr0l
 11162  002468  C017  FFFB         	movff	??_service+1,pclatu
 11163  00246C  C016  FFFA         	movff	??_service,pclath
 11164  002470  925C               	bcf	btemp,1,c	;clear compiler interrupt flag (level 2)
 11165  002472  0011               	retfie		f
 11166  002474                     __end_of_service:
 11167                           	opt stack 0
 11168                           pclatu	equ	0xFFB
 11169                           pclath	equ	0xFFA
 11170                           tblptru	equ	0xFF8
 11171                           tblptrh	equ	0xFF7
 11172                           tblptrl	equ	0xFF6
 11173                           tablat	equ	0xFF5
 11174                           prodh	equ	0xFF4
 11175                           prodl	equ	0xFF3
 11176                           intcon	equ	0xFF2
 11177                           intcon3	equ	0xFF0
 11178                           postinc0	equ	0xFEE
 11179                           fsr0h	equ	0xFEA
 11180                           fsr0l	equ	0xFE9
 11181                           wreg	equ	0xFE8
 11182                           postdec1	equ	0xFE5
 11183                           plusw1	equ	0xFE3
 11184                           fsr1h	equ	0xFE2
 11185                           fsr1l	equ	0xFE1
 11186                           indf2	equ	0xFDF
 11187                           postinc2	equ	0xFDE
 11188                           postdec2	equ	0xFDD
 11189                           plusw2	equ	0xFDB
 11190                           fsr2h	equ	0xFDA
 11191                           fsr2l	equ	0xFD9
 11192                           status	equ	0xFD8
 11193                           
 11194 ;; *************** function _servoInterruptService *****************
 11195 ;; Defined at:
 11196 ;;		line 47 in file "servo.c"
 11197 ;; Parameters:    Size  Location     Type
 11198 ;;		None
 11199 ;; Auto vars:     Size  Location     Type
 11200 ;;  i               2   19[COMRAM] int 
 11201 ;;  flags           8   11[COMRAM] int [4]
 11202 ;; Return value:  Size  Location     Type
 11203 ;;                  1    wreg      void 
 11204 ;; Registers used:
 11205 ;;		wreg, fsr2l, fsr2h, status,2, status,0, cstack
 11206 ;; Tracked objects:
 11207 ;;		On entry : 0/0
 11208 ;;		On exit  : 0/0
 11209 ;;		Unchanged: 0/0
 11210 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11211 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11212 ;;      Locals:        10       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11213 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11214 ;;      Totals:        12       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11215 ;;Total ram usage:       12 bytes
 11216 ;; Hardware stack levels used:    1
 11217 ;; Hardware stack levels required when called:    1
 11218 ;; This function calls:
 11219 ;;		i2_digitalRead
 11220 ;;		i2_digitalWrite
 11221 ;;		i2_startTimer
 11222 ;; This function is called by:
 11223 ;;		_service
 11224 ;; This function uses a non-reentrant model
 11225 ;;
 11226                           
 11227                           	psect	text56
 11228  00149E                     __ptext56:
 11229                           	opt stack 0
 11230  00149E                     _servoInterruptService:
 11231                           	opt stack 21
 11232                           
 11233                           ;servo.c: 49: int flags[4];
 11234                           ;servo.c: 50: flags[0] = TMR0IF;
 11235                           
 11236                           ;incstack = 0
 11237  00149E  A4F2               	btfss	intcon,2,c	;volatile
 11238  0014A0  D002               	goto	i2u401_40
 11239  0014A2  0E01               	movlw	1
 11240  0014A4  D001               	goto	i2u402_40
 11241  0014A6                     i2u401_40:
 11242  0014A6  0E00               	movlw	0
 11243  0014A8                     i2u402_40:
 11244  0014A8  6E0C               	movwf	servoInterruptService@flags,c
 11245  0014AA  6A0D               	clrf	servoInterruptService@flags+1,c
 11246                           
 11247                           ;servo.c: 51: flags[1] = TMR1IF;
 11248  0014AC  A09E               	btfss	3998,0,c	;volatile
 11249  0014AE  D002               	goto	i2u403_40
 11250  0014B0  0E01               	movlw	1
 11251  0014B2  D001               	goto	i2u404_40
 11252  0014B4                     i2u403_40:
 11253  0014B4  0E00               	movlw	0
 11254  0014B6                     i2u404_40:
 11255  0014B6  6E0E               	movwf	servoInterruptService@flags+2,c
 11256  0014B8  6A0F               	clrf	servoInterruptService@flags+3,c
 11257                           
 11258                           ;servo.c: 52: flags[2] = TMR2IF;
 11259  0014BA  A29E               	btfss	3998,1,c	;volatile
 11260  0014BC  D002               	goto	i2u405_40
 11261  0014BE  0E01               	movlw	1
 11262  0014C0  D001               	goto	i2u406_40
 11263  0014C2                     i2u405_40:
 11264  0014C2  0E00               	movlw	0
 11265  0014C4                     i2u406_40:
 11266  0014C4  6E10               	movwf	servoInterruptService@flags+4,c
 11267  0014C6  6A11               	clrf	servoInterruptService@flags+5,c
 11268                           
 11269                           ;servo.c: 53: flags[3] = TMR3IF;
 11270  0014C8  A2A1               	btfss	4001,1,c	;volatile
 11271  0014CA  D002               	goto	i2u407_40
 11272  0014CC  0E01               	movlw	1
 11273  0014CE  D001               	goto	i2u408_40
 11274  0014D0                     i2u407_40:
 11275  0014D0  0E00               	movlw	0
 11276  0014D2                     i2u408_40:
 11277  0014D2  6E12               	movwf	servoInterruptService@flags+6,c
 11278  0014D4  6A13               	clrf	servoInterruptService@flags+7,c
 11279                           
 11280                           ;servo.c: 55: for(int i = 0; i < 4; i++){
 11281  0014D6  0E00               	movlw	0
 11282  0014D8  6E15               	movwf	servoInterruptService@i+1,c
 11283  0014DA  0E00               	movlw	0
 11284  0014DC  6E14               	movwf	servoInterruptService@i,c
 11285  0014DE  BE15               	btfsc	servoInterruptService@i+1,7,c
 11286  0014E0  D008               	goto	i2l4549
 11287  0014E2  5015               	movf	servoInterruptService@i+1,w,c
 11288  0014E4  E105               	bnz	i2u409_40
 11289  0014E6  0E04               	movlw	4
 11290  0014E8  5C14               	subwf	servoInterruptService@i,w,c
 11291  0014EA  B0D8               	btfsc	status,0,c
 11292  0014EC  0012               	return	
 11293  0014EE  D001               	goto	i2l4549
 11294  0014F0                     i2u409_40:
 11295  0014F0  0012               	return	
 11296  0014F2                     i2l4549:
 11297                           
 11298                           ;servo.c: 56: if(flags[i]){
 11299  0014F2  90D8               	bcf	status,0,c
 11300  0014F4  3414               	rlcf	servoInterruptService@i,w,c
 11301  0014F6  6ED9               	movwf	fsr2l,c
 11302  0014F8  3415               	rlcf	servoInterruptService@i+1,w,c
 11303  0014FA  6EDA               	movwf	fsr2h,c
 11304  0014FC  0E0C               	movlw	low servoInterruptService@flags
 11305  0014FE  26D9               	addwf	fsr2l,f,c
 11306  001500  0E00               	movlw	high servoInterruptService@flags
 11307  001502  22DA               	addwfc	fsr2h,f,c
 11308  001504  50DE               	movf	postinc2,w,c
 11309  001506  10DE               	iorwf	postinc2,w,c
 11310  001508  B4D8               	btfsc	status,2,c
 11311  00150A  D0AB               	goto	i2l4563
 11312                           
 11313                           ;servo.c: 58: if(digitalRead(port[i],pin[i])){
 11314  00150C  90D8               	bcf	status,0,c
 11315  00150E  3414               	rlcf	servoInterruptService@i,w,c
 11316  001510  6ED9               	movwf	fsr2l,c
 11317  001512  3415               	rlcf	servoInterruptService@i+1,w,c
 11318  001514  6EDA               	movwf	fsr2h,c
 11319  001516  0E43               	movlw	low _port
 11320  001518  26D9               	addwf	fsr2l,f,c
 11321  00151A  0E01               	movlw	high _port
 11322  00151C  22DA               	addwfc	fsr2h,f,c
 11323  00151E  CFDE F001          	movff	postinc2,i2digitalRead@port
 11324  001522  CFDD F002          	movff	postdec2,i2digitalRead@port+1
 11325  001526  90D8               	bcf	status,0,c
 11326  001528  3414               	rlcf	servoInterruptService@i,w,c
 11327  00152A  6ED9               	movwf	fsr2l,c
 11328  00152C  3415               	rlcf	servoInterruptService@i+1,w,c
 11329  00152E  6EDA               	movwf	fsr2h,c
 11330  001530  0E3B               	movlw	low _pin
 11331  001532  26D9               	addwf	fsr2l,f,c
 11332  001534  0E01               	movlw	high _pin
 11333  001536  22DA               	addwfc	fsr2h,f,c
 11334  001538  CFDE F003          	movff	postinc2,i2digitalRead@pin
 11335  00153C  CFDD F004          	movff	postdec2,i2digitalRead@pin+1
 11336  001540  EC4A  F010         	call	i2_digitalRead	;wreg free
 11337  001544  5001               	movf	?i2_digitalRead,w,c
 11338  001546  1002               	iorwf	?i2_digitalRead+1,w,c
 11339  001548  B4D8               	btfsc	status,2,c
 11340  00154A  D02F               	goto	i2l4557
 11341                           
 11342                           ;servo.c: 59: startTimer(i,15535);
 11343  00154C  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 11344  001550  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 11345  001554  0EAF               	movlw	175
 11346  001556  6E03               	movwf	i2startTimer@val,c
 11347  001558  0E3C               	movlw	60
 11348  00155A  6E04               	movwf	i2startTimer@val+1,c
 11349  00155C  0E00               	movlw	0
 11350  00155E  6E05               	movwf	i2startTimer@val+2,c
 11351  001560  0E00               	movlw	0
 11352  001562  6E06               	movwf	i2startTimer@val+3,c
 11353  001564  EC32  F015         	call	i2_startTimer	;wreg free
 11354                           
 11355                           ;servo.c: 60: digitalWrite(port[i],pin[i],0);
 11356  001568  90D8               	bcf	status,0,c
 11357  00156A  3414               	rlcf	servoInterruptService@i,w,c
 11358  00156C  6ED9               	movwf	fsr2l,c
 11359  00156E  3415               	rlcf	servoInterruptService@i+1,w,c
 11360  001570  6EDA               	movwf	fsr2h,c
 11361  001572  0E43               	movlw	low _port
 11362  001574  26D9               	addwf	fsr2l,f,c
 11363  001576  0E01               	movlw	high _port
 11364  001578  22DA               	addwfc	fsr2h,f,c
 11365  00157A  CFDE F001          	movff	postinc2,i2digitalWrite@port
 11366  00157E  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
 11367  001582  90D8               	bcf	status,0,c
 11368  001584  3414               	rlcf	servoInterruptService@i,w,c
 11369  001586  6ED9               	movwf	fsr2l,c
 11370  001588  3415               	rlcf	servoInterruptService@i+1,w,c
 11371  00158A  6EDA               	movwf	fsr2h,c
 11372  00158C  0E3B               	movlw	low _pin
 11373  00158E  26D9               	addwf	fsr2l,f,c
 11374  001590  0E01               	movlw	high _pin
 11375  001592  22DA               	addwfc	fsr2h,f,c
 11376  001594  CFDE F003          	movff	postinc2,i2digitalWrite@pin
 11377  001598  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
 11378  00159C  0E00               	movlw	0
 11379  00159E  6E06               	movwf	i2digitalWrite@val+1,c
 11380  0015A0  0E00               	movlw	0
 11381  0015A2  6E05               	movwf	i2digitalWrite@val,c
 11382  0015A4  EC50  F011         	call	i2_digitalWrite	;wreg free
 11383                           
 11384                           ;servo.c: 61: }
 11385  0015A8  D047               	goto	i2l4561
 11386  0015AA                     i2l4557:
 11387                           
 11388                           ;servo.c: 62: else{
 11389                           ;servo.c: 63: startTimer(i, pulse[i]);
 11390  0015AA  C014  F001         	movff	servoInterruptService@i,i2startTimer@timer
 11391  0015AE  C015  F002         	movff	servoInterruptService@i+1,i2startTimer@timer+1
 11392  0015B2  0E2B               	movlw	low _pulse
 11393  0015B4  6E0A               	movwf	??_servoInterruptService& (0+255),c
 11394  0015B6  0E01               	movlw	high _pulse
 11395  0015B8  6E0B               	movwf	(??_servoInterruptService+1)& (0+255),c
 11396  0015BA  90D8               	bcf	status,0,c
 11397  0015BC  3414               	rlcf	servoInterruptService@i,w,c
 11398  0015BE  6ED9               	movwf	fsr2l,c
 11399  0015C0  3415               	rlcf	servoInterruptService@i+1,w,c
 11400  0015C2  6EDA               	movwf	fsr2h,c
 11401  0015C4  90D8               	bcf	status,0,c
 11402  0015C6  36D9               	rlcf	fsr2l,f,c
 11403  0015C8  36DA               	rlcf	fsr2h,f,c
 11404  0015CA  500A               	movf	??_servoInterruptService,w,c
 11405  0015CC  26D9               	addwf	fsr2l,f,c
 11406  0015CE  500B               	movf	??_servoInterruptService+1,w,c
 11407  0015D0  22DA               	addwfc	fsr2h,f,c
 11408  0015D2  CFDE F003          	movff	postinc2,i2startTimer@val
 11409  0015D6  CFDE F004          	movff	postinc2,i2startTimer@val+1
 11410  0015DA  CFDE F005          	movff	postinc2,i2startTimer@val+2
 11411  0015DE  CFDE F006          	movff	postinc2,i2startTimer@val+3
 11412  0015E2  EC32  F015         	call	i2_startTimer	;wreg free
 11413                           
 11414                           ;servo.c: 64: digitalWrite(port[i],pin[i],1);
 11415  0015E6  90D8               	bcf	status,0,c
 11416  0015E8  3414               	rlcf	servoInterruptService@i,w,c
 11417  0015EA  6ED9               	movwf	fsr2l,c
 11418  0015EC  3415               	rlcf	servoInterruptService@i+1,w,c
 11419  0015EE  6EDA               	movwf	fsr2h,c
 11420  0015F0  0E43               	movlw	low _port
 11421  0015F2  26D9               	addwf	fsr2l,f,c
 11422  0015F4  0E01               	movlw	high _port
 11423  0015F6  22DA               	addwfc	fsr2h,f,c
 11424  0015F8  CFDE F001          	movff	postinc2,i2digitalWrite@port
 11425  0015FC  CFDD F002          	movff	postdec2,i2digitalWrite@port+1
 11426  001600  90D8               	bcf	status,0,c
 11427  001602  3414               	rlcf	servoInterruptService@i,w,c
 11428  001604  6ED9               	movwf	fsr2l,c
 11429  001606  3415               	rlcf	servoInterruptService@i+1,w,c
 11430  001608  6EDA               	movwf	fsr2h,c
 11431  00160A  0E3B               	movlw	low _pin
 11432  00160C  26D9               	addwf	fsr2l,f,c
 11433  00160E  0E01               	movlw	high _pin
 11434  001610  22DA               	addwfc	fsr2h,f,c
 11435  001612  CFDE F003          	movff	postinc2,i2digitalWrite@pin
 11436  001616  CFDD F004          	movff	postdec2,i2digitalWrite@pin+1
 11437  00161A  0E00               	movlw	0
 11438  00161C  6E06               	movwf	i2digitalWrite@val+1,c
 11439  00161E  0E01               	movlw	1
 11440  001620  6E05               	movwf	i2digitalWrite@val,c
 11441  001622  EC50  F011         	call	i2_digitalWrite	;wreg free
 11442                           
 11443                           ;servo.c: 65: }
 11444                           ;servo.c: 68: switch(i){
 11445  001626  D008               	goto	i2l4561
 11446  001628                     i2l515:
 11447  001628  94F2               	bcf	intcon,2,c	;volatile
 11448  00162A  D01B               	goto	i2l4563
 11449  00162C                     i2l517:
 11450  00162C  909E               	bcf	3998,0,c	;volatile
 11451  00162E  D019               	goto	i2l4563
 11452  001630                     i2l518:
 11453  001630  929E               	bcf	3998,1,c	;volatile
 11454  001632  D017               	goto	i2l4563
 11455  001634                     i2l519:
 11456  001634  92A1               	bcf	4001,1,c	;volatile
 11457                           
 11458                           ;servo.c: 73: }
 11459  001636  D015               	goto	i2l4563
 11460  001638                     i2l4561:
 11461  001638  C014  F00A         	movff	servoInterruptService@i,??_servoInterruptService
 11462  00163C  C015  F00B         	movff	servoInterruptService@i+1,??_servoInterruptService+1
 11463                           
 11464                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11465                           ; Switch size 1, requested type "space"
 11466                           ; Number of cases is 1, Range of values is 0 to 0
 11467                           ; switch strategies available:
 11468                           ; Name         Instructions Cycles
 11469                           ; simple_byte            4     3 (average)
 11470                           ;	Chosen strategy is simple_byte
 11471  001640  500B               	movf	??_servoInterruptService+1,w,c
 11472  001642  0A00               	xorlw	0	; case 0
 11473  001644  A4D8               	btfss	status,2,c
 11474  001646  D00D               	goto	i2l4563
 11475                           
 11476                           ; Switch size 1, requested type "space"
 11477                           ; Number of cases is 4, Range of values is 0 to 3
 11478                           ; switch strategies available:
 11479                           ; Name         Instructions Cycles
 11480                           ; simple_byte           13     7 (average)
 11481                           ;	Chosen strategy is simple_byte
 11482  001648  500A               	movf	??_servoInterruptService,w,c
 11483  00164A  0A00               	xorlw	0	; case 0
 11484  00164C  B4D8               	btfsc	status,2,c
 11485  00164E  D7EC               	goto	i2l515
 11486  001650  0A01               	xorlw	1	; case 1
 11487  001652  B4D8               	btfsc	status,2,c
 11488  001654  D7EB               	goto	i2l517
 11489  001656  0A03               	xorlw	3	; case 2
 11490  001658  B4D8               	btfsc	status,2,c
 11491  00165A  D7EA               	goto	i2l518
 11492  00165C  0A01               	xorlw	1	; case 3
 11493  00165E  B4D8               	btfsc	status,2,c
 11494  001660  D7E9               	goto	i2l519
 11495  001662                     i2l4563:
 11496  001662  4A14               	infsnz	servoInterruptService@i,f,c
 11497  001664  2A15               	incf	servoInterruptService@i+1,f,c
 11498  001666  BE15               	btfsc	servoInterruptService@i+1,7,c
 11499  001668  D744               	goto	i2l4549
 11500  00166A  5015               	movf	servoInterruptService@i+1,w,c
 11501  00166C  E101               	bnz	i2l520
 11502  00166E  D73B               	goto	L5
 11503  001670                     i2l520:
 11504  001670  0012               	return		;funcret
 11505  001672                     __end_of_servoInterruptService:
 11506                           	opt stack 0
 11507                           pclatu	equ	0xFFB
 11508                           pclath	equ	0xFFA
 11509                           tblptru	equ	0xFF8
 11510                           tblptrh	equ	0xFF7
 11511                           tblptrl	equ	0xFF6
 11512                           tablat	equ	0xFF5
 11513                           prodh	equ	0xFF4
 11514                           prodl	equ	0xFF3
 11515                           intcon	equ	0xFF2
 11516                           intcon3	equ	0xFF0
 11517                           postinc0	equ	0xFEE
 11518                           fsr0h	equ	0xFEA
 11519                           fsr0l	equ	0xFE9
 11520                           wreg	equ	0xFE8
 11521                           postdec1	equ	0xFE5
 11522                           plusw1	equ	0xFE3
 11523                           fsr1h	equ	0xFE2
 11524                           fsr1l	equ	0xFE1
 11525                           indf2	equ	0xFDF
 11526                           postinc2	equ	0xFDE
 11527                           postdec2	equ	0xFDD
 11528                           plusw2	equ	0xFDB
 11529                           fsr2h	equ	0xFDA
 11530                           fsr2l	equ	0xFD9
 11531                           status	equ	0xFD8
 11532                           
 11533 ;; *************** function i2_startTimer *****************
 11534 ;; Defined at:
 11535 ;;		line 75 in file "timer.c"
 11536 ;; Parameters:    Size  Location     Type
 11537 ;;  timer           2    0[COMRAM] int 
 11538 ;;  val             4    2[COMRAM] long 
 11539 ;; Auto vars:     Size  Location     Type
 11540 ;;		None
 11541 ;; Return value:  Size  Location     Type
 11542 ;;                  1    wreg      void 
 11543 ;; Registers used:
 11544 ;;		wreg, status,2, status,0
 11545 ;; Tracked objects:
 11546 ;;		On entry : 0/0
 11547 ;;		On exit  : 0/0
 11548 ;;		Unchanged: 0/0
 11549 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11550 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11551 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11552 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11553 ;;      Totals:         8       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11554 ;;Total ram usage:        8 bytes
 11555 ;; Hardware stack levels used:    1
 11556 ;; This function calls:
 11557 ;;		Nothing
 11558 ;; This function is called by:
 11559 ;;		_servoInterruptService
 11560 ;; This function uses a non-reentrant model
 11561 ;;
 11562                           
 11563                           	psect	text57
 11564  002A64                     __ptext57:
 11565                           	opt stack 0
 11566  002A64                     i2_startTimer:
 11567                           	opt stack 21
 11568                           
 11569                           ;timer.c: 76: switch(timer){
 11570                           
 11571                           ;incstack = 0
 11572  002A64  D012               	goto	i2l4387
 11573  002A66                     i2l375:
 11574                           
 11575                           ;timer.c: 78: TMR0H = val>>8;
 11576  002A66  C004  FFD7         	movff	i2startTimer@val+1,4055	;volatile
 11577                           
 11578                           ;timer.c: 79: TMR0L = val;
 11579  002A6A  C003  FFD6         	movff	i2startTimer@val,4054	;volatile
 11580                           
 11581                           ;timer.c: 80: T0CON |= 1<<7;
 11582  002A6E  8ED5               	bsf	4053,7,c	;volatile
 11583                           
 11584                           ;timer.c: 81: break;
 11585  002A70  0012               	return	
 11586  002A72                     i2l377:
 11587                           
 11588                           ;timer.c: 83: TMR1H = val>>8;
 11589  002A72  C004  FFCF         	movff	i2startTimer@val+1,4047	;volatile
 11590                           
 11591                           ;timer.c: 84: TMR1L = val;
 11592  002A76  C003  FFCE         	movff	i2startTimer@val,4046	;volatile
 11593                           
 11594                           ;timer.c: 85: T1CON |= 1<<0;
 11595  002A7A  80CD               	bsf	4045,0,c	;volatile
 11596                           
 11597                           ;timer.c: 86: break;
 11598  002A7C  0012               	return	
 11599  002A7E                     i2l378:
 11600                           
 11601                           ;timer.c: 88: TMR3H = val>>8;
 11602  002A7E  C004  FFB3         	movff	i2startTimer@val+1,4019	;volatile
 11603                           
 11604                           ;timer.c: 89: TMR3L = val;
 11605  002A82  C003  FFB2         	movff	i2startTimer@val,4018	;volatile
 11606                           
 11607                           ;timer.c: 90: T3CON |= 1<<0;
 11608  002A86  80B1               	bsf	4017,0,c	;volatile
 11609                           
 11610                           ;timer.c: 91: }
 11611  002A88  0012               	return	
 11612  002A8A                     i2l4387:
 11613  002A8A  C001  F007         	movff	i2startTimer@timer,??i2_startTimer
 11614  002A8E  C002  F008         	movff	i2startTimer@timer+1,??i2_startTimer+1
 11615                           
 11616                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11617                           ; Switch size 1, requested type "space"
 11618                           ; Number of cases is 1, Range of values is 0 to 0
 11619                           ; switch strategies available:
 11620                           ; Name         Instructions Cycles
 11621                           ; simple_byte            4     3 (average)
 11622                           ;	Chosen strategy is simple_byte
 11623  002A92  5008               	movf	??i2_startTimer+1,w,c
 11624  002A94  0A00               	xorlw	0	; case 0
 11625  002A96  A4D8               	btfss	status,2,c
 11626  002A98  0012               	return	
 11627                           
 11628                           ; Switch size 1, requested type "space"
 11629                           ; Number of cases is 3, Range of values is 0 to 3
 11630                           ; switch strategies available:
 11631                           ; Name         Instructions Cycles
 11632                           ; simple_byte           10     6 (average)
 11633                           ;	Chosen strategy is simple_byte
 11634  002A9A  5007               	movf	??i2_startTimer,w,c
 11635  002A9C  0A00               	xorlw	0	; case 0
 11636  002A9E  B4D8               	btfsc	status,2,c
 11637  002AA0  D7E2               	goto	i2l375
 11638  002AA2  0A01               	xorlw	1	; case 1
 11639  002AA4  B4D8               	btfsc	status,2,c
 11640  002AA6  D7E5               	goto	i2l377
 11641  002AA8  0A02               	xorlw	2	; case 3
 11642  002AAA  A4D8               	btfss	status,2,c
 11643  002AAC  0012               	return	
 11644  002AAE  D7E7               	goto	i2l378
 11645  002AB0                     __end_ofi2_startTimer:
 11646                           	opt stack 0
 11647                           pclatu	equ	0xFFB
 11648                           pclath	equ	0xFFA
 11649                           tblptru	equ	0xFF8
 11650                           tblptrh	equ	0xFF7
 11651                           tblptrl	equ	0xFF6
 11652                           tablat	equ	0xFF5
 11653                           prodh	equ	0xFF4
 11654                           prodl	equ	0xFF3
 11655                           intcon	equ	0xFF2
 11656                           intcon3	equ	0xFF0
 11657                           postinc0	equ	0xFEE
 11658                           fsr0h	equ	0xFEA
 11659                           fsr0l	equ	0xFE9
 11660                           wreg	equ	0xFE8
 11661                           postdec1	equ	0xFE5
 11662                           plusw1	equ	0xFE3
 11663                           fsr1h	equ	0xFE2
 11664                           fsr1l	equ	0xFE1
 11665                           indf2	equ	0xFDF
 11666                           postinc2	equ	0xFDE
 11667                           postdec2	equ	0xFDD
 11668                           plusw2	equ	0xFDB
 11669                           fsr2h	equ	0xFDA
 11670                           fsr2l	equ	0xFD9
 11671                           status	equ	0xFD8
 11672                           
 11673 ;; *************** function i2_digitalWrite *****************
 11674 ;; Defined at:
 11675 ;;		line 53 in file "iopin.c"
 11676 ;; Parameters:    Size  Location     Type
 11677 ;;  port            2    0[COMRAM] int 
 11678 ;;  pin             2    2[COMRAM] int 
 11679 ;;  val             2    4[COMRAM] int 
 11680 ;; Auto vars:     Size  Location     Type
 11681 ;;		None
 11682 ;; Return value:  Size  Location     Type
 11683 ;;                  1    wreg      void 
 11684 ;; Registers used:
 11685 ;;		wreg, status,2, status,0
 11686 ;; Tracked objects:
 11687 ;;		On entry : 0/0
 11688 ;;		On exit  : 0/0
 11689 ;;		Unchanged: 0/0
 11690 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11691 ;;      Params:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11692 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11693 ;;      Temps:          3       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11694 ;;      Totals:         9       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11695 ;;Total ram usage:        9 bytes
 11696 ;; Hardware stack levels used:    1
 11697 ;; This function calls:
 11698 ;;		Nothing
 11699 ;; This function is called by:
 11700 ;;		_servoInterruptService
 11701 ;; This function uses a non-reentrant model
 11702 ;;
 11703                           
 11704                           	psect	text58
 11705  0022A0                     __ptext58:
 11706                           	opt stack 0
 11707  0022A0                     i2_digitalWrite:
 11708                           	opt stack 21
 11709                           
 11710                           ;iopin.c: 54: pin = 1 << pin;
 11711                           
 11712                           ;incstack = 0
 11713  0022A0  C003  F007         	movff	i2digitalWrite@pin,??i2_digitalWrite
 11714  0022A4  0E01               	movlw	1
 11715  0022A6  6E08               	movwf	(??i2_digitalWrite+1)& (0+255),c
 11716  0022A8  0E00               	movlw	0
 11717  0022AA  6E09               	movwf	(??i2_digitalWrite+2)& (0+255),c
 11718  0022AC  2A07               	incf	??i2_digitalWrite,f,c
 11719  0022AE  D003               	goto	i2u374_44
 11720  0022B0                     i2u374_45:
 11721  0022B0  90D8               	bcf	status,0,c
 11722  0022B2  3608               	rlcf	??i2_digitalWrite+1,f,c
 11723  0022B4  3609               	rlcf	??i2_digitalWrite+2,f,c
 11724  0022B6                     i2u374_44:
 11725  0022B6  2E07               	decfsz	??i2_digitalWrite,f,c
 11726  0022B8  D7FB               	goto	i2u374_45
 11727  0022BA  C008  F003         	movff	??i2_digitalWrite+1,i2digitalWrite@pin
 11728  0022BE  C009  F004         	movff	??i2_digitalWrite+2,i2digitalWrite@pin+1
 11729                           
 11730                           ;iopin.c: 55: if(val == 0){
 11731  0022C2  5005               	movf	i2digitalWrite@val,w,c
 11732  0022C4  1006               	iorwf	i2digitalWrite@val+1,w,c
 11733  0022C6  A4D8               	btfss	status,2,c
 11734  0022C8  D02B               	goto	i2l4373
 11735                           
 11736                           ;iopin.c: 56: pin ^= 0xff;
 11737  0022CA  0EFF               	movlw	255
 11738  0022CC  1A03               	xorwf	i2digitalWrite@pin,f,c
 11739                           
 11740                           ;iopin.c: 57: }
 11741                           ;iopin.c: 59: switch(port){
 11742  0022CE  D028               	goto	i2l4373
 11743  0022D0                     i2l4349:
 11744  0022D0  0405               	decf	i2digitalWrite@val,w,c
 11745  0022D2  1006               	iorwf	i2digitalWrite@val+1,w,c
 11746  0022D4  A4D8               	btfss	status,2,c
 11747  0022D6  D003               	goto	i2l4353
 11748  0022D8  5003               	movf	i2digitalWrite@pin,w,c
 11749  0022DA  1289               	iorwf	3977,f,c	;volatile
 11750  0022DC  0012               	return	
 11751  0022DE                     i2l4353:
 11752                           
 11753                           ;iopin.c: 61: else LATA &= pin;
 11754  0022DE  5003               	movf	i2digitalWrite@pin,w,c
 11755  0022E0  1689               	andwf	3977,f,c	;volatile
 11756                           
 11757                           ;iopin.c: 62: break;
 11758  0022E2  0012               	return	
 11759  0022E4                     i2l4355:
 11760  0022E4  0405               	decf	i2digitalWrite@val,w,c
 11761  0022E6  1006               	iorwf	i2digitalWrite@val+1,w,c
 11762  0022E8  A4D8               	btfss	status,2,c
 11763  0022EA  D003               	goto	i2l4359
 11764  0022EC  5003               	movf	i2digitalWrite@pin,w,c
 11765  0022EE  128A               	iorwf	3978,f,c	;volatile
 11766  0022F0  0012               	return	
 11767  0022F2                     i2l4359:
 11768                           
 11769                           ;iopin.c: 64: else LATB &= pin;
 11770  0022F2  5003               	movf	i2digitalWrite@pin,w,c
 11771  0022F4  168A               	andwf	3978,f,c	;volatile
 11772                           
 11773                           ;iopin.c: 65: break;
 11774  0022F6  0012               	return	
 11775  0022F8                     i2l4361:
 11776  0022F8  0405               	decf	i2digitalWrite@val,w,c
 11777  0022FA  1006               	iorwf	i2digitalWrite@val+1,w,c
 11778  0022FC  A4D8               	btfss	status,2,c
 11779  0022FE  D003               	goto	i2l4365
 11780  002300  5003               	movf	i2digitalWrite@pin,w,c
 11781  002302  128B               	iorwf	3979,f,c	;volatile
 11782  002304  0012               	return	
 11783  002306                     i2l4365:
 11784                           
 11785                           ;iopin.c: 67: else LATC &= pin;
 11786  002306  5003               	movf	i2digitalWrite@pin,w,c
 11787  002308  168B               	andwf	3979,f,c	;volatile
 11788                           
 11789                           ;iopin.c: 68: break;
 11790  00230A  0012               	return	
 11791  00230C                     i2l4367:
 11792  00230C  0405               	decf	i2digitalWrite@val,w,c
 11793  00230E  1006               	iorwf	i2digitalWrite@val+1,w,c
 11794  002310  A4D8               	btfss	status,2,c
 11795  002312  D003               	goto	i2l4371
 11796  002314  5003               	movf	i2digitalWrite@pin,w,c
 11797  002316  128C               	iorwf	3980,f,c	;volatile
 11798  002318  0012               	return	
 11799  00231A                     i2l4371:
 11800                           
 11801                           ;iopin.c: 70: else LATD &= pin;
 11802  00231A  5003               	movf	i2digitalWrite@pin,w,c
 11803  00231C  168C               	andwf	3980,f,c	;volatile
 11804                           
 11805                           ;iopin.c: 71: }
 11806  00231E  0012               	return	
 11807  002320                     i2l4373:
 11808  002320  C001  F007         	movff	i2digitalWrite@port,??i2_digitalWrite
 11809  002324  C002  F008         	movff	i2digitalWrite@port+1,??i2_digitalWrite+1
 11810                           
 11811                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11812                           ; Switch size 1, requested type "space"
 11813                           ; Number of cases is 1, Range of values is 0 to 0
 11814                           ; switch strategies available:
 11815                           ; Name         Instructions Cycles
 11816                           ; simple_byte            4     3 (average)
 11817                           ;	Chosen strategy is simple_byte
 11818  002328  5008               	movf	??i2_digitalWrite+1,w,c
 11819  00232A  0A00               	xorlw	0	; case 0
 11820  00232C  A4D8               	btfss	status,2,c
 11821  00232E  0012               	return	
 11822                           
 11823                           ; Switch size 1, requested type "space"
 11824                           ; Number of cases is 4, Range of values is 0 to 3
 11825                           ; switch strategies available:
 11826                           ; Name         Instructions Cycles
 11827                           ; simple_byte           13     7 (average)
 11828                           ;	Chosen strategy is simple_byte
 11829  002330  5007               	movf	??i2_digitalWrite,w,c
 11830  002332  0A00               	xorlw	0	; case 0
 11831  002334  B4D8               	btfsc	status,2,c
 11832  002336  D7CC               	goto	i2l4349
 11833  002338  0A01               	xorlw	1	; case 1
 11834  00233A  B4D8               	btfsc	status,2,c
 11835  00233C  D7D3               	goto	i2l4355
 11836  00233E  0A03               	xorlw	3	; case 2
 11837  002340  B4D8               	btfsc	status,2,c
 11838  002342  D7DA               	goto	i2l4361
 11839  002344  0A01               	xorlw	1	; case 3
 11840  002346  A4D8               	btfss	status,2,c
 11841  002348  0012               	return	
 11842  00234A  D7E0               	goto	i2l4367
 11843  00234C                     __end_ofi2_digitalWrite:
 11844                           	opt stack 0
 11845                           pclatu	equ	0xFFB
 11846                           pclath	equ	0xFFA
 11847                           tblptru	equ	0xFF8
 11848                           tblptrh	equ	0xFF7
 11849                           tblptrl	equ	0xFF6
 11850                           tablat	equ	0xFF5
 11851                           prodh	equ	0xFF4
 11852                           prodl	equ	0xFF3
 11853                           intcon	equ	0xFF2
 11854                           intcon3	equ	0xFF0
 11855                           postinc0	equ	0xFEE
 11856                           fsr0h	equ	0xFEA
 11857                           fsr0l	equ	0xFE9
 11858                           wreg	equ	0xFE8
 11859                           postdec1	equ	0xFE5
 11860                           plusw1	equ	0xFE3
 11861                           fsr1h	equ	0xFE2
 11862                           fsr1l	equ	0xFE1
 11863                           indf2	equ	0xFDF
 11864                           postinc2	equ	0xFDE
 11865                           postdec2	equ	0xFDD
 11866                           plusw2	equ	0xFDB
 11867                           fsr2h	equ	0xFDA
 11868                           fsr2l	equ	0xFD9
 11869                           status	equ	0xFD8
 11870                           
 11871 ;; *************** function i2_digitalRead *****************
 11872 ;; Defined at:
 11873 ;;		line 43 in file "iopin.c"
 11874 ;; Parameters:    Size  Location     Type
 11875 ;;  port            2    0[COMRAM] int 
 11876 ;;  pin             2    2[COMRAM] int 
 11877 ;; Auto vars:     Size  Location     Type
 11878 ;;		None
 11879 ;; Return value:  Size  Location     Type
 11880 ;;                  2    0[COMRAM] int 
 11881 ;; Registers used:
 11882 ;;		wreg, status,2, status,0
 11883 ;; Tracked objects:
 11884 ;;		On entry : 0/0
 11885 ;;		On exit  : 0/0
 11886 ;;		Unchanged: 0/0
 11887 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 11888 ;;      Params:         4       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11889 ;;      Locals:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11890 ;;      Temps:          2       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11891 ;;      Totals:         6       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 11892 ;;Total ram usage:        6 bytes
 11893 ;; Hardware stack levels used:    1
 11894 ;; This function calls:
 11895 ;;		Nothing
 11896 ;; This function is called by:
 11897 ;;		_servoInterruptService
 11898 ;; This function uses a non-reentrant model
 11899 ;;
 11900                           
 11901                           	psect	text59
 11902  002094                     __ptext59:
 11903                           	opt stack 0
 11904  002094                     i2_digitalRead:
 11905                           	opt stack 21
 11906                           
 11907                           ;iopin.c: 44: switch(port){
 11908                           
 11909                           ;incstack = 0
 11910  002094  D040               	goto	i2l4339
 11911  002096                     i2l4321:
 11912  002096  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 11913  00209A  CF80 F006          	movff	3968,??i2_digitalRead+1	;volatile
 11914  00209E  2A05               	incf	??i2_digitalRead,f,c
 11915  0020A0  D002               	goto	i2u370_44
 11916  0020A2                     i2u370_45:
 11917  0020A2  90D8               	bcf	status,0,c
 11918  0020A4  3206               	rrcf	??i2_digitalRead+1,f,c
 11919  0020A6                     i2u370_44:
 11920  0020A6  2E05               	decfsz	??i2_digitalRead,f,c
 11921  0020A8  D7FC               	goto	i2u370_45
 11922  0020AA  0E01               	movlw	1
 11923  0020AC  1606               	andwf	??i2_digitalRead+1,f,c
 11924  0020AE  5006               	movf	??i2_digitalRead+1,w,c
 11925  0020B0  6E01               	movwf	?i2_digitalRead,c
 11926  0020B2  6A02               	clrf	?i2_digitalRead+1,c
 11927  0020B4  0012               	return	
 11928  0020B6                     i2l4325:
 11929  0020B6  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 11930  0020BA  CF81 F006          	movff	3969,??i2_digitalRead+1	;volatile
 11931  0020BE  2A05               	incf	??i2_digitalRead,f,c
 11932  0020C0  D002               	goto	i2u371_44
 11933  0020C2                     i2u371_45:
 11934  0020C2  90D8               	bcf	status,0,c
 11935  0020C4  3206               	rrcf	??i2_digitalRead+1,f,c
 11936  0020C6                     i2u371_44:
 11937  0020C6  2E05               	decfsz	??i2_digitalRead,f,c
 11938  0020C8  D7FC               	goto	i2u371_45
 11939  0020CA  0E01               	movlw	1
 11940  0020CC  1606               	andwf	??i2_digitalRead+1,f,c
 11941  0020CE  5006               	movf	??i2_digitalRead+1,w,c
 11942  0020D0  6E01               	movwf	?i2_digitalRead,c
 11943  0020D2  6A02               	clrf	?i2_digitalRead+1,c
 11944  0020D4  0012               	return	
 11945  0020D6                     i2l4329:
 11946  0020D6  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 11947  0020DA  CF82 F006          	movff	3970,??i2_digitalRead+1	;volatile
 11948  0020DE  2A05               	incf	??i2_digitalRead,f,c
 11949  0020E0  D002               	goto	i2u372_44
 11950  0020E2                     i2u372_45:
 11951  0020E2  90D8               	bcf	status,0,c
 11952  0020E4  3206               	rrcf	??i2_digitalRead+1,f,c
 11953  0020E6                     i2u372_44:
 11954  0020E6  2E05               	decfsz	??i2_digitalRead,f,c
 11955  0020E8  D7FC               	goto	i2u372_45
 11956  0020EA  0E01               	movlw	1
 11957  0020EC  1606               	andwf	??i2_digitalRead+1,f,c
 11958  0020EE  5006               	movf	??i2_digitalRead+1,w,c
 11959  0020F0  6E01               	movwf	?i2_digitalRead,c
 11960  0020F2  6A02               	clrf	?i2_digitalRead+1,c
 11961  0020F4  0012               	return	
 11962  0020F6                     i2l4333:
 11963  0020F6  C003  F005         	movff	i2digitalRead@pin,??i2_digitalRead
 11964  0020FA  CF83 F006          	movff	3971,??i2_digitalRead+1	;volatile
 11965  0020FE  2A05               	incf	??i2_digitalRead,f,c
 11966  002100  D002               	goto	i2u373_44
 11967  002102                     i2u373_45:
 11968  002102  90D8               	bcf	status,0,c
 11969  002104  3206               	rrcf	??i2_digitalRead+1,f,c
 11970  002106                     i2u373_44:
 11971  002106  2E05               	decfsz	??i2_digitalRead,f,c
 11972  002108  D7FC               	goto	i2u373_45
 11973  00210A  0E01               	movlw	1
 11974  00210C  1606               	andwf	??i2_digitalRead+1,f,c
 11975  00210E  5006               	movf	??i2_digitalRead+1,w,c
 11976  002110  6E01               	movwf	?i2_digitalRead,c
 11977  002112  6A02               	clrf	?i2_digitalRead+1,c
 11978  002114  0012               	return	
 11979  002116                     i2l4339:
 11980  002116  C001  F005         	movff	i2digitalRead@port,??i2_digitalRead
 11981  00211A  C002  F006         	movff	i2digitalRead@port+1,??i2_digitalRead+1
 11982                           
 11983                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
 11984                           ; Switch size 1, requested type "space"
 11985                           ; Number of cases is 1, Range of values is 0 to 0
 11986                           ; switch strategies available:
 11987                           ; Name         Instructions Cycles
 11988                           ; simple_byte            4     3 (average)
 11989                           ;	Chosen strategy is simple_byte
 11990  00211E  5006               	movf	??i2_digitalRead+1,w,c
 11991  002120  0A00               	xorlw	0	; case 0
 11992  002122  A4D8               	btfss	status,2,c
 11993  002124  D00D               	goto	i2l270
 11994                           
 11995                           ; Switch size 1, requested type "space"
 11996                           ; Number of cases is 4, Range of values is 0 to 3
 11997                           ; switch strategies available:
 11998                           ; Name         Instructions Cycles
 11999                           ; simple_byte           13     7 (average)
 12000                           ;	Chosen strategy is simple_byte
 12001  002126  5005               	movf	??i2_digitalRead,w,c
 12002  002128  0A00               	xorlw	0	; case 0
 12003  00212A  B4D8               	btfsc	status,2,c
 12004  00212C  D7B4               	goto	i2l4321
 12005  00212E  0A01               	xorlw	1	; case 1
 12006  002130  B4D8               	btfsc	status,2,c
 12007  002132  D7C1               	goto	i2l4325
 12008  002134  0A03               	xorlw	3	; case 2
 12009  002136  B4D8               	btfsc	status,2,c
 12010  002138  D7CE               	goto	i2l4329
 12011  00213A  0A01               	xorlw	1	; case 3
 12012  00213C  B4D8               	btfsc	status,2,c
 12013  00213E  D7DB               	goto	i2l4333
 12014  002140                     i2l270:
 12015                           
 12016                           ;iopin.c: 50: return -1;
 12017  002140  6801               	setf	?i2_digitalRead,c
 12018  002142  6802               	setf	?i2_digitalRead+1,c
 12019  002144  0012               	return		;funcret
 12020  002146                     __end_ofi2_digitalRead:
 12021                           	opt stack 0
 12022                           pclatu	equ	0xFFB
 12023                           pclath	equ	0xFFA
 12024                           tblptru	equ	0xFF8
 12025                           tblptrh	equ	0xFF7
 12026                           tblptrl	equ	0xFF6
 12027                           tablat	equ	0xFF5
 12028                           prodh	equ	0xFF4
 12029                           prodl	equ	0xFF3
 12030                           intcon	equ	0xFF2
 12031                           intcon3	equ	0xFF0
 12032                           postinc0	equ	0xFEE
 12033                           fsr0h	equ	0xFEA
 12034                           fsr0l	equ	0xFE9
 12035                           wreg	equ	0xFE8
 12036                           postdec1	equ	0xFE5
 12037                           plusw1	equ	0xFE3
 12038                           fsr1h	equ	0xFE2
 12039                           fsr1l	equ	0xFE1
 12040                           indf2	equ	0xFDF
 12041                           postinc2	equ	0xFDE
 12042                           postdec2	equ	0xFDD
 12043                           plusw2	equ	0xFDB
 12044                           fsr2h	equ	0xFDA
 12045                           fsr2l	equ	0xFD9
 12046                           status	equ	0xFD8
 12047                           
 12048 ;; *************** function _keyPressedInterruptService *****************
 12049 ;; Defined at:
 12050 ;;		line 49 in file "keypad.c"
 12051 ;; Parameters:    Size  Location     Type
 12052 ;;		None
 12053 ;; Auto vars:     Size  Location     Type
 12054 ;;  key             1    0[COMRAM] unsigned char 
 12055 ;; Return value:  Size  Location     Type
 12056 ;;                  1    wreg      void 
 12057 ;; Registers used:
 12058 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh
 12059 ;; Tracked objects:
 12060 ;;		On entry : 0/0
 12061 ;;		On exit  : 0/0
 12062 ;;		Unchanged: 0/0
 12063 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5   BANK6   BANK7   BANK8   BANK9  BANK10  BANK1
      +1  BANK12  BANK13  BANK14  BANK15
 12064 ;;      Params:         0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12065 ;;      Locals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12066 ;;      Temps:          0       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12067 ;;      Totals:         1       0       0       0       0       0       0       0       0       0       0       0       
      +0       0       0       0       0
 12068 ;;Total ram usage:        1 bytes
 12069 ;; Hardware stack levels used:    1
 12070 ;; This function calls:
 12071 ;;		Nothing
 12072 ;; This function is called by:
 12073 ;;		_service
 12074 ;; This function uses a non-reentrant model
 12075 ;;
 12076                           
 12077                           	psect	text60
 12078  002DD4                     __ptext60:
 12079                           	opt stack 0
 12080  002DD4                     _keyPressedInterruptService:
 12081                           	opt stack 22
 12082                           
 12083                           ;keypad.c: 50: char key = (PORTB & 0xF0) >> 4;
 12084                           
 12085                           ;incstack = 0
 12086  002DD4  3881               	swapf	3969,w,c	;volatile
 12087  002DD6  0B0F               	andlw	15
 12088  002DD8  0B0F               	andlw	15
 12089  002DDA  6E01               	movwf	keyPressedInterruptService@key,c
 12090                           
 12091                           ;keypad.c: 51: lastKey = keys[key];
 12092  002DDC  5001               	movf	keyPressedInterruptService@key,w,c
 12093  002DDE  0D01               	mullw	1
 12094  002DE0  0E69               	movlw	low _keys
 12095  002DE2  24F3               	addwf	prodl,w,c
 12096  002DE4  6EF6               	movwf	tblptrl,c
 12097  002DE6  0EFE               	movlw	high _keys
 12098  002DE8  20F4               	addwfc	prodh,w,c
 12099  002DEA  6EF7               	movwf	tblptrh,c
 12100  002DEC                     	if	0	;There are less than 3 active tblptr bytes
 12101  002DEC                     	endif
 12102  002DEC  0008               	tblrd		*
 12103  002DEE  CFF5 F05B          	movff	tablat,_lastKey
 12104  002DF2  0012               	return		;funcret
 12105  002DF4                     __end_of_keyPressedInterruptService:
 12106                           	opt stack 0
 12107                           pclatu	equ	0xFFB
 12108                           pclath	equ	0xFFA
 12109                           tblptru	equ	0xFF8
 12110                           tblptrh	equ	0xFF7
 12111                           tblptrl	equ	0xFF6
 12112                           tablat	equ	0xFF5
 12113                           prodh	equ	0xFF4
 12114                           prodl	equ	0xFF3
 12115                           intcon	equ	0xFF2
 12116                           intcon3	equ	0xFF0
 12117                           postinc0	equ	0xFEE
 12118                           fsr0h	equ	0xFEA
 12119                           fsr0l	equ	0xFE9
 12120                           wreg	equ	0xFE8
 12121                           postdec1	equ	0xFE5
 12122                           plusw1	equ	0xFE3
 12123                           fsr1h	equ	0xFE2
 12124                           fsr1l	equ	0xFE1
 12125                           indf2	equ	0xFDF
 12126                           postinc2	equ	0xFDE
 12127                           postdec2	equ	0xFDD
 12128                           plusw2	equ	0xFDB
 12129                           fsr2h	equ	0xFDA
 12130                           fsr2l	equ	0xFD9
 12131                           status	equ	0xFD8
 12132                           pclatu	equ	0xFFB
 12133                           pclath	equ	0xFFA
 12134                           tblptru	equ	0xFF8
 12135                           tblptrh	equ	0xFF7
 12136                           tblptrl	equ	0xFF6
 12137                           tablat	equ	0xFF5
 12138                           prodh	equ	0xFF4
 12139                           prodl	equ	0xFF3
 12140                           intcon	equ	0xFF2
 12141                           intcon3	equ	0xFF0
 12142                           postinc0	equ	0xFEE
 12143                           fsr0h	equ	0xFEA
 12144                           fsr0l	equ	0xFE9
 12145                           wreg	equ	0xFE8
 12146                           postdec1	equ	0xFE5
 12147                           plusw1	equ	0xFE3
 12148                           fsr1h	equ	0xFE2
 12149                           fsr1l	equ	0xFE1
 12150                           indf2	equ	0xFDF
 12151                           postinc2	equ	0xFDE
 12152                           postdec2	equ	0xFDD
 12153                           plusw2	equ	0xFDB
 12154                           fsr2h	equ	0xFDA
 12155                           fsr2l	equ	0xFD9
 12156                           status	equ	0xFD8
 12157                           
 12158                           	psect	rparam
 12159  0000                     pclatu	equ	0xFFB
 12160                           pclath	equ	0xFFA
 12161                           tblptru	equ	0xFF8
 12162                           tblptrh	equ	0xFF7
 12163                           tblptrl	equ	0xFF6
 12164                           tablat	equ	0xFF5
 12165                           prodh	equ	0xFF4
 12166                           prodl	equ	0xFF3
 12167                           intcon	equ	0xFF2
 12168                           intcon3	equ	0xFF0
 12169                           postinc0	equ	0xFEE
 12170                           fsr0h	equ	0xFEA
 12171                           fsr0l	equ	0xFE9
 12172                           wreg	equ	0xFE8
 12173                           postdec1	equ	0xFE5
 12174                           plusw1	equ	0xFE3
 12175                           fsr1h	equ	0xFE2
 12176                           fsr1l	equ	0xFE1
 12177                           indf2	equ	0xFDF
 12178                           postinc2	equ	0xFDE
 12179                           postdec2	equ	0xFDD
 12180                           plusw2	equ	0xFDB
 12181                           fsr2h	equ	0xFDA
 12182                           fsr2l	equ	0xFD9
 12183                           status	equ	0xFD8
 12184                           
 12185                           	psect	temp
 12186  00005C                     btemp:
 12187                           	opt stack 0
 12188  00005C                     	ds	1
 12189  0000                     int$flags	set	btemp
 12190                           pclatu	equ	0xFFB
 12191                           pclath	equ	0xFFA
 12192                           tblptru	equ	0xFF8
 12193                           tblptrh	equ	0xFF7
 12194                           tblptrl	equ	0xFF6
 12195                           tablat	equ	0xFF5
 12196                           prodh	equ	0xFF4
 12197                           prodl	equ	0xFF3
 12198                           intcon	equ	0xFF2
 12199                           intcon3	equ	0xFF0
 12200                           postinc0	equ	0xFEE
 12201                           fsr0h	equ	0xFEA
 12202                           fsr0l	equ	0xFE9
 12203                           wreg	equ	0xFE8
 12204                           postdec1	equ	0xFE5
 12205                           plusw1	equ	0xFE3
 12206                           fsr1h	equ	0xFE2
 12207                           fsr1l	equ	0xFE1
 12208                           indf2	equ	0xFDF
 12209                           postinc2	equ	0xFDE
 12210                           postdec2	equ	0xFDD
 12211                           plusw2	equ	0xFDB
 12212                           fsr2h	equ	0xFDA
 12213                           fsr2l	equ	0xFD9
 12214                           status	equ	0xFD8


Data Sizes:
    Strings     381
    Constant    174
    Data        56
    BSS         52
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          126     58      91
    BANK0           128     95     127
    BANK1           256     43      86
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0
    BANK6           256      0       0
    BANK7           256      0       0
    BANK8           256      0       0
    BANK9           256      0       0
    BANK10          256      0       0
    BANK11          256      0       0
    BANK12          256      0       0
    BANK13          256      0       0
    BANK14          256      0       0
    BANK15          128      0       0

Pointer List with Targets:

    printf@f	PTR const unsigned char  size(2) Largest target is 24
		 -> STR_22(CODE[17]), STR_21(CODE[18]), STR_20(CODE[17]), STR_19(CODE[18]), 
		 -> STR_18(CODE[17]), STR_17(CODE[19]), STR_16(CODE[17]), STR_15(CODE[18]), 
		 -> STR_14(CODE[17]), STR_13(CODE[18]), STR_12(CODE[17]), STR_11(CODE[18]), 
		 -> STR_10(CODE[9]), STR_9(CODE[8]), STR_8(CODE[24]), STR_7(CODE[15]), 
		 -> STR_6(CODE[17]), STR_5(CODE[21]), STR_4(CODE[17]), STR_3(CODE[14]), 
		 -> STR_2(CODE[20]), STR_1(CODE[8]), 

    printf@ap	PTR void [1] size(2) Largest target is 2
		 -> ?_printf(BANK0[2]), 

    sp__getTime	PTR int  size(2) Largest target is 14
		 -> getTime@time(COMRAM[14]), 

    pause@message	PTR unsigned char  size(2) Largest target is 24
		 -> STR_8(CODE[24]), STR_7(CODE[15]), STR_6(CODE[17]), STR_3(CODE[14]), 
		 -> STR_2(CODE[20]), 


Critical Paths under _main in COMRAM

    _angleToPulse->___ftdiv
    ___ftdiv->___altoft
    ___awtoft->___ftpack
    ___altoft->___ftpack
    _showInterface->_runMenu
    _setTime->_I2C_Master_Write
    _I2C_Master_Write->_I2C_Master_Wait
    _I2C_Master_Stop->_I2C_Master_Wait
    _I2C_Master_Start->_I2C_Master_Wait
    _initRTC->_I2C_Master_Init
    _I2C_Master_Init->___lldiv
    _printf->___llmod
    _lcdNewline->_lcdInst
    ___wmul->___awdiv
    ___ftmul->___ftdiv
    ___awdiv->___awmod
    ___lltoft->___ftpack
    ___llmod->___lldiv
    ___fttol->___ftdiv
    ___ftadd->___ftdiv
    _lcdClear->_lcdInst
    _initLCD->_lcdInst
    _lcdInst->_lcdNibble

Critical Paths under _service in COMRAM

    _service->_servoInterruptService
    _servoInterruptService->i2_digitalWrite

Critical Paths under _main in BANK0

    _main->_sortBattery
    _sortBattery->_setAngle
    _pause->_printf
    _initServo->_setAngle
    _setAngle->_angleToPulse
    _angleToPulse->___fttol
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf
    _printf->___fttol
    _scale->___ftmul
    _fround->___ftmul
    ___ftmul->___ftdiv
    ___fttol->___ftadd
    ___ftsub->___ftadd
    ___ftadd->_fround

Critical Paths under _service in BANK0

    None.

Critical Paths under _main in BANK1

    _main->_sortBattery
    _sortBattery->_printf
    _pause->_printf
    _initServo->_setAngle
    _runTime->_printf
    _runStats->_printf
    _runSelect->_printf
    _runMenu->_printf
    _mainMenu->_printf
    _dateTime->_printf

Critical Paths under _service in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _service in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _service in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _service in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Critical Paths under _service in BANK5

    None.

Critical Paths under _main in BANK6

    None.

Critical Paths under _service in BANK6

    None.

Critical Paths under _main in BANK7

    None.

Critical Paths under _service in BANK7

    None.

Critical Paths under _main in BANK8

    None.

Critical Paths under _service in BANK8

    None.

Critical Paths under _main in BANK9

    None.

Critical Paths under _service in BANK9

    None.

Critical Paths under _main in BANK10

    None.

Critical Paths under _service in BANK10

    None.

Critical Paths under _main in BANK11

    None.

Critical Paths under _service in BANK11

    None.

Critical Paths under _main in BANK12

    None.

Critical Paths under _service in BANK12

    None.

Critical Paths under _main in BANK13

    None.

Critical Paths under _service in BANK13

    None.

Critical Paths under _main in BANK14

    None.

Critical Paths under _service in BANK14

    None.

Critical Paths under _main in BANK15

    None.

Critical Paths under _service in BANK15

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0  607342
                       _digitalWrite
                            _initLCD
                          _initServo
                           _lcdClear
                           _pinSetup
                             _printf
                      _showInterface
                        _sortBattery
 ---------------------------------------------------------------------------------
 (1) _sortBattery                                         25    25      0  176035
                                             91 BANK0      4     4      0
                                             24 BANK1     19    19      0
                           ___altoft
                            ___ftdiv
                            ___ftmul
                         _analogRead
                        _digitalRead
                       _digitalWrite
                          _initServo
                           _lcdClear
                              _pause
                             _printf
                         _readKeypad
                           _setAngle
                          _stopServo
 ---------------------------------------------------------------------------------
 (2) _stopServo                                            4     2      2     108
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _pause                                                2     0      2   58030
                                             77 BANK0      2     0      2
                           _lcdClear
                             _printf
                         _readKeypad
 ---------------------------------------------------------------------------------
 (2) _initServo                                            8     0      8   23880
                                              6 BANK1      8     0      8
                          _initTimer
                           _setAngle
                         _startTimer
 ---------------------------------------------------------------------------------
 (3) _startTimer                                           8     2      6     693
                                             35 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (2) _setAngle                                            10     6      4   21522
                                             87 BANK0      4     0      4
                                              0 BANK1      6     6      0
                       _angleToPulse
                         _readKeypad (ARG)
 ---------------------------------------------------------------------------------
 (3) _angleToPulse                                        23    19      4   20690
                                             64 BANK0     23    19      4
                           ___altoft
                           ___awtoft
                            ___ftadd
                            ___ftdiv
                            ___ftmul
                            ___fttol
 ---------------------------------------------------------------------------------
 (4) ___ftdiv                                             15     9      6    3580
                                             53 COMRAM     3     3      0
                                              0 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awtoft                                             4     1      3    2794
                                             43 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___altoft                                            10     6      4    3173
                                             43 COMRAM    10     6      4
                           ___ftpack
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (3) _initTimer                                            4     2      2     185
                                             35 COMRAM     4     2      2
 ---------------------------------------------------------------------------------
 (2) _digitalWrite                                         9     3      6    1647
                                             35 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (2) _digitalRead                                          6     2      4     547
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) _analogRead                                           6     2      4     108
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (1) _showInterface                                        1     1      0  348005
                                             77 BANK0      1     1      0
                           _dateTime
                            _initRTC
                           _mainMenu
                         _readKeypad
                            _runMenu
                          _runSelect
                           _runStats
                            _runTime
                            _setTime
 ---------------------------------------------------------------------------------
 (2) _setTime                                              1     1      0     666
                                             38 COMRAM     1     1      0
                   _I2C_Master_Start
                    _I2C_Master_Stop
                   _I2C_Master_Write
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Write                                     2     0      2     598
                                             36 COMRAM     2     0      2
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Stop                                      0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Start                                     0     0      0       0
                    _I2C_Master_Wait
 ---------------------------------------------------------------------------------
 (4) _I2C_Master_Wait                                      1     1      0       0
                                             35 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _runTime                                              0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runStats                                             0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runSelect                                            0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _runMenu                                              1     1      0   57611
                                             57 COMRAM     1     1      0
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _readKeypad                                           1     1      0      34
                                             35 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _mainMenu                                             0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _initRTC                                              0     0      0    1196
                    _I2C_Master_Init
 ---------------------------------------------------------------------------------
 (3) _I2C_Master_Init                                      8     4      4    1196
                                             48 COMRAM     8     4      4
                            ___lldiv
 ---------------------------------------------------------------------------------
 (2) _dateTime                                             0     0      0   57580
                           _lcdClear
                             _printf
 ---------------------------------------------------------------------------------
 (2) _printf                                              45    38      7   57385
                                             64 BANK0     13     6      7
                                              0 BANK1     24    24      0
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                              _putch
                              _scale
 ---------------------------------------------------------------------------------
 (3) _scale                                               10     7      3   12847
                                             27 BANK0      7     4      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (3) _putch                                                1     1      0     421
                                             39 COMRAM     1     1      0
                         _lcdNewline
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNewline                                           0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (3) _fround                                              13    10      3   12568
                                             27 BANK0     10     7      3
                            ___awdiv
                            ___awmod
                            ___ftmul
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    2696
                                             49 COMRAM     6     2      4
                            ___awdiv (ARG)
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftmul                                             15     9      6    5650
                                             12 BANK0     15     9      6
                           ___altoft (ARG)
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                           ___ftpack
                             ___wmul (ARG)
                         _analogRead (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    1819
                                             35 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    1985
                                             41 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (3) __tdiv_to_l_                                         15     9      6     608
                                             35 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (3) __div_to_l_                                          12     6      6     827
                                             35 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (3) ___lltoft                                             9     5      4    2763
                                             43 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___llmod                                              9     1      8     848
                                             48 COMRAM     9     1      8
                            ___lldiv (ARG)
 ---------------------------------------------------------------------------------
 (3) ___lldiv                                             13     5      8    1011
                                             35 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (4) ___fttol                                             15    11      4     679
                                             49 BANK0     15    11      4
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftadd (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftsub                                              6     0      6    4903
                                             49 BANK0      6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (4) ___ftadd                                             12     6      6    4539
                                             37 BANK0     12     6      6
                           ___altoft (ARG)
                           ___awtoft (ARG)
                            ___ftdiv (ARG)
                            ___ftmul (ARG)
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (5) ___ftpack                                             8     3      5    2584
                                             35 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (3) ___ftneg                                              3     0      3     142
                                             35 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (3) ___ftge                                               9     3      6     660
                                             35 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (3) _lcdClear                                             0     0      0     195
                            _lcdInst
 ---------------------------------------------------------------------------------
 (1) _pinSetup                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _initLCD                                              1     1      0     195
                                             39 COMRAM     1     1      0
                            _lcdInst
 ---------------------------------------------------------------------------------
 (5) _lcdInst                                              2     2      0     195
                                             37 COMRAM     2     2      0
                          _lcdNibble
 ---------------------------------------------------------------------------------
 (4) _lcdNibble                                            2     2      0     164
                                             35 COMRAM     2     2      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (8) _service                                             14    14      0    1315
                                             21 COMRAM    14    14      0
         _keyPressedInterruptService
              _servoInterruptService
 ---------------------------------------------------------------------------------
 (9) _servoInterruptService                               12    12      0    1292
                                              9 COMRAM    12    12      0
                      i2_digitalRead
                     i2_digitalWrite
                       i2_startTimer
 ---------------------------------------------------------------------------------
 (10) i2_startTimer                                        8     2      6     258
                                              0 COMRAM     8     2      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalWrite                                      9     3      6     488
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (10) i2_digitalRead                                       6     2      4     162
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (9) _keyPressedInterruptService                           1     1      0      23
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 10
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _digitalWrite
   _initLCD
     _lcdInst
       _lcdNibble
   _initServo
     _initTimer
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _readKeypad (ARG)
     _startTimer
   _lcdClear
     _lcdInst
       _lcdNibble
   _pinSetup
   _printf
     ___awdiv
       ___awmod (ARG)
     ___ftadd
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       _fround (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___ftge
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     ___ftneg
     ___ftsub
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lltoft (ARG)
         ___ftpack
     ___fttol
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftadd (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftmul (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     ___lldiv
     ___llmod
       ___lldiv (ARG)
     ___lltoft
       ___ftpack
     ___wmul
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
     __div_to_l_
     __tdiv_to_l_
     _fround
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
     _putch
       _lcdNewline
         _lcdInst
           _lcdNibble
       _lcdNibble
     _scale
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
   _showInterface
     _dateTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _initRTC
       _I2C_Master_Init
         ___lldiv
     _mainMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _readKeypad
     _runMenu
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runSelect
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runStats
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _runTime
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
     _setTime
       _I2C_Master_Start
         _I2C_Master_Wait
       _I2C_Master_Stop
         _I2C_Master_Wait
       _I2C_Master_Write
         _I2C_Master_Wait
   _sortBattery
     ___altoft
       ___ftpack
       _analogRead (ARG)
     ___ftdiv
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftpack (ARG)
       _analogRead (ARG)
     ___ftmul
       ___altoft (ARG)
         ___ftpack
         _analogRead (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___awtoft (ARG)
         ___ftpack
       ___ftdiv (ARG)
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
         _analogRead (ARG)
       ___ftpack (ARG)
       ___wmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       _analogRead (ARG)
     _analogRead
     _digitalRead
     _digitalWrite
     _initServo
       _initTimer
       _setAngle
         _angleToPulse
           ___altoft
             ___ftpack
             _analogRead (ARG)
           ___awtoft
             ___ftpack
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___fttol
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftadd (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftmul (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               _fround (ARG)
                 ___awdiv
                   ___awmod (ARG)
                 ___awmod
                 ___ftmul
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftdiv (ARG)
                     ___altoft (ARG)
                       ___ftpack
                       _analogRead (ARG)
                     ___awtoft (ARG)
                       ___ftpack
                     ___ftpack (ARG)
                     _analogRead (ARG)
                   ___ftpack (ARG)
                   ___wmul (ARG)
                     ___awdiv (ARG)
                       ___awmod (ARG)
                     ___awmod (ARG)
                   _analogRead (ARG)
                 ___wmul
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             _scale (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
         _readKeypad (ARG)
       _startTimer
     _lcdClear
       _lcdInst
         _lcdNibble
     _pause
       _lcdClear
         _lcdInst
           _lcdNibble
       _printf
         ___awdiv
           ___awmod (ARG)
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftge
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftneg
         ___ftsub
           ___ftadd
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___lltoft (ARG)
             ___ftpack
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lldiv
         ___llmod
           ___lldiv (ARG)
         ___lltoft
           ___ftpack
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         __div_to_l_
         __tdiv_to_l_
         _fround
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
         _putch
           _lcdNewline
             _lcdInst
               _lcdNibble
           _lcdNibble
         _scale
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       _readKeypad
     _printf
       ___awdiv
         ___awmod (ARG)
       ___ftadd
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         _fround (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___ftge
       ___ftmul
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftpack (ARG)
         ___wmul (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
         _analogRead (ARG)
       ___ftneg
       ___ftsub
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___lltoft (ARG)
           ___ftpack
       ___fttol
         ___altoft (ARG)
           ___ftpack
           _analogRead (ARG)
         ___awtoft (ARG)
           ___ftpack
         ___ftadd (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul (ARG)
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         _scale (ARG)
           ___awdiv
             ___awmod (ARG)
           ___awmod
           ___ftmul
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___wmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
       ___lldiv
       ___llmod
         ___lldiv (ARG)
       ___lltoft
         ___ftpack
       ___wmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
       __div_to_l_
       __tdiv_to_l_
       _fround
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
       _putch
         _lcdNewline
           _lcdInst
             _lcdNibble
         _lcdNibble
       _scale
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___wmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
     _readKeypad
     _setAngle
       _angleToPulse
         ___altoft
           ___ftpack
           _analogRead (ARG)
         ___awtoft
           ___ftpack
         ___ftadd
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           _fround (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
         ___ftdiv
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
           _analogRead (ARG)
         ___ftmul
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftpack (ARG)
           ___wmul (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
           _analogRead (ARG)
         ___fttol
           ___altoft (ARG)
             ___ftpack
             _analogRead (ARG)
           ___awtoft (ARG)
             ___ftpack
           ___ftadd (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftmul (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             _fround (ARG)
               ___awdiv
                 ___awmod (ARG)
               ___awmod
               ___ftmul
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftdiv (ARG)
                   ___altoft (ARG)
                     ___ftpack
                     _analogRead (ARG)
                   ___awtoft (ARG)
                     ___ftpack
                   ___ftpack (ARG)
                   _analogRead (ARG)
                 ___ftpack (ARG)
                 ___wmul (ARG)
                   ___awdiv (ARG)
                     ___awmod (ARG)
                   ___awmod (ARG)
                 _analogRead (ARG)
               ___wmul
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
           ___ftdiv (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftpack (ARG)
             _analogRead (ARG)
           ___ftmul (ARG)
             ___altoft (ARG)
               ___ftpack
               _analogRead (ARG)
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___awtoft (ARG)
               ___ftpack
             ___ftdiv (ARG)
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftpack (ARG)
               _analogRead (ARG)
             ___ftpack (ARG)
             ___wmul (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
             _analogRead (ARG)
           _scale (ARG)
             ___awdiv
               ___awmod (ARG)
             ___awmod
             ___ftmul
               ___altoft (ARG)
                 ___ftpack
                 _analogRead (ARG)
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
               ___awtoft (ARG)
                 ___ftpack
               ___ftdiv (ARG)
                 ___altoft (ARG)
                   ___ftpack
                   _analogRead (ARG)
                 ___awtoft (ARG)
                   ___ftpack
                 ___ftpack (ARG)
                 _analogRead (ARG)
               ___ftpack (ARG)
               ___wmul (ARG)
                 ___awdiv (ARG)
                   ___awmod (ARG)
                 ___awmod (ARG)
               _analogRead (ARG)
             ___wmul
               ___awdiv (ARG)
                 ___awmod (ARG)
               ___awmod (ARG)
       _readKeypad (ARG)
     _stopServo

 _service (ROOT)
   _keyPressedInterruptService
   _servoInterruptService
     i2_digitalRead
     i2_digitalWrite
     i2_startTimer

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             F7F      0       0      37        0.0%
EEDATA             400      0       0       0        0.0%
BITBANK14          100      0       0      32        0.0%
BANK14             100      0       0      33        0.0%
BITBANK13          100      0       0      30        0.0%
BANK13             100      0       0      31        0.0%
BITBANK12          100      0       0      28        0.0%
BANK12             100      0       0      29        0.0%
BITBANK11          100      0       0      26        0.0%
BANK11             100      0       0      27        0.0%
BITBANK10          100      0       0      24        0.0%
BANK10             100      0       0      25        0.0%
BITBANK9           100      0       0      22        0.0%
BANK9              100      0       0      23        0.0%
BITBANK8           100      0       0      20        0.0%
BANK8              100      0       0      21        0.0%
BITBANK7           100      0       0      18        0.0%
BANK7              100      0       0      19        0.0%
BITBANK6           100      0       0      16        0.0%
BANK6              100      0       0      17        0.0%
BITBANK5           100      0       0      14        0.0%
BANK5              100      0       0      15        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100     2B      56       7       33.6%
BITBANK15           80      0       0      35        0.0%
BANK15              80      0       0      36        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80     5F      7F       5       99.2%
BITCOMRAM           7E      0       0       0        0.0%
COMRAM              7E     3A      5B       1       72.2%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0     130      34        0.0%
DATA                 0      0     130       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V1.40 build -251452761 
Symbol Table                                                                                   Mon Mar 13 16:10:51 2017

                       ___altoft@exp 0034                        ___altoft@sign 0035  
                        _sortBattery 0D54                         ___awdiv@sign 002F  
                ___wmul@multiplicand 0034                          __CFG_BORV$3 000000  
                       __CFG_CP0$OFF 000000                         __CFG_CP1$OFF 000000  
                       __CFG_CP2$OFF 000000                         __CFG_CP3$OFF 000000  
                        __CFG_OSC$HS 000000                     _redirectingServo 003B  
                       ___ftadd@exp1 00B0                         ___ftadd@exp2 00AF  
                       ___ftadd@sign 00AE                                  l200 2CE0  
                                l116 1FE0                                  l126 0FD4  
                                l161 2DA0                                  l270 208E  
                                l432 2E50                                  l197 2CD4  
                                l710 0526                                  l294 2C06  
                                l375 29CE                                  l368 2B36  
                                l377 29DA                                  l378 29E6  
                                l682 06A4                      ??_showInterface 003B  
                                l951 1DFA                                  l983 21D4  
                       __CFG_CPB$OFF 000000                                  _PEN 007E2A  
                       __CFG_CPD$OFF 000000                                  _SEN 007E28  
                                _pin 013B                         ___awmod@sign 0029  
                                wreg 000FE8                         __CFG_LVP$OFF 000000  
                       ___ftdiv@cntr 0086                         ___ftdiv@sign 008B  
                       __CFG_WDT$OFF 000000                                 l1010 1078  
                               l1012 10A0                                 l1021 1176  
                               l1030 11A0                                 l1006 103E  
                               l1041 1B7C                                 l1125 2684  
                               l1135 284C                                 l1055 1CD2  
                               l1080 2D82                                 l1048 1C44  
                               l1049 1C6C                                 l5011 112E  
                               l5005 1106                                 l5007 1114  
                               l5111 1892                                 l5025 11CA  
                               l5017 115C                                 l5009 1122  
                               l5201 27D6                                 l5121 18D0  
                               l5035 1218                                 l5019 116A  
                               l5115 18B0                                 l5051 1ADA  
                               l5141 25A4                                 l5205 27E0  
                               l5125 18EE                                 l6013 1E9E  
                               l5221 2BD6                                 l5045 1AA6  
                               l5231 1968                                 l6031 1EEC  
                               l6023 1ECC                                 l6015 1EA6  
                               l5071 1B3A                                 l5401 1CCC  
                               l5153 25CA                                 l5209 27EE  
                               l5305 1456                                 l4273 29A4  
                               l6009 1E94                                 l5155 25D2  
                               l5147 25B4                                 l5091 180A  
                               l6035 1EF6                                 l6027 1EDC  
                               l5261 1A3A                                 l5253 1A0E  
                               l5501 2642                                 l5173 260A  
                               l5165 25F2                                 l5157 25D6  
                               l5325 0B2A                                 l4269 299C  
                               l6037 1F02                                 l6109 1FC4  
                               l5263 1A44                                 l5511 2676  
                               l5503 2646                                 l5415 1D20  
                               l5343 0D2E                                 l5319 0A80  
                               l4279 29C4                                 l5249 19FA  
                               l5521 2816                                 l5409 1D02  
                               l5353 1BDE                                 l5169 25FC  
                               l5193 27B6                                 l5185 279C  
                               l5097 1844                                 l5337 0C84  
                               l5329 0B50                                 l5267 1A60  
                               l5259 1A2A                                 l5523 281A  
                               l5195 27BE                                 l5611 028E  
                               l5603 0222                                 l5533 28CA  
                               l5461 1DF4                                 l5453 1DD0  
                               l5437 1D92                                 l5429 1D62  
                               l5197 27C2                                 l5189 27A8  
                               l5613 02A4                                 l5527 283E  
                               l5519 280A                                 l5535 28D6  
                               l5359 1C0A                                 l5711 071A  
                               l5623 0314                                 l5607 0248  
                               l5551 0044                                 l4921 218C  
                               l4913 2156                                 l5449 1DC0  
                               l5393 1CA8                                 l5297 138E  
                               l5713 0720                                 l5633 0372  
                               l5609 025E                                 l5553 004A  
                               l5545 0022                                 l5475 24A4  
                               l5467 2A3A                                 l5459 1DE8  
                               l5707 06F0                                 l5651 0424  
                               l5619 02EE                                 l5555 0050  
                               l5563 0074                                 l5485 2500  
                               l4925 21A2                                 l4917 2164  
                               l5389 1C98                                 l5725 0766  
                               l5741 07B2                                 l5661 04D8  
                               l5637 03D8                                 l5565 00B2  
                               l5549 0038                                 l5901 2044  
                               l5479 24D4                                 l4927 21C0  
                               l4919 216E                                 l5399 1CC0  
                               l5751 087A                                 l5727 076C  
                               l5743 07C4                                 l5663 04E6  
                               l5655 044C                                 l5639 03DE  
                               l5559 0068                                 l5831 2238  
                               l5807 29F2                                 l4929 21CA  
                               l5761 0908                                 l5673 052A  
                               l5841 225A                                 l5825 2224  
                               l4961 2732                                 l5499 2636  
                               l5747 07EA                                 l5691 0688  
                               l5683 05A0                                 l5667 04F4  
                               l5595 01BA                                 l5579 010C  
                               l5763 091E                                 l5907 2064  
                               l5843 2260                                 l5835 2246  
                               l4963 273E                                 l5749 07FA  
                               l5757 08EE                                 l5669 0508  
                               l5837 224C                                 l5829 2232  
                               l4983 1086                                 l5759 0900  
                               l5695 0696                                 l5679 054E  
                               l5847 226E                                 l5783 2B02  
                               l5871 2AC4                                 l4977 104C  
                               l5689 067A                                 l5849 2274  
                               l5777 2AF8                                 l5793 2B12  
                               l5865 2AB2                                 l5787 2B0A  
                               l5867 2AB8                                 l5875 2ACA  
                               l4989 1096                                 l5981 1E18  
                               l5893 2004                                 l5869 2ABE  
                               l4999 10D8                                 l5983 1E22  
                               l5993 1E4C                                 l5985 1E26  
                               l5897 2024                                 l5889 1FE4  
                               l5979 1E14                                 l5997 1E5A  
                               _EEIF 007D0C                                 STR_1 FFF6  
                               STR_2 FEAE                                 STR_3 FFD7  
                               STR_4 FFB7                                 STR_5 FE99  
                               STR_6 FFA6                                 STR_7 FFC8  
                               STR_8 FE81                                 STR_9 FFEE  
                               _LATA 000F89                                 _LATB 000F8A  
                               _LATC 000F8B                                 _LATD 000F8C  
                               _LATE 000F8D                         printf@tmpval 010C  
                               u4341 0FEC                                 u6007 2B76  
                               u4351 100A                                 u6017 2DB8  
                               u4601 17E6                                 u6027 2DCA  
                               _PEIE 007F96                                 u6037 2876  
                               u4621 1820                                 u5430 051E  
                               u5270 0152                                 u6047 2884  
                               u4551 1A84                                 u6057 28AA  
                               u4810 198E                                 u6067 28B8  
                               u5275 0146                                 u4571 1AB8  
                               _RCEN 007E2B                                 u5605 294E  
                               u5614 220A                                 u4815 1984  
                               u5615 2204                                 u5704 2054  
                               u5705 2050                                 u4791 1944  
                               u4951 1BC2                                 u5921 0EE0  
                               u5674 1FF4                                 u4971 1BEE  
                               u5675 1FF0                                 u5684 2014  
                               u5685 2010                                 u5694 2034  
                               u5695 2030                                 u5987 2DA4  
                               u5997 2B42                                 _RSEN 007E29  
                               _main 1F18                         ___ftpack@arg 0024  
                               _keys FE69                         ___ftpack@exp 0027  
                               _port 0143                                 fsr0h 000FEA  
                               fsr1h 000FE2                                 fsr2h 000FDA  
                               fsr0l 000FE9                                 indf2 000FDF  
                               fsr1l 000FE1                                 fsr2l 000FD9  
                               btemp 005C                                 prodh 000FF4  
                               prodl 000FF3                                 start 000E  
                      __CFG_IESO$OFF 000000                        __CFG_MCLRE$ON 000000  
                       ___ftmul@cntr 0099                         ___param_bank 000000  
                       ___ftmul@sign 009A                         ___fttol@exp1 00BF  
                       ___fttol@lval 00BB                 __end_ofi2_startTimer 2AB0  
                   ?_I2C_Master_Init 0031                     ?_I2C_Master_Wait 0001  
                   ?_I2C_Master_Stop 0001                 __end_of_angleToPulse 17D0  
                              ?_main 0001                                _ACKEN 007E2C  
                              _ACKDT 007E2D                      __end_of___awdiv 2614  
                              _EEADR 000FA9                      __end_of___ftadd 123E  
                              STR_10 FFE5                                STR_11 FEE7  
                              STR_12 FF95                                STR_20 FF40  
                              STR_21 FF1D                                STR_13 FED5  
                              STR_22 FF84                                STR_14 FF62  
                              STR_23 FF2F                                STR_15 FEF9  
                              STR_16 FF51                                STR_17 FEC2  
                              STR_18 FF73                                STR_19 FF0B  
                    __end_of___awmod 27F8                      __end_of___ftdiv 1BB2  
            ??_servoInterruptService 000A                      __end_of___ftneg 2D90  
                    __end_of___lldiv 2696                      __end_of___ftmul 192E  
                              _T0CON 000FD5                      ___awdiv@divisor 002C  
                              _T1CON 000FCD                      __end_of___llmod 285E  
                    __end_of___ftsub 2A64                      __end_of___fttol 1A72  
                              _T2CON 000FCA                                _T3CON 000FB1  
                              i2l137 2438                                i2l270 2140  
                              i2l520 1670                                i2l515 1628  
                              i2l517 162C                                i2l518 1630  
                              i2l375 2A66                                i2l519 1634  
                              i2l377 2A72                                i2l378 2A7E  
                    ___awdiv@counter 002E                                _TMR0H 000FD7  
                              _TMR1H 000FCF                                _TMR0L 000FD6  
                              _TMR3H 000FB3                                _TMR1L 000FCE  
                              _TMR3L 000FB2                                _PORTA 000F80  
                              _PORTB 000F81                                _PORTC 000F82  
                              _PORTD 000F83                                _TRISA 000F92  
                              _TRISB 000F93                                _TRISC 000F94  
                              _TRISD 000F95                                _TRISE 000F96  
                      __CFG_PWRT$OFF 000000                        __CFG_WRT0$OFF 000000  
                      __CFG_WRT1$OFF 000000                        __CFG_WRT2$OFF 000000  
                      __CFG_WRT3$OFF 000000                         ___lltoft@exp 0034  
                      _conveyorServo 00DF                      __end_of_lcdInst 2DD4  
                     __CFG_EBTR0$OFF 000000                       __CFG_FCMEN$OFF 000000  
             servoInterruptService@i 0014                       __CFG_EBTR1$OFF 000000  
                     __CFG_EBTR2$OFF 000000                       __CFG_EBTR3$OFF 000000  
                      __CFG_WRTB$OFF 000000                        __CFG_WRTC$OFF 000000  
                      __CFG_WRTD$OFF 000000                      __end_of_initLCD 2B82  
                     __CFG_EBTRB$OFF 000000                        ___awtoft@sign 002F  
                    __end_of_initRTC 2E3E                      __end_of_dpowers FDFB  
                              _count 0057                                _scale 093E  
                              _pause 2E12                        ___ftpack@sign 0028  
                              _pulse 012B                                _putch 2D90  
                    __end_of_setTime 29CC                                pclath 000FFA  
                              tablat 000FF5                      __end_of_service 2474  
                    __end_of_runMenu 2C62                                plusw1 000FE3  
                              plusw2 000FDB                      __end_of_runTime 2C88  
                              status 000FD8                       __CFG_PBADEN$ON 000000  
               __end_of_digitalWrite 22A0                      __initialization 2504  
                       __end_of_main 1FE2                         __end_of_keys FE7A  
                             ??_main 003B                        ___fttol@sign1 00BA  
                      __activetblptr 000002                 __size_of_digitalRead 00B2  
               __size_of__tdiv_to_l_ 0132                    ?_I2C_Master_Start 0001  
                  ?_I2C_Master_Write 0025                   ??_I2C_Master_Start 0025  
                             _ADCON0 000FC2                               _ADCON1 000FC1  
                 ??_I2C_Master_Write 0027                               _ADCON2 000FC0  
                   __end_of___altoft 2788                     ___llmod@dividend 0031  
                             ?_scale 009B                               _ADRESH 000FC4  
                             _EEADRH 000FAA                               _ADRESL 000FC3  
                             _EEDATA 000FA8                               ?_pause 00CD  
                             _EECON1 000FA6                               _EECON2 000FA7  
      keyPressedInterruptService@key 0001                     ___awdiv@dividend 002A  
                   __end_of___awtoft 2BFA                               ?_putch 0001  
                   __end_of___ftpack 21F4                     __end_of___lltoft 2920  
                             _INT0IE 007F94                               _INT0IF 007F91  
                             _INT1IE 007F83                               _INT1IF 007F80  
                       sortBattery@V 0126                               i2l4321 2096  
                             i2l4333 20F6                               i2l4325 20B6  
                             i2l4329 20D6                               i2l4361 22F8  
                             i2l4353 22DE                               i2l4339 2116  
                             i2l4371 231A                               i2l4355 22E4  
                             i2l4365 2306                               i2l4349 22D0  
                             i2l4373 2320                               i2l4367 230C  
                             i2l4359 22F2                               i2l4561 1638  
                             i2l4387 2A8A                               i2l4563 1662  
                             i2l4619 242E                               i2l4557 15AA  
                             i2l4549 14F2                               _TMR0IE 007F95  
                             _TMR0IF 007F92                               _TMR1IE 007CE8  
                             _TMR1IF 007CF0                               _TMR2IF 007CF1  
                             _TMR3IE 007D01                               _TMR3IF 007D09  
                             _SSPADD 000FC8                               _TRISC3 007CA3  
                             _TRISC4 007CA4                               _SSPBUF 000FC9  
             __size_ofi2_digitalRead 00B2                     __end_of_dateTime 2D46  
                   __end_of_lcdClear 2E94                    _angleToPulse$1338 00D0  
                        initServo@pi 010A                          initServo@po 0108  
                     __CFG_XINST$OFF 000000                     __end_of__powers_ FE49  
                             ___ftge 2474                     __end_of_mainMenu 2D20  
                             ___wmul 2D46                            ??___awdiv 002E  
                          ??___ftadd 00AB                       __CFG_STVREN$ON 000000  
                          ??___awmod 0028                            ??___ftdiv 0036  
                          ??___ftneg 0027                            ??___lldiv 002C  
                          ??___ftmul 0092                            ??___llmod 0039  
                          ??___ftsub 0039                            ??___fttol 00B5  
                             _fround 123E                               clear_0 256A  
                             clear_1 257C                     ___awdiv@quotient 0030  
                    ___awmod@divisor 0026                      ___awmod@counter 0028  
                          ??_lcdInst 0026                               _printf 0012  
                   __end_of_pinSetup 2BC2                     __end_of_setAngle 23E0  
                  analogRead@channel 0024                ___ftmul@f3_as_product 0096  
                          ??_initLCD 0028                            ??_initRTC 0039  
                       __pdataCOMRAM 003B                        setAngle@angle 00D9  
                       __mediumconst FDD2                            ??_setTime 0027  
                             tblptrh 000FF7                               tblptrl 000FF6  
                             tblptru 000FF8                        setAngle@timer 00D7  
                          ??_service 0016                            ??_runMenu 003A  
                   __end_of_runStats 2CAE                            ??_runTime 003A  
                         __accesstop 0080              __end_of__initialization 2582  
                         ___altoft@c 002C                           ___ftadd@f1 00A5  
                         ___ftadd@f2 00A8                           ___ftge@ff1 0024  
                         ___ftge@ff2 0027                        ___rparam_used 000001  
                         ___ftdiv@f1 0080                           ___ftdiv@f2 0083  
                         ___ftdiv@f3 0087                           ___ftneg@f1 0024  
                         ___awtoft@c 002C                __size_ofi2_startTimer 004C  
                         ___ftmul@f1 008C                           ___ftmul@f2 008F  
                         ___ftsub@f1 00B1                           ___ftsub@f2 00B4  
                         ___fttol@f1 00B1                 __end_of_happynewyear FE81  
                     __pcstackCOMRAM 0001                __size_of_angleToPulse 015E  
                       __pidataBANK0 2DF4                         __pidataBANK1 2E6C  
                         ___lltoft@c 002C                        _cylinderMotor 00EF  
                      __end_of_scale 0D54                         ?_sortBattery 0001  
                      __end_of_pause 2E28                        __end_of_putch 2DB2  
                      i2_digitalRead 2094                   __size_of_lcdNibble 0066  
                         __div_to_l_ 1CE4                     i2digitalRead@pin 0003  
                    __div_to_l_@exp1 002F                      __div_to_l_@cntr 002E  
                            ??_scale 0039                              ??_pause 003A  
                    __div_to_l_@quot 002A                   i2digitalWrite@port 0001  
                            ??_putch 0028                         i2_startTimer 2A64  
                         __pbssBANK0 00FD                           __pbssBANK1 012B  
                       _angleToPulse 1672                __size_of_digitalWrite 00AC  
                 __size_of_initTimer 0046                   __size_of_initServo 007A  
                         _analogRead 2BFA                        __div_to_l_@f1 0024  
                      __div_to_l_@f2 0027                              ?___ftge 0024  
                            ?___wmul 0032                sortBattery@resolution 0123  
                          ?___altoft 002C                              ?_fround 009B  
                         _lcdNewline 2E84                            ?___awtoft 002C  
                          ?___ftpack 0024                       ?i2_digitalRead 0001  
                            ?_printf 00C0                            ?___lltoft 002C  
         servoInterruptService@flags 000C       __size_of_servoInterruptService 01D4  
      __end_of_servoInterruptService 1672                __end_of_showInterface 1F18  
                          ?_dateTime 0001                       stopServo@timer 0024  
                  i2startTimer@timer 0001                            ?_lcdClear 0001  
                 __size_of_runSelect 0026                     angleToPulse@a000 00D3  
                   angleToPulse@a180 00CC                         _digitalWrite 21F4  
                            _SSPCON1 000FC6                              _SSPCON2 000FC5  
                            _SSPSTAT 000FC7                            ?_mainMenu 0001  
            __size_ofi2_digitalWrite 00AC                   __size_of_stopServo 0046  
                            _V_LIM_C 0054                            ?_pinSetup 0001  
                          ?_setAngle 00D7                    __end_of_lcdNibble 28C4  
                  __end_of__npowers_ FE22                              __Hparam 0000  
                         _scale$1341 009E                              __Lparam 0000  
                    __size_of___ftge 0090                              ___awdiv 2590  
                            ___ftadd 0FD6                              ___awmod 2788  
                         _readKeypad 2CD4                              ___ftdiv 1A72  
                            ___ftneg 2D6C                              ___lldiv 2614  
                    __size_of___wmul 0026                              ___ftmul 17D0  
                            ___llmod 27F8                              ___ftsub 2A18  
                            ___fttol 192E                            ?_runStats 0001  
                         ??___altoft 0030                              __pcinit 2504  
                         ??___awtoft 002F                           ??___ftpack 0029  
                    __size_of_fround 0260                              __ramtop 1000  
                            _lcdInst 2DB2                           ??___lltoft 0030  
                            __ptext0 1F18                              __ptext1 0D54  
                            __ptext2 2AB0                              __ptext3 2E12  
                            __ptext4 2696                              __ptext5 29CC  
                            __ptext6 234C                              __ptext7 1672  
                            __ptext8 1A72                              __ptext9 2BC2  
                    __size_of_printf 092C                              _padPin1 00F3  
                            _padPin2 0041                              _padPin3 004D  
                      startTimer@val 0026                              _initLCD 2B3C  
                  __end_of_hexpowers FE69                          ?__div_to_l_ 0024  
                            _lastKey 005B                              _initRTC 2E28  
                  __end_of_initTimer 2B3C                    __end_of_initServo 2710  
                            _dpowers FDD3                     ___awmod@dividend 0024  
                         ??_dateTime 003A                              _setTime 297A  
           __size_of_I2C_Master_Init 005A                           ??_lcdClear 0028  
           __size_of_I2C_Master_Wait 0012             __size_of_I2C_Master_Stop 0008  
                            _service 0008                              _runMenu 2C32  
                            _runTime 2C62                       __pintcode_body 23E0  
               end_of_initialization 2582                           ??_mainMenu 003A  
                      __Lmediumconst FDD2                              int_func 23E0  
                     digitalRead@pin 0026                          ?_analogRead 0024  
                         ??_pinSetup 0024                           ??_setAngle 0100  
          __size_of_I2C_Master_Start 0008            __size_of_I2C_Master_Write 000A  
                    ___lldiv@divisor 0028                      ___lldiv@counter 0030  
                  __end_of_runSelect 2CD4                              printf@c 0117  
                            printf@f 00C0                     I2C_Master_Init@c 0031  
                            postdec1 000FE5                              postdec2 000FDD  
                            postinc0 000FEE                              postinc2 000FDE  
                         ??_runStats 003A                      ??i2_digitalRead 0005  
                     __tdiv_to_l_@f1 0024                       __tdiv_to_l_@f2 0027  
                      ??_digitalRead 0028                          ?_lcdNewline 0001  
                      ??__tdiv_to_l_ 002A                    __end_of_stopServo 2AF6  
                          _PORTBbits 000F81                 __size_of_sortBattery 0282  
                   showInterface@key 00CD         ??_keyPressedInterruptService 0001  
                _redirectAngle_OTHER 004B                         _happynewyear FE7A  
                 angleToPulse@offset 00C8                           _startTimer 29CC  
                        ___ftdiv@exp 008A                  __size_of__div_to_l_ 0128  
                         _switchFlag 00FD                          ___ftmul@exp 0095  
                        ?_readKeypad 0001                       __end_of___ftge 2504  
                     __end_of___wmul 2D6C                        __pidataCOMRAM 2E3E  
__size_of_keyPressedInterruptService 0020                       __end_of_fround 149E  
                     __end_of_printf 093E                  __size_of_analogRead 0038  
                start_initialization 2504                  __end_of_digitalRead 2094  
                __end_of__tdiv_to_l_ 1CE4                       initServo@angle 010C  
                     initTimer@timer 0024                       initServo@timer 0106  
                     i2_digitalWrite 22A0                    ??_I2C_Master_Init 0035  
                  ??_I2C_Master_Wait 0024                    i2digitalRead@port 0001  
                  ??_I2C_Master_Stop 0025                  __size_of_lcdNewline 0008  
                    ___llmod@divisor 0035                      ___llmod@counter 0039  
                           ??___ftge 002A                             ??___wmul 0036  
                        __pdataBANK0 00DF                          __pdataBANK1 014E  
                       pause@message 00CD                     __CFG_LPT1OSC$OFF 000000  
                           ??_fround 0039                             ??_printf 00C7  
                  __size_of___altoft 0078                           fround@prec 00A4  
                  __size_of___awtoft 0038                    __size_of___ftpack 00AE  
                  __size_of___lltoft 005C                          __pbssCOMRAM 004D  
                      __pcstackBANK0 0080                        __pcstackBANK1 0100  
             __end_ofi2_digitalWrite 234C                    __size_of_dateTime 0026  
                        ?_startTimer 0024                    __size_of_lcdClear 0008  
                __size_of_readKeypad 0026                    __size_of_mainMenu 0026  
                  i2digitalWrite@pin 0003                    i2digitalWrite@val 0005  
                   _I2C_Master_Start 2E7C                     _I2C_Master_Write 2E62  
                  __CFG_CCP2MX$PORTC 000000                    __size_of_pinSetup 0040  
                  __size_of_setAngle 0094                            __pintcode 0008  
                      __pmediumconst FDD2                            _lcdNibble 285E  
                           ?___awdiv 002A                             ?___ftadd 00A5  
                           ?___awmod 0024                             ?___ftdiv 0080  
                           ?___ftneg 0024                             ?___lldiv 0024  
                           ?___ftmul 008C                             ?___llmod 0031  
                           ?___ftsub 00B1                            __npowers_ FDFB  
                           ?___fttol 00B1                          _digitalRead 1FE2  
                           ?_lcdInst 0001                          __tdiv_to_l_ 1BB2  
                  __size_of_runStats 0026                         ??__div_to_l_ 002A  
                           ?_initLCD 0001                             ?_initRTC 0001  
                    startTimer@timer 0024   __end_of_keyPressedInterruptService 2DF4  
         _keyPressedInterruptService 2DD4                             ?_setTime 0001  
                           ?_service 0001                            _hexpowers FE49  
                           ?_runMenu 0001                            _initTimer 2AF6  
                          _initServo 2696                             ?_runTime 0001  
                    ?i2_digitalWrite 0001                _servoInterruptService 149E  
                     __size_of_scale 0416                       __size_of_pause 0016  
                     __size_of_putch 0022                             _AA_float 00EB  
                     sortBattery@Vcc 0120                       ___wmul@product 0036  
                     sortBattery@dir 0118                             _LATDbits 000F8C  
                       ??_analogRead 0028                             i2u401_40 14A6  
                           i2u402_40 14A8                             i2u403_40 14B4  
                           i2u404_40 14B6                             i2u405_40 14C2  
                           i2u406_40 14C4                             i2u407_40 14D0  
                           i2u408_40 14D2                             i2u409_40 14F0  
                 __end_of__div_to_l_ 1E0C                             i2u370_44 20A6  
                           i2u370_45 20A2                             i2u371_44 20C6  
                           i2u371_45 20C2                             i2u372_44 20E6  
                           i2u372_45 20E2                             i2u373_44 2106  
                           i2u373_45 2102                             i2u374_44 22B6  
                           i2u374_45 22B0               __size_of_showInterface 010C  
                   __CFG_WDTPS$32768 000000                           ?_lcdNibble 0001  
                     _padAngle_CLOSE 00F7                         ??_lcdNewline 0028  
                __size_of_startTimer 004C                            _runSelect 2CAE  
                  angleToPulse@angle 00C0                    ___wmul@multiplier 0032  
                      lcdNibble@data 0025                           printf@flag 0106  
                      lcdNibble@temp 0024                           printf@fval 0114  
                         printf@prec 0108                            _stopServo 2AB0  
                 __end_of_analogRead 2C32                             _V_LIM_AA 0051  
                           _V_LIM_9V 014B                           runMenu@key 003A  
                         ?_initTimer 0024                           ?_initServo 0106  
                  sortBattery@signal 0129                            copy_data0 2518  
                          copy_data1 2538                            copy_data2 2558  
                 __end_of_lcdNewline 2E8C                        readKeypad@key 0024  
                           __Hrparam 0000                             __Lrparam 0000  
                 __CFG_BOREN$SBORDIS 000000                         ??_readKeypad 0024  
                      ??_sortBattery 00DB                     __size_of___awdiv 0084  
                   __size_of___ftadd 0268                     __size_of___awmod 0070  
                   __size_of___ftdiv 0140                     __size_of___ftneg 0024  
                   __size_of___lldiv 0082                             ___altoft 2710  
                   __size_of___ftmul 015E                     __size_of___llmod 0066  
                   __size_of___ftsub 004C                     __size_of___fttol 0144  
                         ?_runSelect 0001                             ___awtoft 2BC2  
                           ___ftpack 2146                __end_ofi2_digitalRead 2146  
                        _fround$1340 009E                          _fround$1339 00A1  
                           ___lltoft 28C4                     __size_of_lcdInst 0022  
                    _I2C_Master_Init 2920                     __size_of_initLCD 0046  
                    _I2C_Master_Wait 2E50                     __size_of_initRTC 0016  
                           _dateTime 2D20                           ?_stopServo 0024  
                    _I2C_Master_Stop 2E74               ?_servoInterruptService 0001  
                      _showInterface 1E0C                             _lcdClear 2E8C  
                   __size_of_setTime 0052                             __ptext10 2710  
                           __ptext11 2AF6                             __ptext20 2E50  
                           __ptext12 21F4                             __ptext21 2C62  
                           __ptext13 1FE2                             __ptext30 0012  
                           __ptext22 2C88                             __ptext14 2BFA  
                           __ptext31 093E                             __ptext23 2CAE  
                           __ptext15 1E0C                             __ptext40 1CE4  
                           __ptext32 2D90                             __ptext24 2C32  
                           __ptext16 297A                             __ptext41 28C4  
                           __ptext33 2E84                             __ptext25 2CD4  
                           __ptext17 2E62                             __ptext50 2E8C  
                           __ptext42 27F8                             __ptext34 123E  
                           __ptext26 2CFA                             __ptext18 2E74  
                           __ptext51 2B82                             __ptext43 2614  
                           __ptext35 2D46                             __ptext27 2E28  
                           __ptext19 2E7C                             __ptext60 2DD4  
                           __ptext52 2B3C                             __ptext44 192E  
                           __ptext36 17D0                             __ptext28 2920  
                           __ptext53 2DB2                             __ptext45 2A18  
                           __ptext37 2788                             __ptext29 2D20  
                           __ptext54 285E                             __ptext46 0FD6  
                           __ptext38 2590                             __ptext47 2146  
                           __ptext39 1BB2                             __ptext56 149E  
                           __ptext48 2D6C                             __ptext57 2A64  
                           __ptext49 2474                             __ptext58 22A0  
                           __ptext59 2094                             __powers_ FE22  
                   __size_of_service 246C                     __size_of_runMenu 0030  
                    i2startTimer@val 0003                     __size_of_runTime 0026  
                      ?i2_startTimer 0001                             _mainMenu 2CFA  
                           _padServo 00E5                   __end_of_readKeypad 2CFA  
                      ?_angleToPulse 00C0                        __size_of_main 00CA  
                           _pinSetup 2B82                             _setAngle 234C  
                   sortBattery@F3138 014E                             _prevTime 0059  
                        ??_lcdNibble 0024                        _padAngle_OPEN 00FB  
                           int$flags 005C                             _runStats 2C88  
                          printf@idx 0103                            printf@exp 010A  
                          printf@val 0110                            putch@data 0028  
           __end_of_I2C_Master_Start 2E84                  __end_of_sortBattery 0FD6  
           __end_of_I2C_Master_Write 2E6C                           _INTCONbits 000FF2  
                     ?_showInterface 0001                        ?_digitalWrite 0024  
                        ??_initTimer 0026                          ??_initServo 0039  
                           scale@scl 00A1                       ??i2_startTimer 0007  
                       ??_startTimer 002A                      digitalRead@port 0024  
                           intlevel2 0000                     __tdiv_to_l_@exp1 0032  
                   __tdiv_to_l_@cntr 0031                       ??_angleToPulse 00C4  
                   __tdiv_to_l_@quot 002D                     ___lldiv@dividend 0024  
                           setTime@i 0027                     _redirectAngle_AA 0047  
                   _redirectAngle_9V 0045                             printf@ap 0104  
            __end_of_I2C_Master_Init 297A              __end_of_I2C_Master_Wait 2E62  
            __end_of_I2C_Master_Stop 2E7C                          lcdInst@data 0027  
                       ?_digitalRead 0024                          ??_runSelect 003A  
                       ?__tdiv_to_l_ 0024                   __end_of_startTimer 2A18  
                        _printf$1342 0100                     ??i2_digitalWrite 0007  
                   digitalWrite@port 0024                     ___lldiv@quotient 002C  
                  I2C_Master_Write@d 0025                          ??_stopServo 0026  
                     ??_digitalWrite 002A          ?_keyPressedInterruptService 0001  
                    _redirectAngle_C 0049                     _padAngle_NEUTRAL 00F9  
                    digitalWrite@pin 0026                      digitalWrite@val 0028  
